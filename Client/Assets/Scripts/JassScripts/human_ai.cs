// Generated by .


	public partial class GameDefine 
	{

		public class human_ai
		{
		//==================================================================================================
		//  $Id: human.ai,v 1.15 2003/04/23 19:26:00 bfitch Exp $
		//==================================================================================================
			public bool  basic_opening = true;
			public bool  b_hero1_done = false;
			public bool  b_hero2_done = false;
			public bool  b_hero3_done = false;
			public bool  b_knights_ok = false;
			public int  c_altar_done = 0;
			public int  c_arcane = 0;
			public int  c_aviary_done = 0;
			public int  c_breaker_done = 0;
			public int  c_castle_done = 0;
			public int  c_food_made = 0;
			public int  c_food_used = 0;
			public int  c_footman_done = 0;
			public int  c_gold = 0;
			public int  c_gold_owned = 0;
			public int  c_gryphon_done = 0;
			public int  c_gyro_done = 0;
			public int  c_hall = 0;
			public int  c_hall_done = 0;
			public int  c_hawk_done = 0;
			public int  c_hero1_done = 0;
			public int  c_hero2_done = 0;
			public int  c_hero3_done = 0;
			public int  c_house = 0;
			public int  c_house_done = 0;
			public int  c_keep_done = 0;
			public int  c_knight_done = 0;
			public int  c_mill_done = 0;
			public int  c_mines = 0;
			public int  c_mortar_done = 0;
			public int  c_peasant_done = 0;
			public int  c_priest_done = 0;
			public int  c_rifleman_done = 0;
			public int  c_sanctum_done = 0;
			public int  c_smith_done = 0;
			public int  c_sorceress_done = 0;
			public int  c_tank_done = 0;
			public int  c_watch = 0;
			public int  c_watch_done = 0;
			public int  c_workshop_done = 0;
			public int  c_zep = 0;
		//--------------------------------------------------------------------------------------------------
		//  set_skills
		//--------------------------------------------------------------------------------------------------
			public void set_skills(  )
			{
				// Original JassCode
				skill[ 1] = HOLY_BOLT;
				skill[ 2] = DEVOTION_AURA;
				skill[ 3] = HOLY_BOLT;
				skill[ 4] = DIVINE_SHIELD;
				skill[ 5] = HOLY_BOLT;
				skill[ 6] = RESURRECTION;
				skill[ 7] = DEVOTION_AURA;
				skill[ 8] = DEVOTION_AURA;
				skill[ 9] = DIVINE_SHIELD;
				skill[10] = DIVINE_SHIELD;
				SetSkillArray(1,PALADIN);
				SetSkillArray(2,PALADIN);
				SetSkillArray(3,PALADIN);
				skill[ 1] = THUNDER_BOLT;
				skill[ 2] = BASH;
				skill[ 3] = THUNDER_BOLT;
				skill[ 4] = THUNDER_CLAP;
				skill[ 5] = THUNDER_BOLT;
				skill[ 6] = AVATAR;
				skill[ 7] = BASH;
				skill[ 8] = BASH;
				skill[ 9] = THUNDER_CLAP;
				skill[10] = THUNDER_CLAP;
				SetSkillArray(1,MTN_KING);
				SetSkillArray(2,MTN_KING);
				SetSkillArray(3,MTN_KING);
				skill[ 1] = WATER_ELEMENTAL;
				skill[ 2] = BRILLIANCE_AURA;
				skill[ 3] = WATER_ELEMENTAL;
				skill[ 4] = BLIZZARD;
				skill[ 5] = WATER_ELEMENTAL;
				skill[ 6] = MASS_TELEPORT;
				skill[ 7] = BRILLIANCE_AURA;
				skill[ 8] = BRILLIANCE_AURA;
				skill[ 9] = BLIZZARD;
				skill[10] = BLIZZARD;
				SetSkillArray(1,ARCHMAGE);
				SetSkillArray(2,ARCHMAGE);
				SetSkillArray(3,ARCHMAGE);
				skill[ 1] = FLAME_STRIKE;
				skill[ 2] = SIPHON_MANA;
				skill[ 3] = FLAME_STRIKE;
				skill[ 4] = SIPHON_MANA;
				skill[ 5] = FLAME_STRIKE;
				skill[ 6] = SUMMON_PHOENIX;
				skill[ 7] = SIPHON_MANA;
				skill[ 8] = BANISH;
				skill[ 9] = BANISH;
				skill[10] = BANISH;
				SetSkillArray(1,BLOOD_MAGE);
				SetSkillArray(2,BLOOD_MAGE);
				SetSkillArray(3,BLOOD_MAGE);
			}

		//--------------------------------------------------------------------------------------------------
		//  setup_force
		//--------------------------------------------------------------------------------------------------
			public void setup_force(  )
			{
				// Original JassCode
				AwaitMeleeHeroes();
				InitMeleeGroup();
				SetMeleeGroup( hero_id );
				SetMeleeGroup( hero_id2 );
				SetMeleeGroup( hero_id3 );
				SetMeleeGroup( FOOTMEN );
				SetMeleeGroup( KNIGHT );
				SetMeleeGroup( RIFLEMEN );
				SetMeleeGroup( PRIEST );
				SetMeleeGroup( SORCERESS );
				SetMeleeGroup( GRYPHON );
				SetMeleeGroup( COPTER );
				SetMeleeGroup( SPELL_BREAKER );
				SetMeleeGroup( HUMAN_DRAGON_HAWK );
				SetInitialWave(10);
			}

		//--------------------------------------------------------------------------------------------------
		//  force_level
		//--------------------------------------------------------------------------------------------------
			public int force_level(  )
			{
				// Original JassCode
				// basic hero
				int level = 4;
				level = level + 2 * (c_footman_done + c_priest_done + c_sorceress_done + c_breaker_done);
				level = level + 3 * (c_rifleman_done + c_gryphon_done + c_hawk_done);
				level = level + 5 * (c_hero3_done + c_knight_done);
				level = level + 6 * c_hero2_done;
				return level;
			}

		//--------------------------------------------------------------------------------------------------
		//  attack_sequence
		//--------------------------------------------------------------------------------------------------
			public void attack_sequence(  )
			{
				// Original JassCode
				bool needs_exp;
				bool has_siege;
				bool air_units;
				int level;
				while( true )
				{
					if(  c_hero1_done > 0 && c_footman_done >= 2 )
						break;
					Sleep(2);
				}
				if(  MeleeDifficulty() == MELEE_NEWBIE  )
				{
					Sleep(240);
				}
				StaggerSleep(0,2);
				while( true )
				{
					while( true )
					{
						if(  ! CaptainRetreating() )
							break;
						Sleep(2);
					}
					setup_force();
					level = force_level();
					max_creeps = level * 4 / 5;
					min_creeps = max_creeps - 10;
					if(  min_creeps < 0  )
					{
						min_creeps = 0;
					}
					needs_exp = take_exp && (level >= 9 || c_gold_owned < 2000);
					has_siege = level >= 40 || c_mortar_done > 0 || c_tank_done > 0;
					air_units = c_gyro_done > 0 || c_gryphon_done > 0 || c_hawk_done > 0;
					allow_air_creeps = (c_rifleman_done + c_hawk_done + 2*c_gyro_done + c_gryphon_done) >= 3;
					SingleMeleeAttack(needs_exp,has_siege,false,air_units);
					if(  MeleeDifficulty() == MELEE_NEWBIE  )
					{
						Sleep(60);
					}
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  init_vars
		//--------------------------------------------------------------------------------------------------
			public void init_vars(  )
			{
				// Original JassCode
				c_altar_done = GetUnitCountDone(HUMAN_ALTAR);
				c_arcane = GetUnitCount(ARCANE_TOWER);
				c_aviary_done = GetUnitCountDone(AVIARY);
				c_breaker_done = GetUnitCountDone(SPELL_BREAKER);
				c_castle_done = TownCountDone(CASTLE);
				c_food_made = c_hall * GetFoodMade(TOWN_HALL) + c_house * GetFoodMade(HOUSE);
				c_food_used = FoodUsed();
				c_footman_done = GetUnitCountDone(FOOTMAN);
				c_gold = GetGold();
				c_gold_owned = GetGoldOwned();
				c_gryphon_done = GetUnitCountDone(GRYPHON);
				c_gyro_done = GetUnitCountDone(COPTER);
				c_hall = TownCount(TOWN_HALL);
				c_hall_done = TownCountDone(TOWN_HALL);
				c_hawk_done = GetUnitCountDone(HUMAN_DRAGON_HAWK);
				c_hero1_done = GetUnitCountDone(hero_id);
				c_hero2_done = GetUnitCountDone(hero_id2);
				c_hero3_done = GetUnitCountDone(hero_id3);
				c_house = GetUnitCount(HOUSE);
				c_house_done = GetUnitCountDone(HOUSE);
				c_keep_done = TownCountDone(KEEP);
				c_knight_done = GetUnitCountDone(KNIGHT);
				c_mill_done = GetUnitCountDone(LUMBER_MILL);
				c_mines = GetMinesOwned();
				c_mortar_done = GetUnitCountDone(MORTAR);
				c_peasant_done = GetUnitCountDone(PEASANT);
				c_priest_done = GetUnitCountDone(PRIEST);
				c_rifleman_done = GetUnitCountDone(RIFLEMAN);
				c_sanctum_done = GetUnitCountDone(SANCTUM);
				c_smith_done = GetUnitCountDone(BLACKSMITH);
				c_sorceress_done = GetUnitCountDone(SORCERESS);
				c_tank_done = GetUnitCountDone(TANK);
				c_watch = TownCount(WATCH_TOWER);
				c_watch_done = TownCountDone(WATCH_TOWER);
				c_workshop_done = GetUnitCountDone(WORKSHOP);
				c_zep = GetUnitCount(ZEPPELIN);
				b_hero1_done = GetUnitCountDone(hero_id) >= 1;
				b_hero2_done = GetUnitCountDone(hero_id2) >= 1;
				b_hero3_done = GetUnitCountDone(hero_id3) >= 1;
				b_knights_ok = c_castle_done>=1 && c_mill_done>=1 && c_smith_done>=1;
				if(  basic_opening && (b_hero2_done || (MeleeDifficulty() == MELEE_NEWBIE && c_castle_done >= 1))  )
				{
					basic_opening = false;
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  set_vars
		//--------------------------------------------------------------------------------------------------
			public void set_vars(  )
			{
				// Original JassCode
				while( true )
				{
					init_vars();
					Sleep(1);
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  do_upgrades
		//--------------------------------------------------------------------------------------------------
			public void do_upgrades(  )
			{
				// Original JassCode
				if(  c_keep_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_WOOD );
					if(  c_castle_done >= 1  )
					{
						SetBuildUpgr( 2, UPG_WOOD );
					}
					if(  b_knights_ok  )
					{
						SetBuildUpgr( 1, UPG_BREEDING );
					}
					if(  c_sanctum_done >= 1  )
					{
						if(  c_priest_done >= 1  )
						{
							SetBuildUpgr( 1, UPG_PRAYING );
						}
						if(  c_sorceress_done >= 1  )
						{
							SetBuildUpgr( 1, UPG_SORCERY );
						}
					}
					if(  c_castle_done >= 1  )
					{
						SetBuildUpgr( 2, UPG_WOOD );
						if(  c_sanctum_done >= 1  )
						{
							if(  c_priest_done >= 1  )
							{
								SetBuildUpgr( 2, UPG_PRAYING );
							}
							if(  c_sorceress_done >= 1  )
							{
								SetBuildUpgr( 2, UPG_SORCERY );
							}
						}
					}
				}
				SetBuildUpgr( 1, UPG_DEFEND );
				if(  c_smith_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_ARMOR );
					SetBuildUpgr( 1, UPG_MELEE );
					SetBuildUpgr( 1, UPG_RANGED );
					SetBuildUpgr( 1, UPG_LEATHER );
					if(  c_keep_done >= 1  )
					{
						SetBuildUpgr( 2, UPG_ARMOR );
						SetBuildUpgr( 2, UPG_MELEE );
						SetBuildUpgr( 2, UPG_RANGED );
						SetBuildUpgr( 2, UPG_LEATHER );
						if(  c_castle_done >= 1  )
						{
							SetBuildUpgr( 3, UPG_ARMOR );
							SetBuildUpgr( 3, UPG_MELEE );
							SetBuildUpgr( 3, UPG_RANGED );
							SetBuildUpgr( 3, UPG_LEATHER );
						}
					}
				}
				if(  c_rifleman_done >= 1 && c_castle_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_GUN_RANGE );
				}
				if(  c_workshop_done >= 1 && c_mortar_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_FRAGS );
				}
				if(  c_mill_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_MASONRY );
					if(  c_keep_done >= 1  )
					{
						SetBuildUpgr( 2, UPG_MASONRY );
					}
				}
				if(  c_workshop_done >= 1 && c_gyro_done >= 1  )
				{
					if(  c_castle_done >= 1  )
					{
						SetBuildUpgr( 1, UPG_FLAK );
					}
					SetBuildUpgr( 1, UPG_BOMBS );
				}
				if(  c_aviary_done >= 1 && c_gryphon_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_HAMMERS );
				}
				if(  c_sanctum_done >= 1 && c_breaker_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_CONT_MAGIC );
				}
				if(  c_aviary_done >= 1 && c_hawk_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_CLOUD );
				}
				if(  c_workshop_done >= 1 && c_tank_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_TANK );
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  build_sequence
		//--------------------------------------------------------------------------------------------------
			public void build_sequence(  )
			{
				// Original JassCode
				int peasants;
				InitBuildArray();
				if(  basic_opening  )
				{
					MeleeTownHall( 0, TOWN_HALL );
					MeleeTownHall( 1, TOWN_HALL );
					SetBuildUnit( 6, PEASANT );
					SetBuildUnit( 1, HUMAN_ALTAR );
					SetBuildUnit( 7, PEASANT );
					SetBuildUnit( 1, HOUSE );
					SetBuildUnit( 1, BARRACKS );
					SetBuildUnit( 9, PEASANT );
					SetBuildUnit( 2, HOUSE );
					SetBuildUnit( 1, hero_id );
					SetBuildUnit( 11, PEASANT );
					SetBuildUnit( 1, FOOTMAN );
					SetBuildUnit( 3, HOUSE );
					SetBuildUnit( 12, PEASANT );
					SetBuildUnit( 2, FOOTMAN );
					SetBuildUnit( 13, PEASANT );
					SetBuildUnit( 3, FOOTMAN );
					SetBuildUnit( 14, PEASANT );
					SetBuildUnit( 4, HOUSE );
					SetBuildUnit( 15, PEASANT );
					SetBuildUnit( 4, FOOTMAN );
					SetBuildUnit( 16, PEASANT );
					SetBuildUnit( 5, FOOTMAN );
					SetBuildUnit( 1, BLACKSMITH );
					SetBuildUnit( 6, FOOTMAN );
					SetBuildUnit( 5, HOUSE );
					SetBuildUnit( 8, FOOTMAN );
					SetBuildUnit( 6, HOUSE );
					SetBuildUnit( 2, RIFLEMAN );
					SetBuildUnit( 7, HOUSE );
					SetBuildUnit( 3, RIFLEMAN );
					SetBuildUnit( 1, ARCANE_VAULT );
					BasicExpansion( c_mines < 2, TOWN_HALL );
					SetBuildUnit( 4, RIFLEMAN );
					SetBuildUnit( 1, LUMBER_MILL );
					if(  MeleeDifficulty() != MELEE_NEWBIE  )
					{
						GuardSecondary( 1, 2, WATCH_TOWER );
						if(  c_mill_done >= 1  )
						{
							GuardSecondary( 1, 1, GUARD_TOWER );
						}
						if(  c_watch_done >= 1  )
						{
							GuardSecondary( 1, 1, ARCANE_TOWER );
						}
					}
					SetBuildUnit( 1, KEEP );
					SetBuildUpgr( 1, UPG_DEFEND );
					SetBuildUpgr( 1, UPG_ARMOR );
					SetBuildUnit( 7, HOUSE );
					SetBuildUpgr( 1, UPG_MELEE );
					if(  c_keep_done < 1  )
					{
						return;
					}
					SetBuildUnit( 1, WORKSHOP );
					if(  MeleeDifficulty() != MELEE_NEWBIE  )
					{
						SetBuildUnit( 1, hero_id2 );
					}
					SetBuildUnit( 1, CASTLE );
					GuardSecondary( 0, 2, WATCH_TOWER );
					if(  c_watch_done >= 3  )
					{
						GuardSecondary( 0, 1, GUARD_TOWER );
						if(  c_watch_done >= 4  )
						{
							GuardSecondary( 0, 1, ARCANE_TOWER );
						}
					}
					SetBuildUpgr( 1, UPG_RANGED );
					SetBuildUnit( 1, SANCTUM );
					SetBuildUnit( 2, MORTAR );
					SetBuildUpgr( 1, UPG_WOOD );
					SetBuildUpgr( 2, UPG_ARMOR );
					SetBuildUpgr( 2, UPG_WOOD );
					return;
				}
				// need a peasant or nothing will get built
				//
				if(  c_hall_done >= 1  )
				{
					peasants = 6 - GetWood() / 200;
					if(  peasants < 3  )
					{
						peasants = 3;
					}
					if(  c_mines < 2  )
					{
						peasants = peasants + 5;
					}
					else
					{
						peasants = peasants + 10;
					}
					if(  peasants > 15  )
					{
						peasants = 15;
					}
					SetBuildNext( peasants, PEASANT );
				}
				// need a hall or we can't resource and make more peasants
				//
				if(  c_hall < 1 && c_peasant_done >= 1  )
				{
					MeleeTownHall( 0, TOWN_HALL );
					MeleeTownHall( 1, TOWN_HALL );
					MeleeTownHall( 2, TOWN_HALL );
				}
				if(  c_gold > 500 && GetWood() < 100  )
				{
					SetBuildNext( 20, PEASANT );
				}
				// if we have low gold in our mines then we need to expand
				//
				if(  c_gold_owned < 2000  )
				{
					BasicExpansion( c_mines < 2, TOWN_HALL );
					if(  MeleeDifficulty() != MELEE_NEWBIE  )
					{
						GuardSecondary( 1, 2, WATCH_TOWER );
						if(  c_watch >= 2  )
						{
							GuardSecondary( 1, 1, GUARD_TOWER );
							GuardSecondary( 1, 1, ARCANE_TOWER );
						}
					}
				}
				// get enough burrows to handle current food demand
				//
				if(  c_food_used + 5 >= c_food_made  )
				{
					SetBuildUnit( c_house_done + 1, HOUSE );
				}
				// always rebuild heroes for defense
				//
				if(  c_altar_done >= 1  )
				{
					if(  b_hero1_done && MeleeDifficulty() != MELEE_NEWBIE  )
					{
						if(  b_hero2_done  )
						{
							if(  b_hero3_done || c_castle_done >= 1  )
							{
								SetBuildUnit( 1, hero_id3 );
							}
						}
						else
						{
							SetBuildUnit( 1, hero_id2 );
						}
					}
					else
					{
						SetBuildUnit( 1, hero_id );
					}
				}
				else
				{
					SetBuildUnit( 1, HUMAN_ALTAR );
				}
				// minimum melee defense
				//
				SetBuildUnit( 1, BARRACKS );
				if(  b_knights_ok  )
				{
					SetBuildUnit( 2, KNIGHT );
				}
				else
				{
					SetBuildUnit( 4, FOOTMAN );
				}
				// minimum ranged/air defense
				//
				if(  c_aviary_done >= 1  )
				{
					SetBuildUnit( 3, GRYPHON );
				}
				else
				{
					SetBuildUnit( 1, BLACKSMITH );
					if(  c_smith_done >= 1 || c_gold < 1000  )
					{
						SetBuildUnit( 4, RIFLEMEN );
					}
				}
				// siege attackers
				//
				SetBuildUnit( 1, KEEP );
				SetBuildUnit( 1, WORKSHOP );
				SetBuildUnit( 2, MORTAR );
				SetBuildUnit( c_watch_done - c_arcane, GUARD_TOWER );
				// if we have a lot of gold then advance the tech tree
				//
				if(  c_gold > 1000  )
				{
					SetBuildUnit( 1, ARCANE_VAULT );
					SetBuildUnit( 1, BLACKSMITH );
					SetBuildUnit( 1, LUMBER_MILL );
					SetBuildUnit( 1, SANCTUM );
					SetBuildUnit( 1, CASTLE );
					SetBuildUnit( 1, AVIARY );
					do_upgrades();
					if(  c_gold > 2000  )
					{
						BuildFactory( BARRACKS );
						BuildFactory( SANCTUM );
						BuildFactory( AVIARY );
					}
					SetBuildUpgr( 1, UPG_SENTINEL );
				}
				else if(  c_food_used >= UPKEEP_TIER1  )
				{
					do_upgrades();
				}
				BasicExpansion( c_mines < 2, TOWN_HALL );
				if(  c_food_used >= UPKEEP_TIER2-10 && c_gold < 2000  )
				{
					return;
				}
				// full up with more troops in general
				//
				if(  b_knights_ok  )
				{
					SetBuildNext( 4, KNIGHT );
				}
				if(  c_sanctum_done >= 1  )
				{
					SetBuildNext( 2, PRIEST );
					SetBuildNext( 1, SORCERESS );
					SetBuildNext( 1, SPELL_BREAKER );
					if(  c_aviary_done >= 1  )
					{
						SetBuildNext( 4, GRYPHON );
						SetBuildNext( 2, HUMAN_DRAGON_HAWK );
					}
					if(  c_workshop_done >= 1  )
					{
						SetBuildNext( 2, COPTER );
					}
					SetBuildNext( 2, SORCERESS );
					SetBuildNext( 1, SPELL_BREAKER );
				}
				if(  c_gold_owned < 10000  )
				{
					BasicExpansion( c_mines < 3, TOWN_HALL );
				}
				if(  c_food_used >= 60 && c_zep < 3  )
				{
					GetZeppelin();
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  peon_assignment
		//--------------------------------------------------------------------------------------------------
			public void peon_assignment(  )
			{
				// Original JassCode
				int T;
				while( true )
				{
					ClearHarvestAI();
					T = TownWithMine();
					HarvestGold(T,4);
					HarvestWood(0,1);
					HarvestGold(T,1);
					HarvestWood(0,1);
					if(  c_hall_done > 1 && c_mines > 1  )
					{
						HarvestGold(T+1,5);
					}
					HarvestWood(0,15);
					build_sequence();
					Sleep(GetRandomInt(1,3));
				}
			}

		//--------------------------------------------------------------------------------------------------
		//    main
		//--------------------------------------------------------------------------------------------------
			public void main(  )
			{
				// Original JassCode
				PickMeleeHero(RACE_HUMAN);
				set_skills();
				StandardAI(SkillArrays,  peon_assignment,  attack_sequence);
				StartThread( set_vars);
				PlayGame();
			}

		} // class human_ai 

	}

