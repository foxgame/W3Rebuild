// Generated by .

	public partial class GameDefine 
	{

		public class h05xD_ai
		{
		//==================================================================================================
		//  $Id: h05xD.ai,v 1.26 2003/05/04 21:19:47 rpardo Exp $
		//==================================================================================================
			public int SET_SLOT = 1;
			public int TURN_ON = 2;
			public int TURN_OFF = 3;
			public int CAPT_X = 4;
			public int CAPT_Y = 5;
			public int FEL_GUARD = UnitId( "nfgu" );
			public int BLOODFIEND = UnitId( "nfgb" );
			public int FEL_BEAST = UnitId( "npfl" );
			public int ELDER_VOID = UnitId( "nvde" );
			public int GREATER_VOID = UnitId( "nvdg" );
			public int NETHER_DRAKE = UnitId( "nndk" );
			public int NETHER_HATCH = UnitId( "nnht" );
			public int OVERLORD = UnitId( "nfov" );
			//lvl 3 abolish
			public int SORCEROR = UnitId( "ners" );
			//lvl 6 curse, firebolt, parasite
			public int DIABOLIST = UnitId( "nerd" );
			public int FEL_RAVAGER = UnitId( "npfm" );
			public int ERE_WARLOCK = UnitId( "nerw" );
			public int NETHER_DRAGON = UnitId( "nndr" );
			public int TORMENTOR = UnitId( "ndqv" );
			public int TEMPTRESS = UnitId( "ndqt" );
			public int MAIDEN = UnitId( "ndqp" );
			public int QUEEN = UnitId( "ndqs" );
			public int ILLIDAN_SLOT = 11;
			public int  slot = 0;
			public bool  gate_open = false;
			public bool  suicide_off = true;
			public int [] suicide_list;
			public int  next_suicide = 0;
			public int  next_declare = 0;
		//--------------------------------------------------------------------------------------------------
		//  suicide_next
		//--------------------------------------------------------------------------------------------------
			public void suicide_next(  )
			{
				// Original JassCode
				int unitid;
				if(  suicide_off  )
				{
					if(  gate_open  )
					{
						suicide_off = false;
					}
					else
					{
						return;
					}
				}
				unitid = suicide_list[next_suicide];
				if(  unitid == -1  )
				{
					unitid = suicide_list[0];
					next_suicide = 0;
				}
				SuicideUnitEx(3,unitid,ILLIDAN_SLOT);
				next_suicide = next_suicide + 1;
			}

		//--------------------------------------------------------------------------------------------------
		//  declare_unit
		//--------------------------------------------------------------------------------------------------
			public void declare_unit( int unitid )
			{
				// Original JassCode
				suicide_list[next_declare] = unitid;
				next_declare = next_declare + 1;
				suicide_list[next_declare] = -1;
			}

		//--------------------------------------------------------------------------------------------------
		//  command_loop
		//--------------------------------------------------------------------------------------------------
			public void command_loop(  )
			{
				// Original JassCode
				int x = -1;
				int y = -1;
				int cmd;
				int data;
				while( true )
				{
					while( true )
					{
						suicide_next();
						Sleep(0.1);
						if(  CommandsWaiting() > 0 )
							break;
					}
					cmd = GetLastCommand();
					data = GetLastData();
					PopLastCommand();
					//------------------------------------------------------------------------------------------
					if(  cmd == SET_SLOT  )
					{
						//------------------------------------------------------------------------------------------
						slot = data;
						//------------------------------------------------------------------------------------------
					}
					else if(  cmd == TURN_ON  )
					{
						//------------------------------------------------------------------------------------------
						gate_open = true;
						//------------------------------------------------------------------------------------------
					}
					else if(  cmd == TURN_OFF  )
					{
						//------------------------------------------------------------------------------------------
						gate_open = false;
						//------------------------------------------------------------------------------------------
					}
					else if(  cmd == CAPT_X  )
					{
						//------------------------------------------------------------------------------------------
						x = data;
						//------------------------------------------------------------------------------------------
					}
					else if(  cmd == CAPT_Y  )
					{
						//------------------------------------------------------------------------------------------
						y = data;
					}
					//------------------------------------------------------------------------------------------
					if(  (cmd == CAPT_X || cmd == CAPT_Y) && (x != -1 && y != -1)  )
					{
						SetCaptainHome(BOTH_CAPTAINS,x,y);
					}
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  send_one
		//--------------------------------------------------------------------------------------------------
			public void send_one( int unitid , int seconds )
			{
				// Original JassCode
				SetProduce(1,unitid,-1);
				Sleep(seconds);
			}

		//--------------------------------------------------------------------------------------------------
		//  send
		//--------------------------------------------------------------------------------------------------
			public void send( int unitid , int seconds )
			{
				// Original JassCode
				if(  gate_open  )
				{
					send_one(unitid,seconds);
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  send_group
		//--------------------------------------------------------------------------------------------------
			public void send_group( int qty , int unitid )
			{
				// Original JassCode
				if(  gate_open  )
				{
					while( true )
					{
						if(  qty <= 0 )
							break;
						qty = qty - 1;
						send_one(unitid,2);
					}
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  send_sleep
		//--------------------------------------------------------------------------------------------------
			public void send_sleep( int seconds )
			{
				// Original JassCode
				if(  gate_open  )
				{
					Sleep(seconds);
				}
			}

		//**************************************************************************************************
		//***  NORMAL GATES ***
		//**************************************************************************************************
		//--------------------------------------------------------------------------------------------------
		//  gate1_normal
		//--------------------------------------------------------------------------------------------------
			public void gate1_normal(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(15);
				// 2:45
				send_group( 4, FEL_BEAST );
				// 2:37
				send_group( 3, FELLHOUND );
				// 2:31
				send_sleep(15);
				// 2:16
				send_group( 6, FEL_GUARD );
				// 2:04
				send_group( 1, DIABOLIST );
				// 2:02
				send_group( 4, BLOODFIEND );
				// 1:54
				send_sleep(20);
				// 1:34
				send_group( 6, FEL_BEAST );
				// 1:22
				send_group( 1, GREATER_VOID );
				// 1:20
				send_group( 4, FELLHOUND );
				// 1:12
				send_sleep(20);
				// 0:52
				send_group( 5, FEL_GUARD );
				// 0:42
				send_group( 3, BLOODFIEND );
				// 0:36
				send_group( 1, OVERLORD );
				// 0:34
				send_group( 3, BLOODFIEND );
				// 0:28
				send_group( 1, DOOMGUARD );
				// 0:26
				send_group( 4, FEL_BEAST );
				// 0:18
				send_group( 1, ELDER_VOID );
				// 0:16
				send_group( 7, FEL_BEAST );
			}

		//--------------------------------------------------------------------------------------------------
		//  gate2_normal
		//--------------------------------------------------------------------------------------------------
			public void gate2_normal(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(5);
				// 2:55
				send_group( 4, NETHER_HATCH );
				// 2:47
				send_sleep(20);
				// 2:27
				send_group( 6, FEL_BEAST );
				// 2:15
				send_group( 3, FELLHOUND );
				// 2:09
				send_sleep(20);
				// 1:49
				send_group( 3, NETHER_HATCH );
				// 1:43
				send_group( 1, GREATER_VOID );
				// 1:41
				send_group( 3, NETHER_HATCH );
				// 1:35
				send_group( 1, NETHER_DRAKE );
				// 1:33
				send_sleep(20);
				// 1:13
				send_group( 5, FEL_BEAST );
				// 1:03
				send_group( 3, FELLHOUND );
				// 0:57
				send_group( 1, FEL_RAVAGER );
				// 0:55
				send_group( 1, DIABOLIST );
				// 0:53
				send_sleep(20);
				// 0:33
				send_group( 4, NETHER_HATCH );
				// 0:25
				send_group( 2, GREATER_VOID );
				// 0:21
				send_group( 3, NETHER_DRAKE );
				// 0:15
				send_sleep(5);
				// 0:10
				send_group( 1, INFERNAL );
				// 0:08
				send_group( 1, ELDER_VOID );
				// 0:06
				send_group( 1, INFERNAL );
			}

		//--------------------------------------------------------------------------------------------------
		//  gate3_normal
		//--------------------------------------------------------------------------------------------------
			public void gate3_normal(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(5);
				// 2:55
				send_group( 6, TORMENTOR );
				// 2:43
				send_group( 1, TEMPTRESS );
				// 2:41
				send_sleep(20);
				// 2:21
				send_group( 5, BLOODFIEND );
				// 2:11
				send_group( 1, OVERLORD );
				// 2:09
				send_group( 1, DIABOLIST );
				// 2:07
				send_sleep(20);
				// 1:47
				send_group( 5, TORMENTOR );
				// 1:37
				send_group( 2, TEMPTRESS );
				// 1:33
				send_group( 1, MAIDEN );
				// 1:31
				send_group( 5, TORMENTOR );
				// 1:21
				send_group( 1, QUEEN );
				// 1:19
				send_sleep(20);
				// 0:59
				send_group( 4, BLOODFIEND );
				// 0:51
				send_group( 2, OVERLORD );
				// 0:47
				send_group( 1, DOOMGUARD );
				// 0:45
				send_group( 5, BLOODFIEND );
				// 0:35
				send_sleep(10);
				// 0:25
				send_group( 1, DOOMGUARD );
				// 0:23
				send_group( 1, ERE_WARLOCK );
				// 0:21
				send_group( 1, QUEEN );
				// 0:19
				send_group( 8, TORMENTOR );
			}

		//--------------------------------------------------------------------------------------------------
		//  gate4_normal
		//--------------------------------------------------------------------------------------------------
			public void gate4_normal(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(5);
				// 2:55
				send_group( 2, INFERNAL );
				// 2:51
				send_sleep(5);
				// 2:46
				send_group( 1, DOOMGUARD );
				// 2:44
				send_sleep(15);
				// 2:29
				send_group( 2, FEL_BEAST );
				// 2:25
				send_group( 4, FELLHOUND );
				// 2:17
				send_group( 1, FEL_RAVAGER );
				// 2:15
				send_group( 1, QUEEN );
				// 2:13
				send_group( 1, MAIDEN );
				// 2:11
				send_sleep(20);
				// 1:51
				send_group( 5, NETHER_DRAKE );
				// 1:41
				send_group( 1, NETHER_DRAGON );
				// 1:39
				send_group( 1, DOOMGUARD );
				// 1:37
				send_group( 1, INFERNAL );
				// 1:35
				send_sleep(20);
				// 1:15
				send_group( 1, INFERNAL );
				// 1:13
				send_sleep(10);
				// 1:03
				send_group( 1, QUEEN );
				// 1:01
				send_sleep(10);
				// 0:51
				send_group( 1, DOOMGUARD );
				// 0:49
				send_sleep(15);
				// 0:34
				send_group( 5, FEL_BEAST );
				// 0:24
				send_group( 2, FELLHOUND );
				// 0:20
				send_group( 2, FEL_RAVAGER );
				// 0:16
				send_group( 1, TEMPTRESS );
				// 0:14
				send_group( 1, MAIDEN );
				// 0:12
				send_group( 5, FEL_BEAST );
			}

		//**************************************************************************************************
		//***  HARD GATES ***
		//**************************************************************************************************
		//--------------------------------------------------------------------------------------------------
		//  gate1_hard
		//--------------------------------------------------------------------------------------------------
			public void gate1_hard(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(10);
				// 2:50
				send_group( 8, FEL_BEAST );
				// 2:34
				send_group( 2, FELLHOUND );
				// 2:30
				send_group( 2, GREATER_VOID );
				// 2:26
				send_sleep(10);
				// 2:16
				send_group( 6, FEL_GUARD );
				// 2:04
				send_group( 6, BLOODFIEND );
				// 1:52
				send_group( 2, DOOMGUARD );
				// 1:48
				send_sleep(10);
				// 1:38
				send_group( 8, FEL_BEAST );
				// 1:22
				send_group( 4, FEL_RAVAGER );
				// 1:14
				send_group( 2, GREATER_VOID );
				// 1:10
				send_group( 2, ELDER_VOID );
				// 1:06
				send_sleep(10);
				// 0:56
				send_group( 2, DOOMGUARD );
				// 0:52
				send_group( 5, BLOODFIEND );
				// 0:42
				send_group( 5, FEL_GUARD );
				// 0:32
				send_group( 2, OVERLORD );
				// 0:28
				send_group( 2, DOOMGUARD );
				// 0:24
				send_group( 5, BLOODFIEND );
				// 0:14
				send_group( 1, OVERLORD );
				// 0:12
				send_group( 2, DOOMGUARD );
				// 0:08
				send_group( 3, FEL_GUARD );
			}

		//--------------------------------------------------------------------------------------------------
		//  gate2_hard
		//--------------------------------------------------------------------------------------------------
			public void gate2_hard(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(5);
				// 2:55
				send_group( 4, NETHER_HATCH );
				// 2:47
				send_group( 2, NETHER_DRAKE );
				// 2:43
				send_sleep(5);
				// 2:38
				send_group( 4, FELLHOUND );
				// 2:30
				send_group( 6, FEL_BEAST );
				// 2:18
				send_group( 3, FEL_RAVAGER );
				// 2:12
				send_group( 2, DIABOLIST );
				// 2:08
				send_sleep(5);
				// 2:03
				send_group( 6, NETHER_DRAKE );
				// 1:51
				send_group( 3, NETHER_HATCH );
				// 1:45
				send_group( 3, GREATER_VOID );
				// 1:39
				send_group( 3, NETHER_DRAKE );
				// 1:33
				send_group( 3, ELDER_VOID );
				// 1:27
				send_sleep(5);
				// 1:22
				send_group( 5, FELLHOUND );
				// 1:12
				send_group( 5, FEL_BEAST );
				// 1:02
				send_group( 2, DIABOLIST );
				// 0:58
				send_group( 2, FEL_RAVAGER );
				// 0:54
				send_group( 3, ERE_WARLOCK );
				// 0:48
				send_sleep(5);
				// 0:43
				send_group( 4, ELDER_VOID );
				// 0:35
				send_group( 3, INFERNAL );
				// 0:29
				send_group( 3, NETHER_DRAKE );
				// 0:23
				send_sleep(5);
				// 0:18
				send_group( 1, DIABOLIST );
				// 0:16
				send_group( 2, FEL_RAVAGER );
				// 0:12
				send_group( 1, ERE_WARLOCK );
				// 0:10
				send_group( 5, FELLHOUND );
			}

		//--------------------------------------------------------------------------------------------------
		//  gate3_hard
		//--------------------------------------------------------------------------------------------------
			public void gate3_hard(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(5);
				// 2:55
				send_group( 6, TORMENTOR );
				// 2:43
				send_group( 4, TEMPTRESS );
				// 2:35
				send_group( 3, MAIDEN );
				// 2:29
				send_group( 2, QUEEN );
				// 2:25
				send_sleep(5);
				// 2:20
				send_group( 3, BLOODFIEND );
				// 2:14
				send_group( 2, OVERLORD );
				// 2:10
				send_group( 1, DIABOLIST );
				// 2:08
				send_group( 3, BLOODFIEND );
				// 2:02
				send_group( 3, OVERLORD );
				// 1:56
				send_group( 2, ERE_WARLOCK );
				// 1:52
				send_group( 3, BLOODFIEND );
				// 1:46
				send_group( 3, OVERLORD );
				// 1:40
				send_group( 2, DOOMGUARD );
				// 1:36
				send_sleep(5);
				// 1:31
				send_group( 2, QUEEN );
				// 1:27
				send_group( 6, TORMENTOR );
				// 1:15
				send_group( 4, TEMPTRESS );
				// 1:07
				send_group( 3, MAIDEN );
				// 1:01
				send_group( 3, QUEEN );
				// 0:55
				send_sleep(5);
				// 0:50
				send_group( 4, BLOODFIEND );
				// 0:42
				send_group( 3, DOOMGUARD );
				// 0:36
				send_group( 2, ERE_WARLOCK );
				// 0:32
				send_group( 3, QUEEN );
				// 0:26
				send_group( 8, TORMENTOR );
				// 0:10
				send_group( 3, TEMPTRESS );
			}

		//--------------------------------------------------------------------------------------------------
		//  gate4_hard
		//--------------------------------------------------------------------------------------------------
			public void gate4_hard(  )
			{
				// Original JassCode
				// 3:00
				send_sleep(2);
				// 2:58
				send_group( 4, INFERNAL );
				// 2:50
				send_sleep(5);
				// 2:45
				send_group( 3, DOOMGUARD );
				// 2:39
				send_sleep(5);
				// 2:34
				send_group( 2, FEL_BEAST );
				// 2:30
				send_group( 5, FELLHOUND );
				// 2:20
				send_group( 4, FEL_RAVAGER );
				// 2:12
				send_group( 3, QUEEN );
				// 2:06
				send_group( 2, MAIDEN );
				// 2:02
				send_sleep(5);
				// 1:57
				send_group( 5, NETHER_DRAKE );
				// 1:47
				send_group( 3, NETHER_DRAGON );
				// 1:41
				send_group( 2, DOOMGUARD );
				// 1:37
				send_group( 2, INFERNAL );
				// 1:33
				send_group( 2, NETHER_DRAKE );
				// 1:29
				send_sleep(8);
				// 1:21
				send_group( 2, FEL_BEAST );
				// 1:17
				send_group( 4, FELLHOUND );
				// 1:09
				send_group( 4, FEL_RAVAGER );
				// 1:01
				send_group( 2, TEMPTRESS );
				// 0:57
				send_group( 3, QUEEN );
				// 0:51
				send_group( 3, FEL_RAVAGER );
				// 0:45
				send_sleep(5);
				// 0:40
				send_group( 4, INFERNAL );
				// 0:32
				send_group( 3, DOOMGUARD );
				// 0:26
				send_group( 5, INFERNAL );
				// 0:16
				send_group( 3, QUEEN );
				// 0:10
				send_group( 5, INFERNAL );
			}

		//**************************************************************************************************
		//--------------------------------------------------------------------------------------------------
		//  main
		//--------------------------------------------------------------------------------------------------
			public void main(  )
			{
				// Original JassCode
				CampaignAI(BURROW,null);
				SetReplacements(0,0,0);
				declare_unit( FEL_GUARD );
				declare_unit( BLOODFIEND );
				declare_unit( FEL_BEAST );
				declare_unit( ELDER_VOID );
				declare_unit( GREATER_VOID );
				declare_unit( NETHER_DRAKE );
				declare_unit( NETHER_HATCH );
				declare_unit( OVERLORD );
				declare_unit( SORCEROR );
				declare_unit( DIABOLIST );
				declare_unit( FEL_RAVAGER );
				declare_unit( ERE_WARLOCK );
				declare_unit( NETHER_DRAGON );
				declare_unit( TORMENTOR );
				declare_unit( TEMPTRESS );
				declare_unit( MAIDEN );
				declare_unit( QUEEN );
				declare_unit( INFERNAL );
				declare_unit( DOOMGUARD );
				declare_unit( FELLHOUND );
				StartThread( command_loop);
				while( true )
				{
					while( true )
					{
						if(  gate_open )
							break;
						Sleep(0.5);
					}
					if(  difficulty == HARD  )
					{
						if(  slot == 1  )
						{
							gate1_hard();
						}
						else if(  slot == 2  )
						{
							gate2_hard();
						}
						else if(  slot == 3  )
						{
							gate3_hard();
						}
						else if(  slot == 4  )
						{
							gate4_hard();
						}
					}
					else
					{
						if(  slot == 1  )
						{
							gate1_normal();
						}
						else if(  slot == 2  )
						{
							gate2_normal();
						}
						else if(  slot == 3  )
						{
							gate3_normal();
						}
						else if(  slot == 4  )
						{
							gate4_normal();
						}
					}
					while( true )
					{
						if(  ! gate_open )
							break;
						Sleep(0.5);
					}
				}
			}

		} // class h05xD_ai 

	}

