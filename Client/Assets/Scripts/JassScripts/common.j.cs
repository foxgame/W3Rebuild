// Generated by .

using System;
using UnityEngine;


public partial class GameDefine
{
    //============================================================================
    // Native types. All native functions take extended handle types when
    // possible to help prevent passing bad values to native functions
    //
    // a reference to an event registration
    // a single player reference
    // an interactive game object with life
    // a single unit reference

    public static BJRace ConvertRace( int i )
    {
        // native code

        BJRace bj = new BJRace();
        bj.race = i;
        return bj;
    }

    public static BJAllianceType ConvertAllianceType( int i )
    {
        // native code

        BJAllianceType bj = new BJAllianceType();
        bj.type = i;
        return bj;
    }

    public static BJRacePreference ConvertRacePref( int i )
    {
        // native code

        BJRacePreference bj = new BJRacePreference();
        bj.racePreference = i;
        return bj;
    }

    public static BJIgameState ConvertIGameState( int i )
    {
        // native code

        BJIgameState bj = new BJIgameState();
        bj.state = i;
        return bj;
    }

    public static BJFGameState ConvertFGameState( int i )
    {
        // native code

        BJFGameState bj = new BJFGameState();
        bj.state = i;
        return bj;
    }

    public static BJPlayerState ConvertPlayerState( int i )
    {
        // native code

        BJPlayerState bj = new BJPlayerState();
        bj.state = i;
        return bj;
    }

    public static BJPlayerGameResult ConvertPlayerGameResult( int i )
    {
        // native code

        BJPlayerGameResult bj = new BJPlayerGameResult();
        bj.result = i;
        return bj;
    }

    public static BJUnitState ConvertUnitState( int i )
    {
        // native code

        BJUnitState bj = new BJUnitState();
        bj.state = i;
        return bj;
    }

    public static BJAIdifficulty ConvertAIDifficulty( int i )
    {
        // native code

        BJAIdifficulty bj = new BJAIdifficulty();
        bj.difficulty = i;
        return bj;
    }

    public static BJGameEvent ConvertGameEvent( int i )
    {
        // native code

        BJGameEvent bj = new BJGameEvent();
        bj.id = i;
        return bj;
    }

    public static BJPlayerEvent ConvertPlayerEvent( int i )
    {
        // native code

        BJPlayerEvent bj = new BJPlayerEvent();
        bj.id = i;
        return bj;
    }

    public static BJPlayerUnitEvent ConvertPlayerUnitEvent( int i )
    {
        // native code

        BJPlayerUnitEvent bj = new BJPlayerUnitEvent();
        bj.id = i;
        return bj;
    }

    public static BJWidgetEvent ConvertWidgetEvent( int i )
    {
        // native code

        BJWidgetEvent bj = new BJWidgetEvent();
        bj.id = i;
        return bj;
    }

    public static BJDialogEvent ConvertDialogEvent( int i )
    {
        // native code

        BJDialogEvent bj = new BJDialogEvent();
        bj.id = i;
        return bj;
    }

    public static BJUnitEvent ConvertUnitEvent( int i )
    {
        // native code

        BJUnitEvent bj = new BJUnitEvent();
        bj.id = i;
        return bj;
    }

    public static BJLimitOP ConvertLimitOp( int i )
    {
        // native code

        BJLimitOP bj = new BJLimitOP();
        bj.op = i;
        return bj;
    }

    public static BJUnitType ConvertUnitType( int i )
    {
        // native code

        BJUnitType bj = new BJUnitType();
        bj.type = i;
        return bj;
    }

    public static BJGameSpeed ConvertGameSpeed( int i )
    {
        // native code

        BJGameSpeed bj = new BJGameSpeed();
        bj.speed = i;
        return bj;
    }

    public static BJPlacement ConvertPlacement( int i )
    {
        // native code

        BJPlacement bj = new BJPlacement();
        bj.placement = i;
        return bj;
    }

    public static BJStartLocPrio ConvertStartLocPrio( int i )
    {
        // native code

        BJStartLocPrio bj = new BJStartLocPrio();
        bj.prio = i;
        return bj;
    }

    public static BJGameDifficulty ConvertGameDifficulty( int i )
    {
        // native code

        BJGameDifficulty bj = new BJGameDifficulty();
        bj.difficulty = i;
        return bj;
    }

    public static BJGameType ConvertGameType( int i )
    {
        // native code

        BJGameType bj = new BJGameType();
        bj.type = i;
        return bj;
    }

    public static BJMapFlag ConvertMapFlag( int i )
    {
        // native code

        BJMapFlag bj = new BJMapFlag();
        bj.flag = i;
        return bj;
    }

    public static BJMapVisibility ConvertMapVisibility( int i )
    {
        // native code

        BJMapVisibility bj = new BJMapVisibility();
        bj.visibility = i;
        return bj;
    }

    public static BJMapSetting ConvertMapSetting( int i )
    {
        // native code

        BJMapSetting bj = new BJMapSetting();
        bj.setting = i;
        return bj;
    }

    public static BJMapDensity ConvertMapDensity( int i )
    {
        // native code

        BJMapDensity bj = new BJMapDensity();
        bj.density = i;
        return bj;
    }

    public static BJMapControl ConvertMapControl( int i )
    {
        // native code

        BJMapControl bj = new BJMapControl();
        bj.control = i;
        return bj;
    }

    public static BJPlayerColor ConvertPlayerColor( int i )
    {
        // native code

        BJPlayerColor bj = new BJPlayerColor();
        bj.color = i;
        return bj;
    }

    public static BJPlayerSlotState ConvertPlayerSlotState( int i )
    {
        // native code

        BJPlayerSlotState bj = new BJPlayerSlotState();
        bj.state = i;
        return bj;
    }

    public static BJVolumeGroup ConvertVolumeGroup( int i )
    {
        // native code

        BJVolumeGroup bj = new BJVolumeGroup();
        bj.id = i;
        return bj;
    }

    public static BJCameraField ConvertCameraField( int i )
    {
        // native code

        BJCameraField bj = new BJCameraField();
        bj.field = i;
        return bj;
    }

    public static BJBlendMode ConvertBlendMode( int i )
    {
        // native code

        BJBlendMode bj = new BJBlendMode();
        bj.mode = i;
        return bj;
    }

    public static BJRarityControl ConvertRarityControl( int i )
    {
        // native code

        BJRarityControl bj = new BJRarityControl();
        bj.control = i;
        return bj;
    }

    public static BJTexMapFlags ConvertTexMapFlags( int i )
    {
        // native code

        BJTexMapFlags bj = new BJTexMapFlags();
        bj.flags = i;
        return bj;
    }

    public static BJfogState ConvertFogState( int i )
    {
        // native code

        BJfogState bj = new BJfogState();
        bj.state = i;
        return bj;
    }

    public static BJEffectType ConvertEffectType( int i )
    {
        // native code

        BJEffectType bj = new BJEffectType();
        bj.type = i;
        return bj;
    }

    public static BJVersion ConvertVersion( int i )
    {
        // native code

        BJVersion bj = new BJVersion();
        bj.version = i;
        return bj;
    }

    public static BJItemType ConvertItemType( int i )
    {
        // native code

        BJItemType bj = new BJItemType();
        bj.type = i;
        return bj;
    }

    public static int OrderId( string orderIdString )
    {
        // native code

        W3OrderType order = (W3OrderType)Enum.Parse( typeof( W3OrderType ) , orderIdString );

        return (int)order;
    }

    public static string OrderId2String( int orderId )
    {
        // native code

        W3OrderType order = (W3OrderType)Enum.ToObject( typeof( W3OrderType ) , orderId );

        return order.ToString();
    }

    public static int UnitId( string unitIdString )
    {
        // native code
        return ( unitIdString[ 0 ] << 24 ) + ( unitIdString[ 1 ] << 16 ) + ( unitIdString[ 2 ] << 8 ) + unitIdString[ 3 ];
    }

    public static string UnitId2String( int unitId )
    {
        // native code

        byte[] b = new byte[ 4 ];
        b[ 3 ] = (byte)( unitId & 0xFF );
        b[ 2 ] = (byte)( ( unitId & 0xFF00 ) >> 8 );
        b[ 1 ] = (byte)( ( unitId & 0xFF0000 ) >> 16 );
        b[ 0 ] = (byte)( ( unitId >> 24 ) & 0xFF );

        return System.Text.Encoding.ASCII.GetString( b );
    }

    // Not currently working correctly...
    public static int AbilityId( string abilityIdString )
    {
        // native code
        return UnitId( abilityIdString );
    }

    public static string AbilityId2String( int abilityId )
    {
        // native code
        return UnitId2String( abilityId );
    }

    //===================================================
    // Game Constants    
    //===================================================
    // pfff
    public static bool FALSE = false;
    public static bool TRUE = true;
    public static int JASS_MAX_ARRAY_SIZE = 8192;
    public static int PLAYER_NEUTRAL_PASSIVE = 15;
    public static int PLAYER_NEUTRAL_AGGRESSIVE = 12;
    public static BJPlayerColor PLAYER_COLOR_RED = ConvertPlayerColor( 0 );
    public static BJPlayerColor PLAYER_COLOR_BLUE = ConvertPlayerColor( 1 );
    public static BJPlayerColor PLAYER_COLOR_CYAN = ConvertPlayerColor( 2 );
    public static BJPlayerColor PLAYER_COLOR_PURPLE = ConvertPlayerColor( 3 );
    public static BJPlayerColor PLAYER_COLOR_YELLOW = ConvertPlayerColor( 4 );
    public static BJPlayerColor PLAYER_COLOR_ORANGE = ConvertPlayerColor( 5 );
    public static BJPlayerColor PLAYER_COLOR_GREEN = ConvertPlayerColor( 6 );
    public static BJPlayerColor PLAYER_COLOR_PINK = ConvertPlayerColor( 7 );
    public static BJPlayerColor PLAYER_COLOR_LIGHT_GRAY = ConvertPlayerColor( 8 );
    public static BJPlayerColor PLAYER_COLOR_LIGHT_BLUE = ConvertPlayerColor( 9 );
    public static BJPlayerColor PLAYER_COLOR_AQUA = ConvertPlayerColor( 10 );
    public static BJPlayerColor PLAYER_COLOR_BROWN = ConvertPlayerColor( 11 );
    public static BJRace RACE_HUMAN = ConvertRace( 1 );
    public static BJRace RACE_ORC = ConvertRace( 2 );
    public static BJRace RACE_UNDEAD = ConvertRace( 3 );
    public static BJRace RACE_NIGHTELF = ConvertRace( 4 );
    public static BJRace RACE_DEMON = ConvertRace( 5 );
    public static BJRace RACE_OTHER = ConvertRace( 7 );
    public static BJPlayerGameResult PLAYER_GAME_RESULT_VICTORY = ConvertPlayerGameResult( 0 );
    public static BJPlayerGameResult PLAYER_GAME_RESULT_DEFEAT = ConvertPlayerGameResult( 1 );
    public static BJPlayerGameResult PLAYER_GAME_RESULT_TIE = ConvertPlayerGameResult( 2 );
    public static BJPlayerGameResult PLAYER_GAME_RESULT_NEUTRAL = ConvertPlayerGameResult( 3 );
    public static BJAllianceType ALLIANCE_PASSIVE = ConvertAllianceType( 0 );
    public static BJAllianceType ALLIANCE_HELP_REQUEST = ConvertAllianceType( 1 );
    public static BJAllianceType ALLIANCE_HELP_RESPONSE = ConvertAllianceType( 2 );
    public static BJAllianceType ALLIANCE_SHARED_XP = ConvertAllianceType( 3 );
    public static BJAllianceType ALLIANCE_SHARED_SPELLS = ConvertAllianceType( 4 );
    public static BJAllianceType ALLIANCE_SHARED_VISION = ConvertAllianceType( 5 );
    public static BJAllianceType ALLIANCE_SHARED_CONTROL = ConvertAllianceType( 6 );
    public static BJAllianceType ALLIANCE_SHARED_ADVANCED_CONTROL = ConvertAllianceType( 7 );
    public static BJAllianceType ALLIANCE_RESCUABLE = ConvertAllianceType( 8 );
    public static BJAllianceType ALLIANCE_SHARED_VISION_FORCED = ConvertAllianceType( 9 );
    public static BJVersion VERSION_REIGN_OF_CHAOS = ConvertVersion( 0 );
    public static BJVersion VERSION_FROZEN_THRONE = ConvertVersion( 1 );
    //===================================================
    // Map Setup Constants    
    //===================================================
    public static BJRacePreference RACE_PREF_HUMAN = ConvertRacePref( 1 );
    public static BJRacePreference RACE_PREF_ORC = ConvertRacePref( 2 );
    public static BJRacePreference RACE_PREF_NIGHTELF = ConvertRacePref( 4 );
    public static BJRacePreference RACE_PREF_UNDEAD = ConvertRacePref( 8 );
    public static BJRacePreference RACE_PREF_DEMON = ConvertRacePref( 16 );
    public static BJRacePreference RACE_PREF_RANDOM = ConvertRacePref( 32 );
    public static BJRacePreference RACE_PREF_USER_SELECTABLE = ConvertRacePref( 64 );
    public static BJMapControl MAP_CONTROL_USER = ConvertMapControl( 0 );
    public static BJMapControl MAP_CONTROL_COMPUTER = ConvertMapControl( 1 );
    public static BJMapControl MAP_CONTROL_RESCUABLE = ConvertMapControl( 2 );
    public static BJMapControl MAP_CONTROL_NEUTRAL = ConvertMapControl( 3 );
    public static BJMapControl MAP_CONTROL_CREEP = ConvertMapControl( 4 );
    public static BJMapControl MAP_CONTROL_NONE = ConvertMapControl( 5 );
    public static BJGameType GAME_TYPE_MELEE = ConvertGameType( 1 );
    public static BJGameType GAME_TYPE_FFA = ConvertGameType( 2 );
    public static BJGameType GAME_TYPE_USE_MAP_SETTINGS = ConvertGameType( 4 );
    public static BJGameType GAME_TYPE_BLIZ = ConvertGameType( 8 );
    public static BJGameType GAME_TYPE_ONE_ON_ONE = ConvertGameType( 16 );
    public static BJGameType GAME_TYPE_TWO_TEAM_PLAY = ConvertGameType( 32 );
    public static BJGameType GAME_TYPE_THREE_TEAM_PLAY = ConvertGameType( 64 );
    public static BJGameType GAME_TYPE_FOUR_TEAM_PLAY = ConvertGameType( 128 );
    public static BJMapFlag MAP_FOG_HIDE_TERRAIN = ConvertMapFlag( 1 );
    public static BJMapFlag MAP_FOG_MAP_EXPLORED = ConvertMapFlag( 2 );
    public static BJMapFlag MAP_FOG_ALWAYS_VISIBLE = ConvertMapFlag( 4 );
    public static BJMapFlag MAP_USE_HANDICAPS = ConvertMapFlag( 8 );
    public static BJMapFlag MAP_OBSERVERS = ConvertMapFlag( 16 );
    public static BJMapFlag MAP_OBSERVERS_ON_DEATH = ConvertMapFlag( 32 );
    public static BJMapFlag MAP_FIXED_COLORS = ConvertMapFlag( 128 );
    public static BJMapFlag MAP_LOCK_RESOURCE_TRADING = ConvertMapFlag( 256 );
    public static BJMapFlag MAP_RESOURCE_TRADING_ALLIES_ONLY = ConvertMapFlag( 512 );
    public static BJMapFlag MAP_LOCK_ALLIANCE_CHANGES = ConvertMapFlag( 1024 );
    public static BJMapFlag MAP_ALLIANCE_CHANGES_HIDDEN = ConvertMapFlag( 2048 );
    public static BJMapFlag MAP_CHEATS = ConvertMapFlag( 4096 );
    public static BJMapFlag MAP_CHEATS_HIDDEN = ConvertMapFlag( 8192 );
    public static BJMapFlag MAP_LOCK_SPEED = ConvertMapFlag( 8192 * 2 );
    public static BJMapFlag MAP_LOCK_RANDOM_SEED = ConvertMapFlag( 8192 * 4 );
    public static BJMapFlag MAP_SHARED_ADVANCED_CONTROL = ConvertMapFlag( 8192 * 8 );
    public static BJMapFlag MAP_RANDOM_HERO = ConvertMapFlag( 8192 * 16 );
    public static BJMapFlag MAP_RANDOM_RACES = ConvertMapFlag( 8192 * 32 );
    public static BJMapFlag MAP_RELOADED = ConvertMapFlag( 8192 * 64 );
    // random among all slots
    public static BJPlacement MAP_PLACEMENT_RANDOM = ConvertPlacement( 0 );
    // player 0 in start loc 0...
    public static BJPlacement MAP_PLACEMENT_FIXED = ConvertPlacement( 1 );
    // whatever was specified by the script
    public static BJPlacement MAP_PLACEMENT_USE_MAP_SETTINGS = ConvertPlacement( 2 );
    // random with allies next to each other    
    public static BJPlacement MAP_PLACEMENT_TEAMS_TOGETHER = ConvertPlacement( 3 );
    public static BJStartLocPrio MAP_LOC_PRIO_LOW = ConvertStartLocPrio( 0 );
    public static BJStartLocPrio MAP_LOC_PRIO_HIGH = ConvertStartLocPrio( 1 );
    public static BJStartLocPrio MAP_LOC_PRIO_NOT = ConvertStartLocPrio( 2 );
    public static BJMapDensity MAP_DENSITY_NONE = ConvertMapDensity( 0 );
    public static BJMapDensity MAP_DENSITY_LIGHT = ConvertMapDensity( 1 );
    public static BJMapDensity MAP_DENSITY_MEDIUM = ConvertMapDensity( 2 );
    public static BJMapDensity MAP_DENSITY_HEAVY = ConvertMapDensity( 3 );
    public static BJGameDifficulty MAP_DIFFICULTY_EASY = ConvertGameDifficulty( 0 );
    public static BJGameDifficulty MAP_DIFFICULTY_NORMAL = ConvertGameDifficulty( 1 );
    public static BJGameDifficulty MAP_DIFFICULTY_HARD = ConvertGameDifficulty( 2 );
    public static BJGameDifficulty MAP_DIFFICULTY_INSANE = ConvertGameDifficulty( 3 );
    public static BJGameSpeed MAP_SPEED_SLOWEST = ConvertGameSpeed( 0 );
    public static BJGameSpeed MAP_SPEED_SLOW = ConvertGameSpeed( 1 );
    public static BJGameSpeed MAP_SPEED_NORMAL = ConvertGameSpeed( 2 );
    public static BJGameSpeed MAP_SPEED_FAST = ConvertGameSpeed( 3 );
    public static BJGameSpeed MAP_SPEED_FASTEST = ConvertGameSpeed( 4 );
    public static BJPlayerSlotState PLAYER_SLOT_STATE_EMPTY = ConvertPlayerSlotState( 0 );
    public static BJPlayerSlotState PLAYER_SLOT_STATE_PLAYING = ConvertPlayerSlotState( 1 );
    public static BJPlayerSlotState PLAYER_SLOT_STATE_LEFT = ConvertPlayerSlotState( 2 );
    //===================================================
    // Sound Constants
    //===================================================
    public static BJVolumeGroup SOUND_VOLUMEGROUP_UNITMOVEMENT = ConvertVolumeGroup( 0 );
    public static BJVolumeGroup SOUND_VOLUMEGROUP_UNITSOUNDS = ConvertVolumeGroup( 1 );
    public static BJVolumeGroup SOUND_VOLUMEGROUP_COMBAT = ConvertVolumeGroup( 2 );
    public static BJVolumeGroup SOUND_VOLUMEGROUP_SPELLS = ConvertVolumeGroup( 3 );
    public static BJVolumeGroup SOUND_VOLUMEGROUP_UI = ConvertVolumeGroup( 4 );
    public static BJVolumeGroup SOUND_VOLUMEGROUP_MUSIC = ConvertVolumeGroup( 5 );
    public static BJVolumeGroup SOUND_VOLUMEGROUP_AMBIENTSOUNDS = ConvertVolumeGroup( 6 );
    public static BJVolumeGroup SOUND_VOLUMEGROUP_FIRE = ConvertVolumeGroup( 7 );
    //===================================================
    // Game, Player, and Unit States
    //
    // For use with TriggerRegister<X>StateEvent
    //
    //===================================================
    public static BJIgameState GAME_STATE_DIVINE_INTERVENTION = ConvertIGameState( 0 );
    public static BJIgameState GAME_STATE_DISCONNECTED = ConvertIGameState( 1 );
    public static BJFGameState GAME_STATE_TIME_OF_DAY = ConvertFGameState( 2 );
    public static BJPlayerState PLAYER_STATE_GAME_RESULT = ConvertPlayerState( 0 );
    // current resource levels
    //
    public static BJPlayerState PLAYER_STATE_RESOURCE_GOLD = ConvertPlayerState( 1 );
    public static BJPlayerState PLAYER_STATE_RESOURCE_LUMBER = ConvertPlayerState( 2 );
    public static BJPlayerState PLAYER_STATE_RESOURCE_HERO_TOKENS = ConvertPlayerState( 3 );
    public static BJPlayerState PLAYER_STATE_RESOURCE_FOOD_CAP = ConvertPlayerState( 4 );
    public static BJPlayerState PLAYER_STATE_RESOURCE_FOOD_USED = ConvertPlayerState( 5 );
    public static BJPlayerState PLAYER_STATE_FOOD_CAP_CEILING = ConvertPlayerState( 6 );
    public static BJPlayerState PLAYER_STATE_GIVES_BOUNTY = ConvertPlayerState( 7 );
    public static BJPlayerState PLAYER_STATE_ALLIED_VICTORY = ConvertPlayerState( 8 );
    public static BJPlayerState PLAYER_STATE_PLACED = ConvertPlayerState( 9 );
    public static BJPlayerState PLAYER_STATE_OBSERVER_ON_DEATH = ConvertPlayerState( 10 );
    public static BJPlayerState PLAYER_STATE_OBSERVER = ConvertPlayerState( 11 );
    public static BJPlayerState PLAYER_STATE_UNFOLLOWABLE = ConvertPlayerState( 12 );
    // taxation rate for each resource
    //
    public static BJPlayerState PLAYER_STATE_GOLD_UPKEEP_RATE = ConvertPlayerState( 13 );
    public static BJPlayerState PLAYER_STATE_LUMBER_UPKEEP_RATE = ConvertPlayerState( 14 );
    // cumulative resources collected by the player during the mission
    //
    public static BJPlayerState PLAYER_STATE_GOLD_GATHERED = ConvertPlayerState( 15 );
    public static BJPlayerState PLAYER_STATE_LUMBER_GATHERED = ConvertPlayerState( 16 );
    public static BJPlayerState PLAYER_STATE_NO_CREEP_SLEEP = ConvertPlayerState( 25 );
    public static BJUnitState UNIT_STATE_LIFE = ConvertUnitState( 0 );
    public static BJUnitState UNIT_STATE_MAX_LIFE = ConvertUnitState( 1 );
    public static BJUnitState UNIT_STATE_MANA = ConvertUnitState( 2 );
    public static BJUnitState UNIT_STATE_MAX_MANA = ConvertUnitState( 3 );
    public static BJAIdifficulty AI_DIFFICULTY_NEWBIE = ConvertAIDifficulty( 0 );
    public static BJAIdifficulty AI_DIFFICULTY_NORMAL = ConvertAIDifficulty( 1 );
    public static BJAIdifficulty AI_DIFFICULTY_INSANE = ConvertAIDifficulty( 2 );
    //===================================================
    // Game, Player and Unit Events
    //
    //  When an event causes a trigger to fire these
    //  values allow the action code to determine which
    //  event was dispatched and therefore which set of
    //  native functions should be used to get information
    //  about the event.
    //
    // Do NOT change the order or value of these constants
    // without insuring that the JASS_GAME_EVENTS_WAR3 enum
    // is changed to match.
    //
    //===================================================
    //===================================================
    // For use with TriggerRegisterGameEvent    
    //===================================================    
    public static BJGameEvent EVENT_GAME_VICTORY = ConvertGameEvent( 0 );
    public static BJGameEvent EVENT_GAME_END_LEVEL = ConvertGameEvent( 1 );
    public static BJGameEvent EVENT_GAME_VARIABLE_LIMIT = ConvertGameEvent( 2 );
    public static BJGameEvent EVENT_GAME_STATE_LIMIT = ConvertGameEvent( 3 );
    public static BJGameEvent EVENT_GAME_TIMER_EXPIRED = ConvertGameEvent( 4 );
    public static BJGameEvent EVENT_GAME_ENTER_REGION = ConvertGameEvent( 5 );
    public static BJGameEvent EVENT_GAME_LEAVE_REGION = ConvertGameEvent( 6 );
    public static BJGameEvent EVENT_GAME_TRACKABLE_HIT = ConvertGameEvent( 7 );
    public static BJGameEvent EVENT_GAME_TRACKABLE_TRACK = ConvertGameEvent( 8 );
    public static BJGameEvent EVENT_GAME_SHOW_SKILL = ConvertGameEvent( 9 );
    public static BJGameEvent EVENT_GAME_BUILD_SUBMENU = ConvertGameEvent( 10 );
    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================
    public static BJPlayerEvent EVENT_PLAYER_STATE_LIMIT = ConvertPlayerEvent( 11 );
    public static BJPlayerEvent EVENT_PLAYER_ALLIANCE_CHANGED = ConvertPlayerEvent( 12 );
    public static BJPlayerEvent EVENT_PLAYER_DEFEAT = ConvertPlayerEvent( 13 );
    public static BJPlayerEvent EVENT_PLAYER_VICTORY = ConvertPlayerEvent( 14 );
    public static BJPlayerEvent EVENT_PLAYER_LEAVE = ConvertPlayerEvent( 15 );
    public static BJPlayerEvent EVENT_PLAYER_CHAT = ConvertPlayerEvent( 16 );
    public static BJPlayerEvent EVENT_PLAYER_END_CINEMATIC = ConvertPlayerEvent( 17 );
    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_ATTACKED = ConvertPlayerUnitEvent( 18 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_RESCUED = ConvertPlayerUnitEvent( 19 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_DEATH = ConvertPlayerUnitEvent( 20 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_DECAY = ConvertPlayerUnitEvent( 21 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_DETECTED = ConvertPlayerUnitEvent( 22 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_HIDDEN = ConvertPlayerUnitEvent( 23 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SELECTED = ConvertPlayerUnitEvent( 24 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_DESELECTED = ConvertPlayerUnitEvent( 25 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_CONSTRUCT_START = ConvertPlayerUnitEvent( 26 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL = ConvertPlayerUnitEvent( 27 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_CONSTRUCT_FINISH = ConvertPlayerUnitEvent( 28 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_UPGRADE_START = ConvertPlayerUnitEvent( 29 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_UPGRADE_CANCEL = ConvertPlayerUnitEvent( 30 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_UPGRADE_FINISH = ConvertPlayerUnitEvent( 31 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_TRAIN_START = ConvertPlayerUnitEvent( 32 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_TRAIN_CANCEL = ConvertPlayerUnitEvent( 33 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_TRAIN_FINISH = ConvertPlayerUnitEvent( 34 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_RESEARCH_START = ConvertPlayerUnitEvent( 35 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_RESEARCH_CANCEL = ConvertPlayerUnitEvent( 36 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_RESEARCH_FINISH = ConvertPlayerUnitEvent( 37 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_ISSUED_ORDER = ConvertPlayerUnitEvent( 38 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER = ConvertPlayerUnitEvent( 39 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER = ConvertPlayerUnitEvent( 40 );
    // for compat
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER = ConvertPlayerUnitEvent( 40 );
    public static BJPlayerUnitEvent EVENT_PLAYER_HERO_LEVEL = ConvertPlayerUnitEvent( 41 );
    public static BJPlayerUnitEvent EVENT_PLAYER_HERO_SKILL = ConvertPlayerUnitEvent( 42 );
    public static BJPlayerUnitEvent EVENT_PLAYER_HERO_REVIVABLE = ConvertPlayerUnitEvent( 43 );
    public static BJPlayerUnitEvent EVENT_PLAYER_HERO_REVIVE_START = ConvertPlayerUnitEvent( 44 );
    public static BJPlayerUnitEvent EVENT_PLAYER_HERO_REVIVE_CANCEL = ConvertPlayerUnitEvent( 45 );
    public static BJPlayerUnitEvent EVENT_PLAYER_HERO_REVIVE_FINISH = ConvertPlayerUnitEvent( 46 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SUMMON = ConvertPlayerUnitEvent( 47 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_DROP_ITEM = ConvertPlayerUnitEvent( 48 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_PICKUP_ITEM = ConvertPlayerUnitEvent( 49 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_USE_ITEM = ConvertPlayerUnitEvent( 50 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_LOADED = ConvertPlayerUnitEvent( 51 );
    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================
    public static BJUnitEvent EVENT_UNIT_DAMAGED = ConvertUnitEvent( 52 );
    public static BJUnitEvent EVENT_UNIT_DEATH = ConvertUnitEvent( 53 );
    public static BJUnitEvent EVENT_UNIT_DECAY = ConvertUnitEvent( 54 );
    public static BJUnitEvent EVENT_UNIT_DETECTED = ConvertUnitEvent( 55 );
    public static BJUnitEvent EVENT_UNIT_HIDDEN = ConvertUnitEvent( 56 );
    public static BJUnitEvent EVENT_UNIT_SELECTED = ConvertUnitEvent( 57 );
    public static BJUnitEvent EVENT_UNIT_DESELECTED = ConvertUnitEvent( 58 );
    public static BJUnitEvent EVENT_UNIT_STATE_LIMIT = ConvertUnitEvent( 59 );
    // Events which may have a filter for the "other unit"              
    //                                                                  
    public static BJUnitEvent EVENT_UNIT_ACQUIRED_TARGET = ConvertUnitEvent( 60 );
    public static BJUnitEvent EVENT_UNIT_TARGET_IN_RANGE = ConvertUnitEvent( 61 );
    public static BJUnitEvent EVENT_UNIT_ATTACKED = ConvertUnitEvent( 62 );
    public static BJUnitEvent EVENT_UNIT_RESCUED = ConvertUnitEvent( 63 );
    public static BJUnitEvent EVENT_UNIT_CONSTRUCT_CANCEL = ConvertUnitEvent( 64 );
    public static BJUnitEvent EVENT_UNIT_CONSTRUCT_FINISH = ConvertUnitEvent( 65 );
    public static BJUnitEvent EVENT_UNIT_UPGRADE_START = ConvertUnitEvent( 66 );
    public static BJUnitEvent EVENT_UNIT_UPGRADE_CANCEL = ConvertUnitEvent( 67 );
    public static BJUnitEvent EVENT_UNIT_UPGRADE_FINISH = ConvertUnitEvent( 68 );
    // Events which involve the specified unit performing               
    // training of other units                                          
    //                                                                  
    public static BJUnitEvent EVENT_UNIT_TRAIN_START = ConvertUnitEvent( 69 );
    public static BJUnitEvent EVENT_UNIT_TRAIN_CANCEL = ConvertUnitEvent( 70 );
    public static BJUnitEvent EVENT_UNIT_TRAIN_FINISH = ConvertUnitEvent( 71 );
    public static BJUnitEvent EVENT_UNIT_RESEARCH_START = ConvertUnitEvent( 72 );
    public static BJUnitEvent EVENT_UNIT_RESEARCH_CANCEL = ConvertUnitEvent( 73 );
    public static BJUnitEvent EVENT_UNIT_RESEARCH_FINISH = ConvertUnitEvent( 74 );
    public static BJUnitEvent EVENT_UNIT_ISSUED_ORDER = ConvertUnitEvent( 75 );
    public static BJUnitEvent EVENT_UNIT_ISSUED_POINT_ORDER = ConvertUnitEvent( 76 );
    public static BJUnitEvent EVENT_UNIT_ISSUED_TARGET_ORDER = ConvertUnitEvent( 77 );
    public static BJUnitEvent EVENT_UNIT_HERO_LEVEL = ConvertUnitEvent( 78 );
    public static BJUnitEvent EVENT_UNIT_HERO_SKILL = ConvertUnitEvent( 79 );
    public static BJUnitEvent EVENT_UNIT_HERO_REVIVABLE = ConvertUnitEvent( 80 );
    public static BJUnitEvent EVENT_UNIT_HERO_REVIVE_START = ConvertUnitEvent( 81 );
    public static BJUnitEvent EVENT_UNIT_HERO_REVIVE_CANCEL = ConvertUnitEvent( 82 );
    public static BJUnitEvent EVENT_UNIT_HERO_REVIVE_FINISH = ConvertUnitEvent( 83 );
    public static BJUnitEvent EVENT_UNIT_SUMMON = ConvertUnitEvent( 84 );
    public static BJUnitEvent EVENT_UNIT_DROP_ITEM = ConvertUnitEvent( 85 );
    public static BJUnitEvent EVENT_UNIT_PICKUP_ITEM = ConvertUnitEvent( 86 );
    public static BJUnitEvent EVENT_UNIT_USE_ITEM = ConvertUnitEvent( 87 );
    public static BJUnitEvent EVENT_UNIT_LOADED = ConvertUnitEvent( 88 );
    public static BJWidgetEvent EVENT_WIDGET_DEATH = ConvertWidgetEvent( 89 );
    public static BJDialogEvent EVENT_DIALOG_BUTTON_CLICK = ConvertDialogEvent( 90 );
    public static BJDialogEvent EVENT_DIALOG_CLICK = ConvertDialogEvent( 91 );
    //===================================================
    // Frozen Throne Expansion Events
    // Need to be added here to preserve compat
    //===================================================
    //===================================================
    // For use with TriggerRegisterGameEvent    
    //===================================================    
    public static BJGameEvent EVENT_GAME_LOADED = ConvertGameEvent( 256 );
    public static BJGameEvent EVENT_GAME_TOURNAMENT_FINISH_SOON = ConvertGameEvent( 257 );
    public static BJGameEvent EVENT_GAME_TOURNAMENT_FINISH_NOW = ConvertGameEvent( 258 );
    public static BJGameEvent EVENT_GAME_SAVE = ConvertGameEvent( 259 );
    //===================================================
    // For use with TriggerRegisterPlayerEvent
    //===================================================
    public static BJPlayerEvent EVENT_PLAYER_ARROW_LEFT_DOWN = ConvertPlayerEvent( 261 );
    public static BJPlayerEvent EVENT_PLAYER_ARROW_LEFT_UP = ConvertPlayerEvent( 262 );
    public static BJPlayerEvent EVENT_PLAYER_ARROW_RIGHT_DOWN = ConvertPlayerEvent( 263 );
    public static BJPlayerEvent EVENT_PLAYER_ARROW_RIGHT_UP = ConvertPlayerEvent( 264 );
    public static BJPlayerEvent EVENT_PLAYER_ARROW_DOWN_DOWN = ConvertPlayerEvent( 265 );
    public static BJPlayerEvent EVENT_PLAYER_ARROW_DOWN_UP = ConvertPlayerEvent( 266 );
    public static BJPlayerEvent EVENT_PLAYER_ARROW_UP_DOWN = ConvertPlayerEvent( 267 );
    public static BJPlayerEvent EVENT_PLAYER_ARROW_UP_UP = ConvertPlayerEvent( 268 );
    //===================================================
    // For use with TriggerRegisterPlayerUnitEvent
    //===================================================
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SELL = ConvertPlayerUnitEvent( 269 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_CHANGE_OWNER = ConvertPlayerUnitEvent( 270 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SELL_ITEM = ConvertPlayerUnitEvent( 271 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SPELL_CHANNEL = ConvertPlayerUnitEvent( 272 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SPELL_CAST = ConvertPlayerUnitEvent( 273 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SPELL_EFFECT = ConvertPlayerUnitEvent( 274 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SPELL_FINISH = ConvertPlayerUnitEvent( 275 );
    public static BJPlayerUnitEvent EVENT_PLAYER_UNIT_SPELL_ENDCAST = ConvertPlayerUnitEvent( 276 );
    //===================================================
    // For use with TriggerRegisterUnitEvent
    //===================================================
    public static BJUnitEvent EVENT_UNIT_SELL = ConvertUnitEvent( 286 );
    public static BJUnitEvent EVENT_UNIT_CHANGE_OWNER = ConvertUnitEvent( 287 );
    public static BJUnitEvent EVENT_UNIT_SELL_ITEM = ConvertUnitEvent( 288 );
    public static BJUnitEvent EVENT_UNIT_SPELL_CHANNEL = ConvertUnitEvent( 289 );
    public static BJUnitEvent EVENT_UNIT_SPELL_CAST = ConvertUnitEvent( 290 );
    public static BJUnitEvent EVENT_UNIT_SPELL_EFFECT = ConvertUnitEvent( 291 );
    public static BJUnitEvent EVENT_UNIT_SPELL_FINISH = ConvertUnitEvent( 292 );
    public static BJUnitEvent EVENT_UNIT_SPELL_ENDCAST = ConvertUnitEvent( 293 );
    //===================================================
    // Limit Event API constants    
    // variable, player state, game state, and unit state events
    // ( do NOT change the order of these... )
    //===================================================
    public static BJLimitOP LESS_THAN = ConvertLimitOp( 0 );
    public static BJLimitOP LESS_THAN_OR_EQUAL = ConvertLimitOp( 1 );
    public static BJLimitOP EQUAL = ConvertLimitOp( 2 );
    public static BJLimitOP GREATER_THAN_OR_EQUAL = ConvertLimitOp( 3 );
    public static BJLimitOP GREATER_THAN = ConvertLimitOp( 4 );
    public static BJLimitOP NOT_EQUAL = ConvertLimitOp( 5 );
    //===================================================
    // Unit Type Constants for use with IsUnitType()
    //===================================================
    public static BJUnitType UNIT_TYPE_HERO = ConvertUnitType( 0 );
    public static BJUnitType UNIT_TYPE_DEAD = ConvertUnitType( 1 );
    public static BJUnitType UNIT_TYPE_STRUCTURE = ConvertUnitType( 2 );
    public static BJUnitType UNIT_TYPE_FLYING = ConvertUnitType( 3 );
    public static BJUnitType UNIT_TYPE_GROUND = ConvertUnitType( 4 );
    public static BJUnitType UNIT_TYPE_ATTACKS_FLYING = ConvertUnitType( 5 );
    public static BJUnitType UNIT_TYPE_ATTACKS_GROUND = ConvertUnitType( 6 );
    public static BJUnitType UNIT_TYPE_MELEE_ATTACKER = ConvertUnitType( 7 );
    public static BJUnitType UNIT_TYPE_RANGED_ATTACKER = ConvertUnitType( 8 );
    public static BJUnitType UNIT_TYPE_GIANT = ConvertUnitType( 9 );
    public static BJUnitType UNIT_TYPE_SUMMONED = ConvertUnitType( 10 );
    public static BJUnitType UNIT_TYPE_STUNNED = ConvertUnitType( 11 );
    public static BJUnitType UNIT_TYPE_PLAGUED = ConvertUnitType( 12 );
    public static BJUnitType UNIT_TYPE_SNARED = ConvertUnitType( 13 );
    public static BJUnitType UNIT_TYPE_UNDEAD = ConvertUnitType( 14 );
    public static BJUnitType UNIT_TYPE_MECHANICAL = ConvertUnitType( 15 );
    public static BJUnitType UNIT_TYPE_PEON = ConvertUnitType( 16 );
    public static BJUnitType UNIT_TYPE_SAPPER = ConvertUnitType( 17 );
    public static BJUnitType UNIT_TYPE_TOWNHALL = ConvertUnitType( 18 );
    public static BJUnitType UNIT_TYPE_ANCIENT = ConvertUnitType( 19 );
    //===================================================
    // Unit Type Constants for use with ChooseRandomItemEx()
    //===================================================
    public static BJItemType ITEM_TYPE_PERMANENT = ConvertItemType( 0 );
    public static BJItemType ITEM_TYPE_CHARGED = ConvertItemType( 1 );
    public static BJItemType ITEM_TYPE_POWERUP = ConvertItemType( 2 );
    public static BJItemType ITEM_TYPE_ARTIFACT = ConvertItemType( 3 );
    public static BJItemType ITEM_TYPE_PURCHASABLE = ConvertItemType( 4 );
    public static BJItemType ITEM_TYPE_CAMPAIGN = ConvertItemType( 5 );
    public static BJItemType ITEM_TYPE_MISCELLANEOUS = ConvertItemType( 6 );
    public static BJItemType ITEM_TYPE_UNKNOWN = ConvertItemType( 7 );
    public static BJItemType ITEM_TYPE_ANY = ConvertItemType( 8 );
    // Deprecated, should use ITEM_TYPE_POWERUP
    public static BJItemType ITEM_TYPE_TOME = ConvertItemType( 2 );
    //===================================================
    // Animatable Camera Fields
    //===================================================
    public static BJCameraField CAMERA_FIELD_TARGET_DISTANCE = ConvertCameraField( 0 );
    public static BJCameraField CAMERA_FIELD_FARZ = ConvertCameraField( 1 );
    public static BJCameraField CAMERA_FIELD_ANGLE_OF_ATTACK = ConvertCameraField( 2 );
    public static BJCameraField CAMERA_FIELD_FIELD_OF_VIEW = ConvertCameraField( 3 );
    public static BJCameraField CAMERA_FIELD_ROLL = ConvertCameraField( 4 );
    public static BJCameraField CAMERA_FIELD_ROTATION = ConvertCameraField( 5 );
    public static BJCameraField CAMERA_FIELD_ZOFFSET = ConvertCameraField( 6 );
    public static BJBlendMode BLEND_MODE_NONE = ConvertBlendMode( 0 );
    public static BJBlendMode BLEND_MODE_DONT_CARE = ConvertBlendMode( 0 );
    public static BJBlendMode BLEND_MODE_KEYALPHA = ConvertBlendMode( 1 );
    public static BJBlendMode BLEND_MODE_BLEND = ConvertBlendMode( 2 );
    public static BJBlendMode BLEND_MODE_ADDITIVE = ConvertBlendMode( 3 );
    public static BJBlendMode BLEND_MODE_MODULATE = ConvertBlendMode( 4 );
    public static BJBlendMode BLEND_MODE_MODULATE_2X = ConvertBlendMode( 5 );
    public static BJRarityControl RARITY_FREQUENT = ConvertRarityControl( 0 );
    public static BJRarityControl RARITY_RARE = ConvertRarityControl( 1 );
    public static BJTexMapFlags TEXMAP_FLAG_NONE = ConvertTexMapFlags( 0 );
    public static BJTexMapFlags TEXMAP_FLAG_WRAP_U = ConvertTexMapFlags( 1 );
    public static BJTexMapFlags TEXMAP_FLAG_WRAP_V = ConvertTexMapFlags( 2 );
    public static BJTexMapFlags TEXMAP_FLAG_WRAP_UV = ConvertTexMapFlags( 3 );
    public static BJfogState FOG_OF_WAR_MASKED = ConvertFogState( 1 );
    public static BJfogState FOG_OF_WAR_FOGGED = ConvertFogState( 2 );
    public static BJfogState FOG_OF_WAR_VISIBLE = ConvertFogState( 4 );
    //===================================================
    // Camera Margin constants for use with GetCameraMargin
    //===================================================
    public static int CAMERA_MARGIN_LEFT = 0;
    public static int CAMERA_MARGIN_RIGHT = 1;
    public static int CAMERA_MARGIN_TOP = 2;
    public static int CAMERA_MARGIN_BOTTOM = 3;
    //===================================================
    // Effect API constants
    //===================================================
    public static BJEffectType EFFECT_TYPE_EFFECT = ConvertEffectType( 0 );
    public static BJEffectType EFFECT_TYPE_TARGET = ConvertEffectType( 1 );
    public static BJEffectType EFFECT_TYPE_CASTER = ConvertEffectType( 2 );
    public static BJEffectType EFFECT_TYPE_SPECIAL = ConvertEffectType( 3 );
    //============================================================================
    // MathAPI
    public static double Deg2Rad( double degrees )
    {
        // native code
        return Mathf.Deg2Rad * degrees;
    }

    public static double Rad2Deg( double radians )
    {
        // native code
        return Mathf.Rad2Deg * radians;
    }

    public static double Sin( double radians )
    {
        // native code
        return Mathf.Sin( (float)radians );
    }

    public static double Cos( double radians )
    {
        // native code
        return Mathf.Sin( (float)radians );
    }

    public static double Tan( double radians )
    {
        // native code
        return Mathf.Tan( (float)radians );
    }

    // Expect values between -1 and 1...returns 0 for invalid input
    public static double Asin( double y )
    {
        // native code
        return Mathf.Asin( (float)y );
    }

    public static double Acos( double x )
    {
        // native code
        return Mathf.Acos( (float)x );
    }

    public static double Atan( double x )
    {
        // native code
        return Mathf.Atan( (float)x );
    }

    // Returns 0 if x and y are both 0
    public static double Atan2( double y , double x )
    {
        // native code
        return Mathf.Atan2( (float)y , (float)x );
    }

    // Returns 0 if x <= 0
    public static double SquareRoot( double x )
    {
        // native code
        return Mathf.Sqrt( (float)x );
    }

    // computes x to the y power
    // y == 0.0             => 1
    // x ==0.0 and y < 0    => 0
    //
    public static double Pow( double x , double power )
    {
        // native code

        if ( power == 0.0 )
        {
            return 1.0;
        }

        if ( x == 0.0 && power < 0 )
        {
            return 0;
        }

        return Mathf.Pow( (float)x , (float)power );
    }

    //============================================================================
    // String Utility API
    public static double I2R( int i )
    {
        // native code
        return (double)i;
    }

    public static int R2I( double r )
    {
        // native code
        return (int)r;
    }

    public static string I2S( int i )
    {
        // native code
        return i.ToString();
    }

    public static string R2S( double r )
    {
        // native code
        return r.ToString();
    }

    public static string R2SW( double r , int width , int precision )
    {
        // native code
        return r.ToString();
    }

    public static int S2I( string s )
    {
        // native code
        return int.Parse( s );
    }

    public static double S2R( string s )
    {
        // native code
        return double.Parse( s );
    }

    public static string SubString( string source , int start , int end )
    {
        // native code
        return source.Substring( start , end - start );
    }

    public static string GetLocalizedString( string source )
    {
        // native code
        return source;
    }

    public static int GetLocalizedHotkey( string source )
    {
        // native code
        return 0;
    }

    //============================================================================
    // Map Setup API
    //
    //  These are native functions for describing the map configuration
    //  these funcs should only be used in the "config" function of
    //  a map script. The functions should also be called in this order
    //  ( i.e. call SetPlayers before SetPlayerColor...
    //
    public static void SetMapName( string name )
    {
        // native code

        W3MapManager.instance.mapName = name;
    }

    public static void SetMapDescription( string description )
    {
        // native code

        W3MapManager.instance.mapDescription = description;
    }

    public static void SetTeams( int teamcount )
    {
        // native code

        W3MapManager.instance.teamCount = teamcount;
    }

    public static void SetPlayers( int playercount )
    {
        // native code

        W3MapManager.instance.playerCount = playercount;
    }

    public static void DefineStartLocation( int whichStartLoc , double x , double y )
    {
        // native code

        W3MapManager.instance.startLocation[ whichStartLoc ].x = (float)x;
        W3MapManager.instance.startLocation[ whichStartLoc ].y = (float)y;
    }

    public static void DefineStartLocationLoc( int whichStartLoc , BJLocation whichLocation )
    {
        // native code

        W3MapManager.instance.startLocation[ whichStartLoc ].x = whichLocation.x;
        W3MapManager.instance.startLocation[ whichStartLoc ].y = whichLocation.y;
    }

    public static void SetStartLocPrioCount( int whichStartLoc , int prioSlotCount )
    {
        // native code

        W3MapManager.instance.startLocationPriority[ whichStartLoc ] = new W3MapManager.W3MapStartLocPrio[ prioSlotCount ];
    }

    public static void SetStartLocPrio( int whichStartLoc , int prioSlotIndex , int otherStartLocIndex , BJStartLocPrio priority )
    {
        // native code

        W3MapManager.W3MapStartLocPrio pro = new W3MapManager.W3MapStartLocPrio();
        pro.index = otherStartLocIndex;
        pro.Priority = priority.prio;
        W3MapManager.instance.startLocationPriority[ whichStartLoc ][ prioSlotIndex ] = pro;
    }

    public static int GetStartLocPrioSlot( int whichStartLoc , int prioSlotIndex )
    {
        // native code
        return W3MapManager.instance.startLocationPriority[ whichStartLoc ][ prioSlotIndex ].index;
    }

    public static BJStartLocPrio GetStartLocPrio( int whichStartLoc , int prioSlotIndex )
    {
        // native code

        BJStartLocPrio bj = new BJStartLocPrio();
        bj.prio = W3MapManager.instance.startLocationPriority[ whichStartLoc ][ prioSlotIndex ].Priority;
        return bj;
    }

    public static void SetGameTypeSupported( BJGameType whichGameType , bool value )
    {
        // native code

        if ( ( W3MapManager.instance.gameTypeSupported & whichGameType.type ) > 0 )
            W3MapManager.instance.gameTypeSupported -= whichGameType.type;

        if ( value )
            W3MapManager.instance.gameTypeSupported += whichGameType.type;
    }

    public static void SetMapFlag( BJMapFlag whichMapFlag , bool value )
    {
        // native code

        if ( ( W3MapManager.instance.mapFlag & whichMapFlag.flag ) > 0 )
            W3MapManager.instance.mapFlag -= whichMapFlag.flag;

        if ( value )
            W3MapManager.instance.mapFlag += whichMapFlag.flag;
    }

    public static void SetGamePlacement( BJPlacement whichPlacementType )
    {
        // native code

        W3MapManager.instance.gamePlacement = whichPlacementType.placement;
    }

    public static void SetGameSpeed( BJGameSpeed whichspeed )
    {
        // native code

        W3MapManager.instance.gameSpeed = whichspeed.speed;
    }

    public static void SetGameDifficulty( BJGameDifficulty whichdifficulty )
    {
        // native code

        W3MapManager.instance.gameDifficulty = whichdifficulty.difficulty;
    }

    public static void SetResourceDensity( BJMapDensity whichdensity )
    {
        // native code

        W3MapManager.instance.resourceDensity = whichdensity.density;
    }

    public static void SetCreatureDensity( BJMapDensity whichdensity )
    {
        // native code

        W3MapManager.instance.creatureDensity = whichdensity.density;
    }

    public static int GetTeams()
    {
        // native code

        return W3MapManager.instance.teamCount;
    }

    public static int GetPlayers()
    {
        // native code

        return W3MapManager.instance.playerCount;
    }

    public static bool IsGameTypeSupported( BJGameType whichGameType )
    {
        // native code

        return ( W3MapManager.instance.gameTypeSupported & whichGameType.type ) > 0;
    }

    public static BJGameType GetGameTypeSelected()
    {
        // native code

        BJGameType bj = new BJGameType();
        bj.type = W3MapManager.instance.gameTypeSelected;
        return bj;
    }

    public static bool IsMapFlagSet( BJMapFlag whichMapFlag )
    {
        // native code

        return ( W3MapManager.instance.mapFlag & whichMapFlag.flag ) > 0;
    }

    public static BJPlacement GetGamePlacement()
    {
        // native code

        BJPlacement bj = new BJPlacement();
        bj.placement = W3MapManager.instance.gamePlacement;

        return bj;
    }

    public static BJGameSpeed GetGameSpeed()
    {
        // native code

        BJGameSpeed bj = new BJGameSpeed();
        bj.speed = W3MapManager.instance.gameSpeed;

        return bj;
    }

    public static BJGameDifficulty GetGameDifficulty()
    {
        // native code

        BJGameDifficulty bj = new BJGameDifficulty();
        bj.difficulty = W3MapManager.instance.gameDifficulty;

        return bj;
    }

    public static BJMapDensity GetResourceDensity()
    {
        // native code

        BJMapDensity bj = new BJMapDensity();
        bj.density = W3MapManager.instance.resourceDensity;

        return bj;
    }

    public static BJMapDensity GetCreatureDensity()
    {
        // native code

        BJMapDensity bj = new BJMapDensity();
        bj.density = W3MapManager.instance.creatureDensity;

        return bj;
    }

    public static double GetStartLocationX( int whichStartLocation )
    {
        // native code

        return (double)W3MapManager.instance.startLocation[ whichStartLocation ].x;
    }

    public static double GetStartLocationY( int whichStartLocation )
    {
        // native code

        return (double)W3MapManager.instance.startLocation[ whichStartLocation ].y;
    }

    public static BJLocation GetStartLocationLoc( int whichStartLocation )
    {
        // native code

        BJLocation bj = new BJLocation();
        bj.x = (float)W3MapManager.instance.startLocation[ whichStartLocation ].x;
        bj.y = (float)W3MapManager.instance.startLocation[ whichStartLocation ].y;

        return bj;
    }

    public static void SetPlayerTeam( BJPlayer whichPlayer , int whichTeam )
    {
        // native code

        W3MapManager.instance.playerTeam[ whichPlayer.id ] = whichTeam;
    }

    public static void SetPlayerStartLocation( BJPlayer whichPlayer , int startLocIndex )
    {
        // native code

        W3MapManager.instance.playerStartLocation[ whichPlayer.id ] = startLocIndex;
    }

    // forces player to have the specified start loc and marks the start loc as occupied
    // which removes it from consideration for subsequently placed players
    // ( i.e. you can use this to put people in a fixed loc and then
    //   use random placement for any unplaced players etc )
    public static void ForcePlayerStartLocation( BJPlayer whichPlayer , int startLocIndex )
    {
        // native code

        W3MapManager.instance.forcePlayerStartLocation[ whichPlayer.id ] = startLocIndex;
    }

    public static void SetPlayerColor( BJPlayer whichPlayer , BJPlayerColor color )
    {
        // native code

        W3MapManager.instance.playerColor[ whichPlayer.id ] = color.color;
    }

    public static void SetPlayerAlliance( BJPlayer sourcePlayer , BJPlayer otherPlayer , BJAllianceType whichAllianceSetting , bool value )
    {
        // native code

        if ( W3MapManager.instance.PlayerAlliance[ sourcePlayer.id ] == null )
            W3MapManager.instance.PlayerAlliance[ sourcePlayer.id ] = new W3MapManager.W3MapAlliance();

        if ( W3MapManager.instance.PlayerAlliance[ sourcePlayer.id ].alliance[ otherPlayer.id ].ContainsKey( whichAllianceSetting.type ) )
            W3MapManager.instance.PlayerAlliance[ sourcePlayer.id ].alliance[ otherPlayer.id ][ whichAllianceSetting.type ] = value;
        else
            W3MapManager.instance.PlayerAlliance[ sourcePlayer.id ].alliance[ otherPlayer.id ].Add( whichAllianceSetting.type , value );
    }

    public static void SetPlayerTaxRate( BJPlayer sourcePlayer , BJPlayer otherPlayer , BJPlayerState whichResource , int rate )
    {
        // native code

        if ( W3MapManager.instance.playerTaxRate[ sourcePlayer.id ] == null )
            W3MapManager.instance.playerTaxRate[ sourcePlayer.id ] = new W3MapManager.W3MapPlayerTaxRate();

        if ( W3MapManager.instance.playerTaxRate[ sourcePlayer.id ].rate[ otherPlayer.id ].ContainsKey( whichResource.state ) )
            W3MapManager.instance.playerTaxRate[ sourcePlayer.id ].rate[ otherPlayer.id ][ whichResource.state ] = rate;
        else
            W3MapManager.instance.playerTaxRate[ sourcePlayer.id ].rate[ otherPlayer.id ].Add( whichResource.state , rate );
    }

    public static void SetPlayerRacePreference( BJPlayer whichPlayer , BJRacePreference whichRacePreference )
    {
        // native code

        W3MapManager.instance.racePreference[ whichPlayer.id ] = whichRacePreference.racePreference;
    }

    public static void SetPlayerRaceSelectable( BJPlayer whichPlayer , bool value )
    {
        // native code

        W3MapManager.instance.playerRaceSelectable[ whichPlayer.id ] = value;
    }

    public static void SetPlayerController( BJPlayer whichPlayer , BJMapControl controlType )
    {
        // native code

        W3MapManager.instance.playerController[ whichPlayer.id ] = controlType.control;
    }

    public static void SetPlayerName( BJPlayer whichPlayer , string name )
    {
        // native code

        W3MapManager.instance.playerName[ whichPlayer.id ] = name;
    }

    public static void SetPlayerOnScoreScreen( BJPlayer whichPlayer , bool flag )
    {
        // native code

        W3MapManager.instance.playerOnScoreScreen[ whichPlayer.id ] = flag;
    }

    public static int GetPlayerTeam( BJPlayer whichPlayer )
    {
        // native code
        return W3MapManager.instance.playerTeam[ whichPlayer.id ];
    }

    public static int GetPlayerStartLocation( BJPlayer whichPlayer )
    {
        // native code
        return W3MapManager.instance.playerStartLocation[ whichPlayer.id ];
    }

    public static BJPlayerColor GetPlayerColor( BJPlayer whichPlayer )
    {
        // native code

        BJPlayerColor bj = new BJPlayerColor();
        bj.color = W3MapManager.instance.playerColor[ whichPlayer.id ];

        return bj;
    }

    public static bool GetPlayerSelectable( BJPlayer whichPlayer )
    {
        // native code

        return W3MapManager.instance.playerSelectable[ whichPlayer.id ];
    }

    public static BJMapControl GetPlayerController( BJPlayer whichPlayer )
    {
        // native code

        BJMapControl bj = new BJMapControl();
        bj.control = W3MapManager.instance.playerController[ whichPlayer.id ];

        return bj;
    }

    public static BJPlayerSlotState GetPlayerSlotState( BJPlayer whichPlayer )
    {
        // native code

        BJPlayerSlotState bj = new BJPlayerSlotState();
        bj.state = W3MapManager.instance.playerSlotState[ whichPlayer.id ];

        return bj;
    }

    public static int GetPlayerTaxRate( BJPlayer sourcePlayer , BJPlayer otherPlayer , BJPlayerState whichResource )
    {
        // native code

        if ( W3MapManager.instance.playerTaxRate[ sourcePlayer.id ].rate[ otherPlayer.id ].ContainsKey( whichResource.state ) )
            return W3MapManager.instance.playerTaxRate[ sourcePlayer.id ].rate[ otherPlayer.id ][ whichResource.state ];

        return 0;
    }

    public static bool IsPlayerRacePrefSet( BJPlayer whichPlayer , BJRacePreference pref )
    {
        // native code

        return W3MapManager.instance.racePreference[ whichPlayer.id ] == pref.racePreference;
    }

    public static string GetPlayerName( BJPlayer whichPlayer )
    {
        // native code

        return W3MapManager.instance.playerName[ whichPlayer.id ];
    }

    //============================================================================
    // Timer API
    //
    public static BJTimer CreateTimer()
    {
        // native code

        BJTimer bj = new BJTimer();
        //bj.timerID = W3NativeTimerData.instance.createTimer();

        return bj;
    }

    public static void DestroyTimer( BJTimer whichTimer )
    {
        // native code

        W3TimerManager.instance.destroyTimer( whichTimer.id );
    }

    public static void TimerStart( BJTimer whichTimer , double timeout , bool periodic , BJCode handlerFunc )
    {
        // native code

        W3TimerManager.instance.timerStart( whichTimer.id , timeout , periodic , handlerFunc );
    }

    public static double TimerGetElapsed( BJTimer whichTimer )
    {
        // native code

        return W3TimerManager.instance.timerGetElapsed( whichTimer.id );
    }

    public static double TimerGetRemaining( BJTimer whichTimer )
    {
        // native code
        return W3TimerManager.instance.timerGetRemaining( whichTimer.id );
    }

    public static double TimerGetTimeout( BJTimer whichTimer )
    {
        // native code
        return W3TimerManager.instance.timerGetTimeout( whichTimer.id );
    }

    public static void PauseTimer( BJTimer whichTimer )
    {
        // native code

        W3TimerManager.instance.pauseTimer( whichTimer.id );
    }

    public static void ResumeTimer( BJTimer whichTimer )
    {
        // native code

        W3TimerManager.instance.resumeTimer( whichTimer.id );
    }

    public static BJTimer GetExpiredTimer()
    {
        // native code

        BJTimer bj = new BJTimer();
        bj.id = W3TimerManager.instance.getExpiredTimer();

        return bj;
    }

    //============================================================================
    // Group API
    //
    public static BJGroup CreateGroup()
    {
        // native code

        BJGroup bj = new BJGroup();
        //bj.group = W3NativeGroupData.instance.groupID;

        return bj;
    }

    public static void DestroyGroup( BJGroup whichGroup )
    {
        // native code

        W3GroupManager.instance.destroyGroup( whichGroup.id );
    }

    public static void GroupAddUnit( BJGroup whichGroup , BJUnit whichUnit )
    {
        // native code

        W3GroupManager.instance.groupAddUnit( whichGroup.id , whichUnit.id );
    }

    public static void GroupRemoveUnit( BJGroup whichGroup , BJUnit whichUnit )
    {
        // native code

        W3GroupManager.instance.GroupRemoveUnit( whichGroup.id , whichUnit.id );
    }

    public static void GroupClear( BJGroup whichGroup )
    {
        // native code

        W3GroupManager.instance.groupClear( whichGroup.id );
    }

    public static void GroupEnumUnitsOfType( BJGroup whichGroup , string unitname , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsOfType( whichGroup.id , unitname , GameDefine.INVALID_ID );
    }

    public static void GroupEnumUnitsOfPlayer( BJGroup whichGroup , BJPlayer whichPlayer , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsOfPlayer( whichGroup.id , whichPlayer.id , GameDefine.INVALID_ID );
    }

    public static void GroupEnumUnitsOfTypeCounted( BJGroup whichGroup , string unitname , BJBoolExpr filter , int countLimit )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsOfType( whichGroup.id , unitname , countLimit );
    }

    public static void GroupEnumUnitsInRect( BJGroup whichGroup , BJRect r , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsInRect( whichGroup.id , r , GameDefine.INVALID_ID );
    }

    public static void GroupEnumUnitsInRectCounted( BJGroup whichGroup , BJRect r , BJBoolExpr filter , int countLimit )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsInRect( whichGroup.id , r , countLimit );
    }

    public static void GroupEnumUnitsInRange( BJGroup whichGroup , double x , double y , double radius , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsInRange( whichGroup.id , (float)x , (float)y , (float)radius , GameDefine.INVALID_ID );
    }

    public static void GroupEnumUnitsInRangeOfLoc( BJGroup whichGroup , BJLocation whichLocation , double radius , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsInRange( whichGroup.id , (float)whichLocation.x , (float)whichLocation.y , (float)radius , GameDefine.INVALID_ID );
    }

    public static void GroupEnumUnitsInRangeCounted( BJGroup whichGroup , double x , double y , double radius , BJBoolExpr filter , int countLimit )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsInRange( whichGroup.id , (float)x , (float)y , (float)radius , countLimit );
    }

    public static void GroupEnumUnitsInRangeOfLocCounted( BJGroup whichGroup , BJLocation whichLocation , double radius , BJBoolExpr filter , int countLimit )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsInRange( whichGroup.id , (float)whichLocation.x , (float)whichLocation.y , (float)radius , countLimit );
    }

    public static void GroupEnumUnitsSelected( BJGroup whichGroup , BJPlayer whichPlayer , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3GroupManager.instance.groupEnumUnitsSelected( whichGroup.id , whichPlayer.id , GameDefine.INVALID_ID );
    }

    public static bool GroupImmediateOrder( BJGroup whichGroup , string order )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.Parse( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupImmediateOrder( whichGroup.id , o );
    }

    public static bool GroupImmediateOrderById( BJGroup whichGroup , int order )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.ToObject( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupImmediateOrder( whichGroup.id , o );
    }

    public static bool GroupPointOrder( BJGroup whichGroup , string order , double x , double y )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.Parse( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupPointOrder( whichGroup.id , o , (float)x , (float)y );
    }

    public static bool GroupPointOrderLoc( BJGroup whichGroup , string order , BJLocation whichLocation )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.Parse( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupPointOrder( whichGroup.id , o , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static bool GroupPointOrderById( BJGroup whichGroup , int order , double x , double y )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.ToObject( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupPointOrder( whichGroup.id , o , (float)x , (float)y );
    }

    public static bool GroupPointOrderByIdLoc( BJGroup whichGroup , int order , BJLocation whichLocation )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.ToObject( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupPointOrder( whichGroup.id , o , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static bool GroupTargetOrder( BJGroup whichGroup , string order , BJWidget targetWidget )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.Parse( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupTargetOrder( whichGroup.id , o , targetWidget.id );
    }

    public static bool GroupTargetOrderById( BJGroup whichGroup , int order , BJWidget targetWidget )
    {
        // native code

        W3OrderType o = (W3OrderType)Enum.ToObject( typeof( W3OrderType ) , order );

        return W3GroupManager.instance.groupTargetOrder( whichGroup.id , o , targetWidget.id );
    }

    // This will be difficult to support with potentially disjoint, cell-based regions
    // as it would involve enumerating all the cells that are covered by a particularregion
    // a better implementation would be a trigger that adds relevant units as they enter
    // and removes them if they leave...
    public static void ForGroup( BJGroup whichGroup , BJCode callback )
    {
        // native code

        W3GroupManager.instance.forGroup( whichGroup.id , callback );
    }

    public static BJUnit FirstOfGroup( BJGroup whichGroup )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3GroupManager.instance.firstOfGroup( whichGroup.id );

        return bj;
    }

    //============================================================================
    // Force API
    //
    public static BJForce CreateForce()
    {
        // native code

        BJForce bj = new BJForce();
        bj.force = W3ForceManager.instance.createForce();

        return bj;
    }

    public static void DestroyForce( BJForce whichForce )
    {
        // native code

        W3ForceManager.instance.destroyForce( whichForce.force );
    }

    public static void ForceAddPlayer( BJForce whichForce , BJPlayer whichPlayer )
    {
        // native code

        W3ForceManager.instance.forceAddPlayer( whichForce.force , whichPlayer.id );
    }

    public static void ForceRemovePlayer( BJForce whichForce , BJPlayer whichPlayer )
    {
        // native code

        W3ForceManager.instance.forceRemovePlayer( whichPlayer.id , whichPlayer.id );
    }

    public static void ForceClear( BJForce whichForce )
    {
        // native code

        W3ForceManager.instance.forceClear( whichForce.force );
    }

    public static void ForceEnumPlayers( BJForce whichForce , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3ForceManager.instance.forceEnumPlayers( whichForce.force , GameDefine.INVALID_ID );
    }

    public static void ForceEnumPlayersCounted( BJForce whichForce , BJBoolExpr filter , int countLimit )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3ForceManager.instance.forceEnumPlayers( whichForce.force , countLimit );
    }

    public static void ForceEnumAllies( BJForce whichForce , BJPlayer whichPlayer , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3ForceManager.instance.forceEnumAllies( whichForce.force , whichPlayer.id , GameDefine.INVALID_ID );
    }

    public static void ForceEnumEnemies( BJForce whichForce , BJPlayer whichPlayer , BJBoolExpr filter )
    {
        // native code

        if ( filter != null && !filter() )
        {
            return;
        }

        W3ForceManager.instance.forceEnumEnemies( whichForce.force , whichPlayer.id , GameDefine.INVALID_ID );
    }

    public static void ForForce( BJForce whichForce , BJCode callback )
    {
        // native code

        W3ForceManager.instance.forForce( whichForce.force , callback );
    }

    //============================================================================
    // Region and Location API
    //
    public static BJRect Rect( double minx , double miny , double maxx , double maxy )
    {
        // native code

        BJRect bj = new BJRect();
        bj.minX = (float)minx;
        bj.minY = (float)miny;
        bj.maxX = (float)maxx;
        bj.maxY = (float)maxy;

        return bj;
    }

    public static BJRect RectFromLoc( BJLocation min , BJLocation max )
    {
        // native code

        BJRect bj = new BJRect();
        bj.minX = (float)min.x;
        bj.minY = (float)min.y;
        bj.maxX = (float)max.x;
        bj.maxY = (float)max.y;

        return bj;
    }

    public static void RemoveRect( BJRect whichRect )
    {
        // native code

        whichRect.minX = 0.0f;
        whichRect.minY = 0.0f;
        whichRect.maxX = 0.0f;
        whichRect.maxY = 0.0f;
    }

    public static void SetRect( BJRect whichRect , double minx , double miny , double maxx , double maxy )
    {
        // native code

        whichRect.minX = (float)minx;
        whichRect.minY = (float)miny;
        whichRect.maxX = (float)maxx;
        whichRect.maxY = (float)maxy;
    }

    public static void SetRectFromLoc( BJRect whichRect , BJLocation min , BJLocation max )
    {
        // native code

        whichRect.minX = (float)min.x;
        whichRect.minY = (float)min.y;
        whichRect.maxX = (float)max.x;
        whichRect.maxY = (float)max.y;
    }

    public static void MoveRectTo( BJRect whichRect , double newCenterX , double newCenterY )
    {
        // native code

        float w = ( whichRect.maxX - whichRect.minX ) * 0.5f;
        float h = ( whichRect.maxY - whichRect.minY ) * 0.5f;

        whichRect.minX = (float)newCenterX - w;
        whichRect.maxX = (float)newCenterX + w;
        whichRect.minY = (float)newCenterY - h;
        whichRect.maxY = (float)newCenterY + h;
    }

    public static void MoveRectToLoc( BJRect whichRect , BJLocation newCenterLoc )
    {
        // native code

        float w = ( whichRect.maxX - whichRect.minX ) * 0.5f;
        float h = ( whichRect.maxY - whichRect.minY ) * 0.5f;

        whichRect.minX = (float)newCenterLoc.x - w;
        whichRect.maxX = (float)newCenterLoc.x + w;
        whichRect.minY = (float)newCenterLoc.y - h;
        whichRect.maxY = (float)newCenterLoc.y + h;
    }

    public static double GetRectCenterX( BJRect whichRect )
    {
        // native code

        float w = ( whichRect.maxX - whichRect.minX ) * 0.5f;

        return whichRect.minX + w;
    }

    public static double GetRectCenterY( BJRect whichRect )
    {
        // native code

        float h = ( whichRect.maxY - whichRect.minY ) * 0.5f;

        return whichRect.minY + h;
    }

    public static double GetRectMinX( BJRect whichRect )
    {
        // native code

        return (float)whichRect.minX;
    }

    public static double GetRectMinY( BJRect whichRect )
    {
        // native code

        return (float)whichRect.minY;
    }

    public static double GetRectMaxX( BJRect whichRect )
    {
        // native code

        return (float)whichRect.maxX;
    }

    public static double GetRectMaxY( BJRect whichRect )
    {
        // native code

        return (float)whichRect.maxY;
    }

    public static BJRegion CreateRegion()
    {
        // native code

        BJRegion bj = new BJRegion();

        return bj;
    }

    public static void RemoveRegion( BJRegion whichRegion )
    {
        // native code

        whichRegion.cellList.Clear();
        whichRegion.rectList.Clear();
    }

    public static void RegionAddRect( BJRegion whichRegion , BJRect r )
    {
        // native code

        whichRegion.rectList.Add( r );
    }

    public static void RegionClearRect( BJRegion whichRegion , BJRect r )
    {
        // native code

        for ( int i = 0 ; i < whichRegion.rectList.Count ; i++ )
        {
            if ( whichRegion.rectList[ i ].minX == r.minX &&
                whichRegion.rectList[ i ].minY == r.minY &&
                whichRegion.rectList[ i ].maxX == r.maxX &&
                whichRegion.rectList[ i ].maxY == r.maxY )
            {
                whichRegion.rectList.RemoveAt( i );
                return;
            }
        }
    }

    public static void RegionAddCell( BJRegion whichRegion , double x , double y )
    {
        // native code

        BJLocation bj = new BJLocation();
        bj.x = (float)x;
        bj.y = (float)y;
        whichRegion.cellList.Add( bj );
    }

    public static void RegionAddCellAtLoc( BJRegion whichRegion , BJLocation whichLocation )
    {
        // native code

        whichRegion.cellList.Add( whichLocation );
    }

    public static void RegionClearCell( BJRegion whichRegion , double x , double y )
    {
        // native code

        for ( int i = 0 ; i < whichRegion.cellList.Count ; i++ )
        {
            if ( whichRegion.cellList[ i ].x == (float)x &&
                whichRegion.cellList[ i ].y == (float)y )
            {
                whichRegion.rectList.RemoveAt( i );
                return;
            }
        }
    }

    public static void RegionClearCellAtLoc( BJRegion whichRegion , BJLocation whichLocation )
    {
        // native code

        for ( int i = 0 ; i < whichRegion.cellList.Count ; i++ )
        {
            if ( whichRegion.cellList[ i ].x == whichLocation.x &&
                whichRegion.cellList[ i ].y == whichLocation.y )
            {
                whichRegion.rectList.RemoveAt( i );
                return;
            }
        }
    }

    public static BJLocation Location( double x , double y )
    {
        // native code

        BJLocation bj = new BJLocation();
        bj.x = (float)x;
        bj.y = (float)y;

        return bj;
    }

    public static void RemoveLocation( BJLocation whichLocation )
    {
        // native code

        whichLocation.x = 0.0f;
        whichLocation.y = 0.0f;
    }

    public static void MoveLocation( BJLocation whichLocation , double newX , double newY )
    {
        // native code

        whichLocation.x = (float)newX;
        whichLocation.y = (float)newY;
    }

    public static double GetLocationX( BJLocation whichLocation )
    {
        // native code

        return whichLocation.x;
    }

    public static double GetLocationY( BJLocation whichLocation )
    {
        // native code

        return whichLocation.y;
    }

    public static bool IsUnitInRegion( BJRegion whichRegion , BJUnit whichUnit )
    {
        // native code

        return W3MapManager.instance.isUnitInRegion( whichRegion , whichUnit.id );
    }

    public static bool IsPointInRegion( BJRegion whichRegion , double x , double y )
    {
        // native code

        return W3MapManager.instance.isPointInRegion( whichRegion , (float)x , (float)y );
    }

    public static bool IsLocationInRegion( BJRegion whichRegion , BJLocation whichLocation )
    {
        // native code

        return W3MapManager.instance.isPointInRegion( whichRegion , (float)whichLocation.x , (float)whichLocation.y );
    }

    // Returns full map bounds, including unplayable borders, in world coordinates
    public static BJRect GetWorldBounds()
    {
        // native code

        BJRect bj = new BJRect();
        bj.minX = W3MapManager.instance.worldBounds.xMin;
        bj.maxX = W3MapManager.instance.worldBounds.xMax;
        bj.minY = W3MapManager.instance.worldBounds.yMin;
        bj.maxY = W3MapManager.instance.worldBounds.yMax;

        return bj;
    }

    //============================================================================
    // Native trigger interface
    //
    public static BJTrigger CreateTrigger()
    {
        // native code

        BJTrigger bj = new BJTrigger();
        bj.id = W3TriggerManager.instance.createTrigger();

        return bj;
    }

    public static void DestroyTrigger( BJTrigger whichTrigger )
    {
        // native code

        W3TriggerManager.instance.destroyTrigger( whichTrigger.id );
    }

    public static void ResetTrigger( BJTrigger whichTrigger )
    {
        // native code

        W3TriggerManager.instance.resetTrigger( whichTrigger.id );
    }

    public static void EnableTrigger( BJTrigger whichTrigger )
    {
        // native code

        W3TriggerManager.instance.enableTrigger( whichTrigger.id , true );
    }

    public static void DisableTrigger( BJTrigger whichTrigger )
    {
        // native code

        W3TriggerManager.instance.enableTrigger( whichTrigger.id , false );
    }

    public static bool IsTriggerEnabled( BJTrigger whichTrigger )
    {
        // native code
        return W3TriggerManager.instance.isTriggerEnabled( whichTrigger.id );
    }

    public static void TriggerWaitOnSleeps( BJTrigger whichTrigger , bool flag )
    {
        // native code

        W3TriggerManager.instance.triggerWaitOnSleeps( whichTrigger.id , flag );
    }

    public static bool IsTriggerWaitOnSleeps( BJTrigger whichTrigger )
    {
        // native code

        return W3TriggerManager.instance.isTriggerWaitOnSleeps( whichTrigger.id );
    }

    public static BJUnit GetFilterUnit()
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3TriggerManager.instance.filterUnit;

        return bj;
    }

    public static BJUnit GetEnumUnit()
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3TriggerManager.instance.enumUnit;

        return bj;
    }

    public static BJDestructAble GetFilterDestructable()
    {
        // native code

        BJDestructAble bj = new BJDestructAble();
        bj.id = W3TriggerManager.instance.filterDestructable;

        return bj;
    }

    public static BJDestructAble GetEnumDestructable()
    {
        // native code

        BJDestructAble bj = new BJDestructAble();
        bj.id = W3TriggerManager.instance.enumDestructable;

        return bj;
    }

    public static BJItem GetFilterItem()
    {
        // native code

        BJItem bj = new BJItem();
        bj.id = W3TriggerManager.instance.filterItem;

        return bj;
    }

    public static BJItem GetEnumItem()
    {
        // native code

        BJItem bj = new BJItem();
        bj.id = W3TriggerManager.instance.enumItem;

        return bj;
    }

    public static BJPlayer GetFilterPlayer()
    {
        // native code

        BJPlayer bj = new BJPlayer();
        bj.id = W3TriggerManager.instance.filterPlayer;

        return bj;
    }

    public static BJPlayer GetEnumPlayer()
    {
        // native code

        BJPlayer bj = new BJPlayer();
        bj.id = W3TriggerManager.instance.enumPlayer;

        return bj;
    }

    public static BJTrigger GetTriggeringTrigger()
    {
        // native code

        BJTrigger bj = new BJTrigger();
        bj.id = W3TriggerManager.instance.lastTriggerID;

        return bj;
    }

    public static BJEventID GetTriggerEventId()
    {
        // native code

        BJEventID bj = new BJEventID();
        bj.id = W3TriggerManager.instance.eventID;

        return bj;
    }

    public static int GetTriggerEvalCount( BJTrigger whichTrigger )
    {
        // native code
        return W3TriggerManager.instance.getTriggerEvalCount( whichTrigger.id );
    }

    public static int GetTriggerExecCount( BJTrigger whichTrigger )
    {
        // native code
        return W3TriggerManager.instance.getTriggerExecCount( whichTrigger.id );
    }

    // 		public static void ExecuteFunc( string funcName )
    // 		{
    // 			// native code
    // 		}

    //============================================================================
    // Boolean Expr API ( for compositing trigger conditions and unit filter funcs...)
    //============================================================================
    public static bool And( BJBoolExpr operandA , BJBoolExpr operandB )
    {
        if ( operandA == null || operandB == null )
        {
            return false;
        }

        // native code
        return operandA() && operandB();
    }

    public static bool Or( BJBoolExpr operandA , BJBoolExpr operandB )
    {
        if ( operandA == null || operandB == null )
        {
            return false;
        }

        // native code
        return operandA() || operandB();
    }

    public static bool Not( BJBoolExpr operand )
    {
        if ( operand == null )
        {
            return false;
        }

        // native code
        return !operand();
    }

    public static BJConditionFunc Condition( BJCode func )
    {
        // native code
        return null;
    }

    public static void DestroyCondition( BJConditionFunc c )
    {
        // native code
    }

    public static BJFilterFunc Filter( BJCode func )
    {
        // native code
        return null;
    }

    public static void DestroyFilter( BJFilterFunc f )
    {
        // native code
    }

    public static void DestroyBoolExpr( BJBoolExpr e )
    {
        // native code
    }

    //============================================================================
    // Trigger Game Event API
    //============================================================================
    public static BJEvent TriggerRegisterVariableEvent( BJTrigger whichTrigger , string varName , BJLimitOP opcode , double limitval )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterVariableEvent( whichTrigger.id , varName , opcode.op , (float)limitval );

        return bj;
    }

    // EVENT_GAME_VARIABLE_LIMIT
    //constant native string GetTriggeringVariableName takes nothing returns string
    // Creates it's own timer and triggers when it expires
    public static BJEvent TriggerRegisterTimerEvent( BJTrigger whichTrigger , double timeout , bool periodic )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterTimerEvent( whichTrigger.id , (float)timeout , periodic );

        return bj;
    }

    // Triggers when the timer you tell it about expires
    public static BJEvent TriggerRegisterTimerExpireEvent( BJTrigger whichTrigger , BJTimer t )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterTimerExpireEvent( whichTrigger.id , t.id );

        return bj;
    }

    public static BJEvent TriggerRegisterGameStateEvent( BJTrigger whichTrigger , BJGameState whichState , BJLimitOP opcode , double limitval )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterGameStateEvent( whichTrigger.id , whichState.state , opcode.op , (float)limitval );

        return bj;
    }

    public static BJEvent TriggerRegisterDialogEvent( BJTrigger whichTrigger , BJDialog whichDialog )
    {
        // native code

        BJDialogEvent bj = new BJDialogEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterDialogEvent( whichTrigger.id , whichDialog.id );

        return bj;
    }

    public static BJEvent TriggerRegisterDialogButtonEvent( BJTrigger whichTrigger , BJButton whichButton )
    {
        // native code

        BJDialogEvent bj = new BJDialogEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterDialogButtonEvent( whichTrigger.id , whichButton.id );

        return bj;
    }

    //  EVENT_GAME_STATE_LIMIT
    public static BJGameState GetEventGameState()
    {
        // native code

        BJGameState bj = new BJGameState();
        bj.state = W3GameManager.instance.eventGameState;

        return bj;
    }

    public static BJEvent TriggerRegisterGameEvent( BJTrigger whichTrigger , BJGameEvent whichGameEvent )
    {
        // native code

        BJGameEvent bj = new BJGameEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterGameEvent( whichTrigger.id , whichGameEvent.id );

        return bj;
    }

    // EVENT_GAME_VICTORY
    public static BJPlayer GetWinningPlayer()
    {
        // native code

        BJPlayer bj = new BJPlayer();
        bj.id = W3GameManager.instance.winningPlayer;

        return bj;
    }

    public static BJEvent TriggerRegisterEnterRegion( BJTrigger whichTrigger , BJRegion whichRegion , BJBoolExpr filter )
    {
        // native code

        BJGameEvent bj = new BJGameEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterEnterRegion( whichTrigger.id , whichRegion , filter );

        return bj;
    }

    // EVENT_GAME_ENTER_REGION
    public static BJRegion GetTriggeringRegion()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.region;
    }

    public static BJUnit GetEnteringUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        if ( trigger.enteringUnit != null && trigger.enteringUnit.Count > 0 )
        {
            BJUnit bj = new BJUnit();
            bj.id = trigger.enteringUnit[ 0 ];
            trigger.enteringUnit.RemoveAt( 0 );

            return bj;
        }

        return null;
    }

    // EVENT_GAME_LEAVE_REGION
    public static BJEvent TriggerRegisterLeaveRegion( BJTrigger whichTrigger , BJRegion whichRegion , BJBoolExpr filter )
    {
        // native code

        BJGameEvent bj = new BJGameEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterLeaveRegion( whichTrigger.id , whichRegion , filter );

        return bj;
    }

    public static BJUnit GetLeavingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        if ( trigger.leavingUnit != null && trigger.leavingUnit.Count > 0 )
        {
            BJUnit bj = new BJUnit();
            bj.id = trigger.leavingUnit[ 0 ];
            trigger.leavingUnit.RemoveAt( 0 );

            return bj;
        }

        return null;
    }

    public static BJEvent TriggerRegisterTrackableHitEvent( BJTrigger whichTrigger , BJTrackAble t )
    {
        // native code

        BJGameEvent bj = new BJGameEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterTrackableHitEvent( whichTrigger.id , t.id );

        return bj;
    }

    public static BJEvent TriggerRegisterTrackableTrackEvent( BJTrigger whichTrigger , BJTrackAble t )
    {
        // native code

        BJGameEvent bj = new BJGameEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterTrackableTrackEvent( whichTrigger.id , t.id );

        return bj;
    }

    // EVENT_GAME_TRACKABLE_HIT
    // EVENT_GAME_TRACKABLE_TRACK
    public static BJTrackAble GetTriggeringTrackable()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJTrackAble bj = new BJTrackAble();
        bj.id = trigger.trackableID;
        return bj;
    }

    // EVENT_DIALOG_BUTTON_CLICK
    public static BJButton GetClickedButton()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJButton bj = new BJButton();
        bj.id = trigger.buttonID;

        return bj;
    }

    public static BJDialog GetClickedDialog()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJDialog bj = new BJDialog();
        bj.id = trigger.dialogID;
        return bj;
    }

    // EVENT_GAME_TOURNAMENT_FINISH_SOON
    public static double GetTournamentFinishSoonTimeRemaining()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;
        return trigger.finishSoonTimeRemaining;
    }

    public static int GetTournamentFinishNowRule()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;
        return trigger.finishNowRule;
    }

    public static BJPlayer GetTournamentFinishNowPlayer()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJPlayer bj = new BJPlayer();
        bj.id = trigger.finishNowPlayer;
        return bj;
    }

    public static int GetTournamentScore( BJPlayer whichPlayer )
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;
        return trigger.scores[ whichPlayer.id ];
    }

    // EVENT_GAME_SAVE
    public static string GetSaveBasicFilename()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;
        return trigger.saveBasicFileName;
    }

    //============================================================================
    // Trigger Player Based Event API
    //============================================================================
    public static BJEvent TriggerRegisterPlayerEvent( BJTrigger whichTrigger , BJPlayer whichPlayer , BJPlayerEvent whichPlayerEvent )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterPlayerEvent( whichTrigger.id , whichPlayer.id , whichPlayerEvent.id );

        return bj;
    }

    // EVENT_PLAYER_DEFEAT
    // EVENT_PLAYER_VICTORY
    public static BJPlayer GetTriggerPlayer()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJPlayer bj = new BJPlayer();
        bj.id = trigger.playerID;
        return bj;
    }

    public static BJEvent TriggerRegisterPlayerUnitEvent( BJTrigger whichTrigger , BJPlayer whichPlayer , BJPlayerUnitEvent whichPlayerUnitEvent , BJBoolExpr filter )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterPlayerUnitEvent( whichTrigger.id , whichPlayer.id , whichPlayerUnitEvent.id , filter );

        return bj;
    }

    // EVENT_PLAYER_HERO_LEVEL
    // EVENT_UNIT_HERO_LEVEL
    public static BJUnit GetLevelingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.levelingUnitID;
        return bj;
    }

    // EVENT_PLAYER_HERO_SKILL
    // EVENT_UNIT_HERO_SKILL
    public static BJUnit GetLearningUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.levelingUnitID;
        return bj;
    }

    public static int GetLearnedSkill()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.learnedSkill;
    }

    public static int GetLearnedSkillLevel()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.learnedSkillLevel;
    }

    // EVENT_PLAYER_HERO_REVIVABLE
    public static BJUnit GetRevivableUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.revivableUnitID;
        return bj;
    }

    // EVENT_PLAYER_HERO_REVIVE_START
    // EVENT_PLAYER_HERO_REVIVE_CANCEL
    // EVENT_PLAYER_HERO_REVIVE_FINISH
    // EVENT_UNIT_HERO_REVIVE_START
    // EVENT_UNIT_HERO_REVIVE_CANCEL
    // EVENT_UNIT_HERO_REVIVE_FINISH
    public static BJUnit GetRevivingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.revivableUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_ATTACKED
    public static BJUnit GetAttacker()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.attackerID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_RESCUED
    public static BJUnit GetRescuer()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.rescuerID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_DEATH
    public static BJUnit GetDyingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.dyingUnitID;
        return bj;
    }

    public static BJUnit GetKillingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.killingUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_DECAY
    public static BJUnit GetDecayingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.decayingUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_SELECTED
    //constant native GetSelectedUnit takes nothing returns unit
    // EVENT_PLAYER_UNIT_CONSTRUCT_START
    public static BJUnit GetConstructingStructure()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.constructingStructureID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_CONSTRUCT_FINISH
    // EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL
    public static BJUnit GetCancelledStructure()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.constructingStructureID;
        return bj;
    }

    public static BJUnit GetConstructedStructure()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.constructedStructureID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_RESEARCH_START
    // EVENT_PLAYER_UNIT_RESEARCH_CANCEL
    // EVENT_PLAYER_UNIT_RESEARCH_FINISH
    public static BJUnit GetResearchingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.researchingUnitID;
        return bj;
    }

    public static int GetResearched()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.researched;
    }

    // EVENT_PLAYER_UNIT_TRAIN_START
    // EVENT_PLAYER_UNIT_TRAIN_CANCEL
    public static int GetTrainedUnitType()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.trainedUnitType;
    }

    // EVENT_PLAYER_UNIT_TRAIN_FINISH
    public static BJUnit GetTrainedUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.trainedUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_DETECTED
    public static BJUnit GetDetectedUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.detectedUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_SUMMONED
    public static BJUnit GetSummoningUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.summoningUnitID;
        return bj;
    }

    public static BJUnit GetSummonedUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.summonedUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_LOADED
    public static BJUnit GetTransportUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.transportUnitID;
        return bj;
    }

    public static BJUnit GetLoadedUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.loadedUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_SELL
    public static BJUnit GetSellingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.sellingUnitID;
        return bj;
    }

    public static BJUnit GetSoldUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.soldUnitID;
        return bj;
    }

    public static BJUnit GetBuyingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.buyingUnitID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_SELL_ITEM
    public static BJItem GetSoldItem()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJItem bj = new BJItem();
        bj.id = trigger.soldItemID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_CHANGE_OWNER
    public static BJUnit GetChangingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.changingUnitID;
        return bj;
    }

    public static BJPlayer GetChangingUnitPrevOwner()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJPlayer bj = new BJPlayer();
        bj.id = trigger.changingUnitPrevOwnerID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_DROP_ITEM
    // EVENT_PLAYER_UNIT_PICKUP_ITEM
    // EVENT_PLAYER_UNIT_USE_ITEM
    public static BJUnit GetManipulatingUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.manipulatingUnitID;
        return bj;
    }

    public static BJItem GetManipulatedItem()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJItem bj = new BJItem();
        bj.id = trigger.manipulatedItemID;
        return bj;
    }

    // EVENT_PLAYER_UNIT_ISSUED_ORDER
    public static BJUnit GetOrderedUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.orderedUnitID;
        return bj;
    }

    public static int GetIssuedOrderId()
    {
        // native code
        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.issuedOrderID;
    }

    // EVENT_PLAYER_UNIT_ISSUED_POINT_ORDER
    public static double GetOrderPointX()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.orderPointX;
    }

    public static double GetOrderPointY()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.orderPointY;
    }

    public static BJLocation GetOrderPointLoc()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJLocation bj = new BJLocation();
        bj.x = trigger.orderPointX;
        bj.y = trigger.orderPointY;
        return bj;
    }

    // EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER
    public static BJWidget GetOrderTarget()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJWidget bj = new BJWidget();
        bj.id = trigger.orderTargetID;
        return bj;
    }

    public static BJDestructAble GetOrderTargetDestructable()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJDestructAble bj = new BJDestructAble();
        bj.id = trigger.orderTargetDestructableID;
        return bj;
    }

    public static BJItem GetOrderTargetItem()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJItem bj = new BJItem();
        bj.id = trigger.orderTargetItemID;
        return bj;
    }

    public static BJUnit GetOrderTargetUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.orderTargetUnitID;
        return bj;
    }

    // EVENT_UNIT_SPELL_CHANNEL
    // EVENT_UNIT_SPELL_CAST
    // EVENT_UNIT_SPELL_EFFECT
    // EVENT_UNIT_SPELL_FINISH
    // EVENT_UNIT_SPELL_ENDCAST
    // EVENT_PLAYER_UNIT_SPELL_CHANNEL
    // EVENT_PLAYER_UNIT_SPELL_CAST
    // EVENT_PLAYER_UNIT_SPELL_EFFECT
    // EVENT_PLAYER_UNIT_SPELL_FINISH
    // EVENT_PLAYER_UNIT_SPELL_ENDCAST
    public static BJUnit GetSpellAbilityUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.spellAbilityUnitID;
        return bj;
    }

    public static int GetSpellAbilityId()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.spellAbilityID;
    }

    public static BJAbility GetSpellAbility()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJAbility bj = new BJAbility();
        bj.id = trigger.spellAbility;
        return bj;
    }

    public static BJEvent TriggerRegisterPlayerAllianceChange( BJTrigger whichTrigger , BJPlayer whichPlayer , BJAllianceType whichAlliance )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterPlayerAllianceChange( whichTrigger.id , whichPlayer.id , whichAlliance.type );

        return bj;
    }

    public static BJEvent TriggerRegisterPlayerStateEvent( BJTrigger whichTrigger , BJPlayer whichPlayer , BJPlayerState whichState , BJLimitOP opcode , double limitval )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterPlayerStateEvent( whichTrigger.id , whichPlayer.id , whichState.state , opcode.op , (float)limitval );

        return bj;
    }

    // EVENT_PLAYER_STATE_LIMIT
    public static BJPlayerState GetEventPlayerState()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJPlayerState bj = new BJPlayerState();
        bj.state = trigger.playerState;
        return bj;
    }

    public static BJEvent TriggerRegisterPlayerChatEvent( BJTrigger whichTrigger , BJPlayer whichPlayer , string chatMessageToDetect , bool exactMatchOnly )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterPlayerChatEvent( whichTrigger.id , whichPlayer.id , chatMessageToDetect , exactMatchOnly );

        return bj;
    }

    // EVENT_PLAYER_CHAT
    // returns the actual string they typed in ( same as what you registered for
    // if you required exact match )
    public static string GetEventPlayerChatString()
    {
        // native code
        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.chatMessageToDetect;
    }

    // returns the string that you registered for
    public static string GetEventPlayerChatStringMatched()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.chatMessageToDetect;
    }

    public static BJEvent TriggerRegisterDeathEvent( BJTrigger whichTrigger , BJWidget whichWidget )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterDeathEvent( whichTrigger.id , whichWidget.id );

        return bj;
    }

    //============================================================================
    // Trigger Unit Based Event API
    //============================================================================
    // returns handle to unit which triggered the most recent event when called from
    // within a trigger action function...returns null handle when used incorrectly
    public static BJUnit GetTriggerUnit()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.triggerUnitID;
        return bj;
    }

    public static BJEvent TriggerRegisterUnitStateEvent( BJTrigger whichTrigger , BJUnit whichUnit , BJUnitState whichState , BJLimitOP opcode , double limitval )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterUnitStateEvent( whichTrigger.id , whichUnit.id , whichState.state , opcode.op , (float)limitval );

        return bj;
    }

    // EVENT_UNIT_STATE_LIMIT
    public static BJUnitState GetEventUnitState()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnitState bj = new BJUnitState();
        bj.state = trigger.state;
        return bj;
    }

    public static BJEvent TriggerRegisterUnitEvent( BJTrigger whichTrigger , BJUnit whichUnit , BJUnitEvent whichEvent )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterUnitEvent( whichTrigger.id , whichUnit.id , whichEvent.id );

        return bj;
    }

    // EVENT_UNIT_DAMAGED
    public static double GetEventDamage()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        return trigger.damage;
    }

    // EVENT_UNIT_DEATH
    // EVENT_UNIT_DECAY
    // Use the GetDyingUnit and GetDecayingUnit funcs above
    // EVENT_UNIT_DETECTED 
    public static BJPlayer GetEventDetectingPlayer()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJPlayer bj = new BJPlayer();
        bj.id = trigger.detectingPlayer;
        return bj;
    }

    public static BJEvent TriggerRegisterFilterUnitEvent( BJTrigger whichTrigger , BJUnit whichUnit , BJUnitEvent whichEvent , BJBoolExpr filter )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterFilterUnitEvent( whichTrigger.id , whichUnit.id , whichEvent.id , filter );

        return bj;
    }

    // EVENT_UNIT_ACQUIRED_TARGET
    // EVENT_UNIT_TARGET_IN_RANGE
    public static BJUnit GetEventTargetUnit()
    {
        // native code
        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJUnit bj = new BJUnit();
        bj.id = trigger.targetUnitID;
        return bj;
    }

    // EVENT_UNIT_ATTACKED
    // Use GetAttacker from the Player Unit Event API Below...
    // EVENT_UNIT_RESCUEDED
    // Use GetRescuer from the Player Unit Event API Below...
    // EVENT_UNIT_CONSTRUCT_CANCEL
    // EVENT_UNIT_CONSTRUCT_FINISH
    // See the Player Unit Construction Event API above for event info funcs
    // EVENT_UNIT_TRAIN_START
    // EVENT_UNIT_TRAIN_CANCELLED
    // EVENT_UNIT_TRAIN_FINISH
    // See the Player Unit Training Event API above for event info funcs
    // EVENT_UNIT_SELL
    // See the Player Unit Sell Event API above for event info funcs
    // EVENT_UNIT_DROP_ITEM
    // EVENT_UNIT_PICKUP_ITEM
    // EVENT_UNIT_USE_ITEM
    // See the Player Unit/Item manipulation Event API above for event info funcs
    // EVENT_UNIT_ISSUED_ORDER
    // EVENT_UNIT_ISSUED_POINT_ORDER
    // EVENT_UNIT_ISSUED_TARGET_ORDER
    // See the Player Unit Order Event API above for event info funcs
    public static BJEvent TriggerRegisterUnitInRange( BJTrigger whichTrigger , BJUnit whichUnit , double range , BJBoolExpr filter )
    {
        // native code

        BJEvent bj = new BJEvent();
        bj.id = W3TriggerManager.instance.triggerRegisterUnitInRange( whichTrigger.id , whichUnit.id , (float)range , filter );

        return bj;
    }

    public static BJTriggerCondition TriggerAddCondition( BJTrigger whichTrigger , BJBoolExpr condition )
    {
        // native code

        W3TriggerManager.instance.triggerAddCondition( whichTrigger.id , condition );

        BJTriggerCondition bj = new BJTriggerCondition();
        bj.condition = condition;
        return bj;
    }

    public static void TriggerRemoveCondition( BJTrigger whichTrigger , BJTriggerCondition whichCondition )
    {
        // native code

        W3TriggerManager.instance.triggerRemoveCondition( whichTrigger.id , whichCondition.condition );
    }

    public static void TriggerClearConditions( BJTrigger whichTrigger )
    {
        // native code

        W3TriggerManager.instance.triggerClearConditions( whichTrigger.id );
    }

    public static BJTriggerAction TriggerAddAction( BJTrigger whichTrigger , BJCode actionFunc )
    {
        // native code

        W3TriggerManager.instance.triggerAddAction( whichTrigger.id , actionFunc );

        BJTriggerAction bj = new BJTriggerAction();
        bj.action = actionFunc;
        return bj;
    }

    public static void TriggerRemoveAction( BJTrigger whichTrigger , BJTriggerAction whichAction )
    {
        // native code

        W3TriggerManager.instance.triggerRemoveAction( whichTrigger.id , whichAction.action );
    }

    public static void TriggerClearActions( BJTrigger whichTrigger )
    {
        // native code

        W3TriggerManager.instance.triggerClearActions( whichTrigger.id );
    }

    public static void TriggerSleepAction( double timeout )
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;
        trigger.timeOut = (float)timeout;
    }

    public static void TriggerWaitForSound( BJSound s , double offset )
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;
        trigger.sound = s.id;
        trigger.soundOffset = (float)offset;
    }

    public static bool TriggerEvaluate( BJTrigger whichTrigger )
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;
        return trigger.evaluate;
    }

    public static void TriggerExecute( BJTrigger whichTrigger )
    {
        // native code
    }

    public static void TriggerExecuteWait( BJTrigger whichTrigger )
    {
        // native code
    }

    public static void TriggerSyncStart()
    {
        // native code
    }

    public static void TriggerSyncReady()
    {
        // native code
    }

    //============================================================================
    // Widget API
    public static double GetWidgetLife( BJWidget whichWidget )
    {
        // native code

        W3Base widget = W3BaseManager.instance.getData( whichWidget.id );
        return widget.baseData.hp;
    }

    public static void SetWidgetLife( BJWidget whichWidget , double newLife )
    {
        // native code

        W3BaseManager.instance.setLife( whichWidget.id , (float)newLife );
    }

    public static double GetWidgetX( BJWidget whichWidget )
    {
        // native code

        W3Base widget = W3BaseManager.instance.getData( whichWidget.id );
        return widget.baseData.x;
    }

    public static double GetWidgetY( BJWidget whichWidget )
    {
        // native code

        W3Base widget = W3BaseManager.instance.getData( whichWidget.id );
        return widget.baseData.y;
    }

    public static BJWidget GetTriggerWidget()
    {
        // native code

        W3Trigger trigger = W3TriggerManager.instance.lastTrigger;

        BJWidget bj = new BJWidget();
        bj.id = trigger.widgetID;
        return bj;
    }

    //============================================================================
    // Destructable Object API
    // Facing arguments are specified in degrees
    public static BJDestructAble CreateDestructable( int objectid , double x , double y , double face , double scale , int variation )
    {
        // native code

        BJDestructAble bj = new BJDestructAble();
        bj.id = W3DestructableManager.instance.createDestructable( objectid , (float)x , (float)y , 0.0f , (float)face , (float)scale , variation , false );

        return bj;
    }

    public static BJDestructAble CreateDestructableZ( int objectid , double x , double y , double z , double face , double scale , int variation )
    {
        // native code

        BJDestructAble bj = new BJDestructAble();
        bj.id = W3DestructableManager.instance.createDestructable( objectid , (float)x , (float)y , (float)z , (float)face , (float)scale , variation , false );

        return bj;
    }

    public static BJDestructAble CreateDeadDestructable( int objectid , double x , double y , double face , double scale , int variation )
    {
        // native code

        BJDestructAble bj = new BJDestructAble();
        bj.id = W3DestructableManager.instance.createDestructable( objectid , (float)x , (float)y , 0.0f , (float)face , (float)scale , variation , true );

        return bj;
    }

    public static BJDestructAble CreateDeadDestructableZ( int objectid , double x , double y , double z , double face , double scale , int variation )
    {
        // native code

        BJDestructAble bj = new BJDestructAble();
        bj.id = W3DestructableManager.instance.createDestructable( objectid , (float)x , (float)y , (float)z , (float)face , (float)scale , variation , true );

        return bj;
    }

    public static void RemoveDestructable( BJDestructAble d )
    {
        // native code

        W3BaseManager.instance.remove( d.id );
    }

    public static void KillDestructable( BJDestructAble d )
    {
        // native code

        W3BaseManager.instance.kill( d.id );
    }

    public static void SetDestructableInvulnerable( BJDestructAble d , bool flag )
    {
        // native code

        W3Base destructable = W3BaseManager.instance.getData( d.id );
        destructable.baseData.invulnerable = flag;
    }

    public static bool IsDestructableInvulnerable( BJDestructAble d )
    {
        // native code

        W3Base destructable = W3BaseManager.instance.getData( d.id );
        return destructable.baseData.invulnerable;
    }

    public static void EnumDestructablesInRect( BJRect r , BJBoolExpr filter , BJCode actionFunc )
    {
        // native code

        W3DestructableManager.instance.enumDestructablesInRect( r , filter , actionFunc );
    }

    public static int GetDestructableTypeId( BJDestructAble d )
    {
        // native code

        W3Base destructable = W3BaseManager.instance.getData( d.id );
        return destructable.baseData.typeID;
    }

    public static double GetDestructableX( BJDestructAble d )
    {
        // native code

        W3Base destructable = W3BaseManager.instance.getData( d.id );
        return destructable.baseData.x;
    }

    public static double GetDestructableY( BJDestructAble d )
    {
        // native code

        W3Base destructable = W3BaseManager.instance.getData( d.id );
        return destructable.baseData.z;
    }

    public static void SetDestructableLife( BJDestructAble d , double life )
    {
        // native code

        W3BaseManager.instance.setLife( d.id , (float)life );
    }

    public static double GetDestructableLife( BJDestructAble d )
    {
        // native code
        W3Base destructable = W3BaseManager.instance.getData( d.id );
        return destructable.baseData.hp;
    }

    public static void SetDestructableMaxLife( BJDestructAble d , double max )
    {
        // native code

        W3BaseManager.instance.setMaxLife( d.id , (float)max );
    }

    public static double GetDestructableMaxLife( BJDestructAble d )
    {
        // native code

        W3Base destructable = W3BaseManager.instance.getData( d.id );
        return destructable.baseData.hpMax;
    }

    public static void DestructableRestoreLife( BJDestructAble d , double life , bool birth )
    {
        // native code

        W3BaseManager.instance.restoreLife( d.id , (float)life , birth );
    }

    public static void QueueDestructableAnimation( BJDestructAble d , string whichAnimation )
    {
        // native code

        W3BaseManager.instance.queueAnimation( d.id , whichAnimation );
    }

    public static void SetDestructableAnimation( BJDestructAble d , string whichAnimation )
    {
        // native code

        W3BaseManager.instance.setAnimation( d.id , whichAnimation );
    }

    public static void SetDestructableAnimationSpeed( BJDestructAble d , double speedFactor )
    {
        // native code

        W3BaseManager.instance.setAnimationSpeed( d.id , (float)speedFactor );
    }

    public static void ShowDestructable( BJDestructAble d , bool flag )
    {
        // native code

        W3BaseManager.instance.show( d.id , flag );
    }

    public static double GetDestructableOccluderHeight( BJDestructAble d )
    {
        // native code

        W3Base destructable = W3BaseManager.instance.getData( d.id );
        return destructable.baseData.occluderHeight;
    }

    public static void SetDestructableOccluderHeight( BJDestructAble d , double height )
    {
        // native code

        W3BaseManager.instance.setOccluderHeight( d.id , (float)height );
    }

    //============================================================================
    // Item API
    public static BJItem CreateItem( int itemid , double x , double y )
    {
        // native code

        BJItem bj = new BJItem();
        bj.id = W3ItemManager.instance.createItem( itemid , (float)x , (float)y );

        return bj;
    }

    public static void RemoveItem( BJItem whichItem )
    {
        // native code

        W3BaseManager.instance.remove( whichItem.id );
    }

    public static BJPlayer GetItemPlayer( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );

        BJPlayer bj = new BJPlayer();
        bj.id = item.baseData.playerID;
        return bj;
    }

    public static int GetItemTypeId( BJItem i )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( i.id );
        return item.baseData.typeID;
    }

    public static double GetItemX( BJItem i )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( i.id );
        return item.baseData.x;
    }

    public static double GetItemY( BJItem i )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( i.id );
        return item.baseData.z;
    }

    public static void SetItemPosition( BJItem i , double x , double y )
    {
        // native code

        W3BaseManager.instance.setPosition( i.id , (float)x , (float)y );
    }

    public static void SetItemDropOnDeath( BJItem whichItem , bool flag )
    {
        // native code

        W3ItemManager.instance.setItemDropOnDeath( whichItem.id , flag );
    }

    public static void SetItemDroppable( BJItem i , bool flag )
    {
        // native code

        W3ItemManager.instance.setItemDroppable( i.id , flag );
    }

    public static void SetItemPawnable( BJItem i , bool flag )
    {
        // native code

        W3ItemManager.instance.setItemPawnable( i.id , flag );
    }

    public static void SetItemPlayer( BJItem whichItem , BJPlayer whichPlayer , bool changeColor )
    {
        // native code

        W3ItemManager.instance.setItemPlayer( whichItem.id , whichPlayer.id , changeColor );
    }

    public static void SetItemInvulnerable( BJItem whichItem , bool flag )
    {
        // native code

        W3BaseManager.instance.setInvulnerable( whichItem.id , flag );
    }

    public static bool IsItemInvulnerable( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );
        return item.baseData.invulnerable;
    }

    public static void SetItemVisible( BJItem whichItem , bool show )
    {
        // native code

        W3BaseManager.instance.setVisible( whichItem.id , show );
    }

    public static bool IsItemVisible( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );
        return item.baseData.visible;
    }

    public static bool IsItemOwned( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );
        return item.baseData.playerID != GameDefine.INVALID_ID;
    }

    public static bool IsItemPowerup( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );
        return item.baseData.powerup;
    }

    public static bool IsItemSellable( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );
        return item.baseData.sellable;
    }

    public static bool IsItemPawnable( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );
        return item.baseData.pawnable;
    }

    public static bool IsItemIdPowerup( int itemId )
    {
        // native code

        W3ItemDataConfigData data = W3ItemDataConfig.instance.getData( itemId );
        return data.powerup;
    }

    public static bool IsItemIdSellable( int itemId )
    {
        // native code

        W3ItemDataConfigData data = W3ItemDataConfig.instance.getData( itemId );
        return data.sellable;
    }

    public static bool IsItemIdPawnable( int itemId )
    {
        // native code

        W3ItemDataConfigData data = W3ItemDataConfig.instance.getData( itemId );
        return data.pawnable;
    }

    public static void EnumItemsInRect( BJRect r , BJBoolExpr filter , BJCode actionFunc )
    {
        // native code

        W3ItemManager.instance.enumItemsInRect( r , filter , actionFunc );
    }

    public static int GetItemLevel( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );
        return item.baseData.level;
    }

    public static BJItemType GetItemType( BJItem whichItem )
    {
        // native code

        W3Base item = W3BaseManager.instance.getData( whichItem.id );

        BJItemType bj = new BJItemType();
        bj.type = item.baseData.type;
        return bj;
    }

    public static void SetItemDropID( BJItem whichItem , int unitId )
    {
        // native code

        W3ItemManager.instance.SetItemDropID( whichItem.id , unitId );
    }

    public static Transform unitsTrans = null;
    //============================================================================
    // Unit API
    // Facing arguments are specified in degrees
    public static BJUnit CreateUnit( BJPlayer whichPlayer , int unitid , double x , double y , double face )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3UnitManager.instance.createUnit( whichPlayer.id , unitid , (float)x , (float)y , (float)face , false );

        return bj;
    }

    public static BJUnit CreateUnitByName( BJPlayer whichPlayer , string unitname , double x , double y , double face )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3UnitManager.instance.createUnit( whichPlayer.id , UnitId( unitname ) , (float)x , (float)y , (float)face , false );

        return bj;
    }

    public static BJUnit CreateUnitAtLoc( BJPlayer whichPlayer , int unitid , BJLocation whichLocation , double face )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3UnitManager.instance.createUnit( whichPlayer.id , unitid , (float)whichLocation.x , (float)whichLocation.y , (float)face , false );

        return bj;
    }

    public static BJUnit CreateUnitAtLocByName( BJPlayer whichPlayer , string unitname , BJLocation whichLocation , double face )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3UnitManager.instance.createUnit( whichPlayer.id , UnitId( unitname ) , (float)whichLocation.x , (float)whichLocation.y , (float)face , false );

        return bj;
    }

    public static BJUnit CreateCorpse( BJPlayer whichPlayer , int unitid , double x , double y , double face )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3UnitManager.instance.createUnit( whichPlayer.id , unitid , (float)x , (float)y , (float)face , true );

        return bj;
    }

    public static void KillUnit( BJUnit whichUnit )
    {
        // native code

        W3BaseManager.instance.kill( whichUnit.id );
    }

    public static void RemoveUnit( BJUnit whichUnit )
    {
        // native code

        W3BaseManager.instance.remove( whichUnit.id );
    }

    public static void ShowUnit( BJUnit whichUnit , bool show )
    {
        // native code

        W3BaseManager.instance.show( whichUnit.id , show );
    }

    public static void SetUnitState( BJUnit whichUnit , BJUnitState whichUnitState , double newVal )
    {
        // native code

        W3UnitManager.instance.setUnitState( whichUnit.id , whichUnitState.state , (float)newVal );
    }

    public static void SetUnitX( BJUnit whichUnit , double newX )
    {
        // native code

        W3BaseManager.instance.setPosition( whichUnit.id , (float)newX , 0.0f );
    }

    public static void SetUnitY( BJUnit whichUnit , double newY )
    {
        // native code

        W3BaseManager.instance.setPosition( whichUnit.id , 0.0f , (float)newY );
    }

    public static void SetUnitPosition( BJUnit whichUnit , double newX , double newY )
    {
        // native code

        W3BaseManager.instance.setPosition( whichUnit.id , (float)newX , (float)newY );
    }

    public static void SetUnitPositionLoc( BJUnit whichUnit , BJLocation whichLocation )
    {
        // native code

        W3BaseManager.instance.setPosition( whichUnit.id , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static void SetUnitFacing( BJUnit whichUnit , double facingAngle )
    {
        // native code

        W3UnitManager.instance.setUnitFacing( whichUnit.id , (float)facingAngle );
    }

    public static void SetUnitFacingTimed( BJUnit whichUnit , double facingAngle , double duration )
    {
        // native code

        W3UnitManager.instance.setUnitFacingTimed( whichUnit.id , (float)facingAngle , (float)duration );
    }

    public static void SetUnitMoveSpeed( BJUnit whichUnit , double newSpeed )
    {
        // native code

        W3UnitManager.instance.setUnitMoveSpeed( whichUnit.id , (float)newSpeed );
    }

    public static void SetUnitFlyHeight( BJUnit whichUnit , double newHeight , double rate )
    {
        // native code

        W3UnitManager.instance.setUnitFlyHeight( whichUnit.id , (float)newHeight , (float)rate );
    }

    public static void SetUnitTurnSpeed( BJUnit whichUnit , double newTurnSpeed )
    {
        // native code

        W3UnitManager.instance.setUnitTurnSpeed( whichUnit.id , (float)newTurnSpeed );
    }

    public static void SetUnitPropWindow( BJUnit whichUnit , double newPropWindowAngle )
    {
        // native code

        W3UnitManager.instance.setUnitPropWindow( whichUnit.id , (float)newPropWindowAngle );
    }

    public static void SetUnitAcquireRange( BJUnit whichUnit , double newAcquireRange )
    {
        // native code

        W3UnitManager.instance.setUnitAcquireRange( whichUnit.id , (float)newAcquireRange );
    }

    public static void SetUnitCreepGuard( BJUnit whichUnit , bool creepGuard )
    {
        // native code

        W3UnitManager.instance.setUnitCreepGuard( whichUnit.id , creepGuard );
    }

    public static double GetUnitAcquireRange( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.acquireRange;
    }

    public static double GetUnitTurnSpeed( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.turnSpeed;
    }

    public static double GetUnitPropWindow( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.propWindowAngle;
    }

    public static double GetUnitFlyHeight( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.flyHeight;
    }

    public static double GetUnitDefaultAcquireRange( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.defaultAcquireRange;
    }

    public static double GetUnitDefaultTurnSpeed( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.defaultAcquireRange;
    }

    public static double GetUnitDefaultPropWindow( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.defaultPropWindowAngle;
    }

    public static double GetUnitDefaultFlyHeight( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.defaultFlyHeight;
    }

    public static void SetUnitOwner( BJUnit whichUnit , BJPlayer whichPlayer , bool changeColor )
    {
        // native code

        W3UnitManager.instance.setUnitOwner( whichUnit.id , whichPlayer.id , changeColor );
    }

    public static void SetUnitColor( BJUnit whichUnit , BJPlayerColor whichColor )
    {
        // native code

        W3UnitManager.instance.setUnitColor( whichUnit.id , whichColor.color );
    }

    public static void SetUnitScale( BJUnit whichUnit , double scaleX , double scaleY , double scaleZ )
    {
        // native code

        W3UnitManager.instance.setUnitScale( whichUnit.id , (float)scaleX , (float)scaleY , (float)scaleZ );
    }

    public static void SetUnitTimeScale( BJUnit whichUnit , double timeScale )
    {
        // native code

        W3UnitManager.instance.setUnitTimeScale( whichUnit.id , (float)timeScale );
    }

    public static void SetUnitBlendTime( BJUnit whichUnit , double blendTime )
    {
        // native code

        W3UnitManager.instance.setUnitBlendTime( whichUnit.id , (float)blendTime );
    }

    public static void SetUnitVertexColor( BJUnit whichUnit , int red , int green , int blue , int alpha )
    {
        // native code

        W3UnitManager.instance.setUnitVertexColor( whichUnit.id , red , green , blue , alpha );
    }

    public static void QueueUnitAnimation( BJUnit whichUnit , string whichAnimation )
    {
        // native code

        W3UnitManager.instance.queueUnitAnimation( whichUnit.id , whichAnimation );
    }

    public static void SetUnitAnimation( BJUnit whichUnit , string whichAnimation )
    {
        // native code

        W3UnitManager.instance.setUnitAnimation( whichUnit.id , whichAnimation );
    }

    public static void SetUnitAnimationByIndex( BJUnit whichUnit , int whichAnimation )
    {
        // native code

        W3UnitManager.instance.setUnitAnimationByIndex( whichUnit.id , whichAnimation );
    }

    public static void SetUnitAnimationWithRarity( BJUnit whichUnit , string whichAnimation , BJRarityControl rarity )
    {
        // native code

        W3UnitManager.instance.setUnitAnimationWithRarity( whichUnit.id , whichAnimation , rarity.control );
    }

    public static void AddUnitAnimationProperties( BJUnit whichUnit , string animProperties , bool add )
    {
        // native code

        W3UnitManager.instance.addUnitAnimationProperties( whichUnit.id , animProperties , add );
    }

    public static void SetUnitLookAt( BJUnit whichUnit , string whichBone , BJUnit lookAtTarget , double offsetX , double offsetY , double offsetZ )
    {
        // native code

        W3UnitManager.instance.setUnitLookAt( whichUnit.id , whichBone , lookAtTarget.id , (float)offsetX , (float)offsetY , (float)offsetZ );
    }

    public static void ResetUnitLookAt( BJUnit whichUnit )
    {
        // native code

        W3UnitManager.instance.resetUnitLookAt( whichUnit.id );
    }

    public static void SetUnitRescuable( BJUnit whichUnit , BJPlayer byWhichPlayer , bool flag )
    {
        // native code

        W3UnitManager.instance.setUnitRescuable( whichUnit.id , byWhichPlayer.id , flag );
    }

    public static void SetUnitRescueRange( BJUnit whichUnit , double range )
    {
        // native code

        W3UnitManager.instance.setUnitRescueRange( whichUnit.id , (float)range );
    }

    public static void SetHeroStr( BJUnit whichHero , int newStr , bool permanent )
    {
        // native code

        W3UnitManager.instance.setHeroStr( whichHero.id , newStr , permanent );
    }

    public static void SetHeroAgi( BJUnit whichHero , int newAgi , bool permanent )
    {
        // native code

        W3UnitManager.instance.setHeroAgi( whichHero.id , newAgi , permanent );
    }

    public static void SetHeroInt( BJUnit whichHero , int newInt , bool permanent )
    {
        // native code

        W3UnitManager.instance.setHeroInt( whichHero.id , newInt , permanent );
    }

    public static int GetHeroStr( BJUnit whichHero , bool includeBonuses )
    {
        // native code

        return W3UnitManager.instance.GetHeroStr( whichHero.id , includeBonuses );
    }

    public static int GetHeroAgi( BJUnit whichHero , bool includeBonuses )
    {
        // native code

        return W3UnitManager.instance.GetHeroAgi( whichHero.id , includeBonuses );
    }

    public static int GetHeroInt( BJUnit whichHero , bool includeBonuses )
    {
        // native code

        return W3UnitManager.instance.GetHeroInt( whichHero.id , includeBonuses );
    }

    public static bool UnitStripHeroLevel( BJUnit whichHero , int howManyLevels )
    {
        // native code
        return W3UnitManager.instance.unitStripHeroLevel( whichHero.id , howManyLevels );
    }

    public static int GetHeroXP( BJUnit whichHero )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichHero.id );
        return unit.baseData.heroXP;
    }

    public static void SetHeroXP( BJUnit whichHero , int newXpVal , bool showEyeCandy )
    {
        // native code

        W3UnitManager.instance.setHeroXP( whichHero.id , newXpVal , showEyeCandy );
    }

    public static int GetHeroSkillPoints( BJUnit whichHero )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichHero.id );
        return unit.baseData.heroSkillPoints;
    }

    public static bool UnitModifySkillPoints( BJUnit whichHero , int skillPointDelta )
    {
        // native code
        return W3UnitManager.instance.unitModifySkillPoints( whichHero.id , skillPointDelta );
    }

    public static void AddHeroXP( BJUnit whichHero , int xpToAdd , bool showEyeCandy )
    {
        // native code

        W3UnitManager.instance.addHeroXP( whichHero.id , xpToAdd , showEyeCandy );
    }

    public static void SetHeroLevel( BJUnit whichHero , int level , bool showEyeCandy )
    {
        // native code

        W3UnitManager.instance.setHeroLevel( whichHero.id , level , showEyeCandy );
    }

    public static int GetHeroLevel( BJUnit whichHero )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichHero.id );
        return unit.baseData.heroLevel;
    }

    public static void SuspendHeroXP( BJUnit whichHero , bool flag )
    {
        // native code

        W3UnitManager.instance.suspendHeroXP( whichHero.id , flag );
    }

    public static bool IsSuspendedXP( BJUnit whichHero )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichHero.id );
        return unit.baseData.heroXPSuspend;
    }

    public static void SelectHeroSkill( BJUnit whichHero , int abilcode )
    {
        // native code

        W3UnitManager.instance.selectHeroSkill( whichHero.id , abilcode );
    }

    public static bool ReviveHero( BJUnit whichHero , double x , double y , bool doEyecandy )
    {
        // native code

        return W3UnitManager.instance.reviveHero( whichHero.id , (float)x , (float)y , doEyecandy );
    }

    public static bool ReviveHeroLoc( BJUnit whichHero , BJLocation loc , bool doEyecandy )
    {
        // native code

        return W3UnitManager.instance.reviveHero( whichHero.id , (float)loc.x , (float)loc.y , doEyecandy );
    }

    public static void SetUnitExploded( BJUnit whichUnit , bool exploded )
    {
        // native code

        W3UnitManager.instance.setUnitExploded( whichUnit.id , exploded );
    }

    public static void SetUnitInvulnerable( BJUnit whichUnit , bool flag )
    {
        // native code

        W3BaseManager.instance.setInvulnerable( whichUnit.id , flag );
    }

    public static void PauseUnit( BJUnit whichUnit , bool flag )
    {
        // native code

        W3UnitManager.instance.pauseUnit( whichUnit.id , flag );
    }

    public static bool IsUnitPaused( BJUnit whichHero )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichHero.id );
        return unit.baseData.pause;
    }

    public static void SetUnitPathing( BJUnit whichUnit , bool flag )
    {
        // native code

        W3UnitManager.instance.setUnitPathing( whichUnit.id , flag );
    }

    public static void ClearSelection()
    {
        // native code

        W3UnitManager.instance.clearSelection();
    }

    public static void SelectUnit( BJUnit whichUnit , bool flag )
    {
        // native code

        W3UnitManager.instance.selectUnit( whichUnit.id , flag );
    }

    public static int GetUnitPointValue( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.points;
    }

    public static int GetUnitPointValueByType( int unitType )
    {
        // native code

        W3UnitDataConfigData d = W3UnitDataConfig.instance.getData( unitType );
        return d.points;
    }

    //native        SetUnitPointValueByType takes integer unitType, integer newPointValue returns nothing
    public static bool UnitAddItem( BJUnit whichUnit , BJItem whichItem )
    {
        // native code

        return W3UnitManager.instance.unitAddItem( whichUnit.id , whichItem.id );
    }

    public static BJItem UnitAddItemById( BJUnit whichUnit , int itemId )
    {
        // native code

        BJItem bj = new BJItem();
        bj.id = W3UnitManager.instance.unitAddItemById( whichUnit.id , itemId );
        return bj;
    }

    public static bool UnitAddItemToSlotById( BJUnit whichUnit , int itemId , int itemSlot )
    {
        // native code

        return W3UnitManager.instance.unitAddItemToSlotById( whichUnit.id , itemId , itemSlot );
    }

    public static void UnitRemoveItem( BJUnit whichUnit , BJItem whichItem )
    {
        // native code

        W3UnitManager.instance.unitRemoveItem( whichUnit.id , whichItem.id );
    }

    public static BJItem UnitRemoveItemFromSlot( BJUnit whichUnit , int itemSlot )
    {
        // native code

        BJItem bj = new BJItem();
        bj.id = W3UnitManager.instance.unitRemoveItemFromSlot( whichUnit.id , itemSlot );

        return bj;
    }

    public static bool UnitHasItem( BJUnit whichUnit , BJItem whichItem )
    {
        // native code

        return W3UnitManager.instance.unitHasItem( whichUnit.id , whichItem.id );
    }

    public static BJItem UnitItemInSlot( BJUnit whichUnit , int itemSlot )
    {
        // native code

        BJItem bj = new BJItem();
        bj.id = W3UnitManager.instance.unitItemInSlot( whichUnit.id , itemSlot );
        return bj;
    }

    public static bool UnitUseItem( BJUnit whichUnit , BJItem whichItem )
    {
        // native code

        return W3UnitManager.instance.unitUseItem( whichUnit.id , whichItem.id );
    }

    public static bool UnitUseItemPoint( BJUnit whichUnit , BJItem whichItem , double x , double y )
    {
        // native code

        return W3UnitManager.instance.unitUseItemPoint( whichUnit.id , whichItem.id , (float)x , (float)y );
    }

    public static bool UnitUseItemTarget( BJUnit whichUnit , BJItem whichItem , BJWidget target )
    {
        // native code

        return W3UnitManager.instance.unitUseItemTarget( whichUnit.id , whichItem.id , target.id );
    }

    public static double GetUnitX( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.x;
    }

    public static double GetUnitY( BJUnit whichUnit )
    {
        // native code
        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.z;
    }

    public static BJLocation GetUnitLoc( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );

        BJLocation bj = new BJLocation();
        bj.x = unit.baseData.x;
        bj.y = unit.baseData.z;
        return bj;
    }

    public static double GetUnitFacing( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.facing;
    }

    public static double GetUnitMoveSpeed( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.moveSpeed;
    }

    public static double GetUnitDefaultMoveSpeed( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.defaultMoveSpeed;
    }

    public static double GetUnitState( BJUnit whichUnit , BJUnitState whichUnitState )
    {
        // native code

        //             W3Base unit = W3NativeBaseData.instance.getData( whichUnit.id );
        //             return unit.baseData.unitStateValue;

        return 0.0;
    }

    public static BJPlayer GetOwningPlayer( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );

        BJPlayer bj = new BJPlayer();
        bj.id = unit.baseData.playerID;
        return bj;
    }

    public static int GetUnitTypeId( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.typeID;
    }

    public static BJRace GetUnitRace( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );

        BJRace bj = new BJRace();
        bj.race = unit.baseData.race;
        return bj;
    }

    public static string GetUnitName( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.name;
    }

    public static int GetUnitFoodUsed( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.foodUsed;
    }

    public static int GetUnitFoodMade( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.foodMade;
    }

    public static int GetFoodMade( int unitId )
    {
        // native code

        W3UnitBalanceConfigData d = W3UnitBalanceConfig.instance.getData( unitId );
        return d.fmade;
    }

    public static int GetFoodUsed( int unitId )
    {
        // native code

        W3UnitBalanceConfigData d = W3UnitBalanceConfig.instance.getData( unitId );
        return d.fused;
    }

    public static void SetUnitUseFood( BJUnit whichUnit , bool useFood )
    {
        // native code

        W3UnitManager.instance.setUnitUseFood( whichUnit.id , useFood );
    }

    public static bool IsUnitInGroup( BJUnit whichUnit , BJGroup whichGroup )
    {
        // native code

        return W3UnitManager.instance.isUnitInGroup( whichUnit.id , whichGroup.id );
    }

    public static bool IsUnitInForce( BJUnit whichUnit , BJForce whichForce )
    {
        // native code

        return W3UnitManager.instance.isUnitInForce( whichUnit.id , whichForce.force );
    }

    public static bool IsUnitOwnedByPlayer( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitOwnedByPlayer( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitAlly( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitAlly( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitEnemy( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitEnemy( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitVisible( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitVisible( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitDetected( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitDetected( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitInvisible( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitInvisible( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitFogged( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitFogged( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitMasked( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitMasked( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitSelected( BJUnit whichUnit , BJPlayer whichPlayer )
    {
        // native code

        return W3UnitManager.instance.isUnitSelected( whichUnit.id , whichPlayer.id );
    }

    public static bool IsUnitRace( BJUnit whichUnit , BJRace whichRace )
    {
        // native code

        return W3UnitManager.instance.isUnitRace( whichUnit.id , whichRace.race );
    }

    public static bool IsUnitType( BJUnit whichUnit , BJUnitType whichUnitType )
    {
        // native code

        return W3UnitManager.instance.isUnitType( whichUnit.id , whichUnitType.type );
    }

    public static bool IsUnit( BJUnit whichUnit , BJUnit whichSpecifiedUnit )
    {
        // native code

        return W3UnitManager.instance.isUnit( whichUnit.id , whichSpecifiedUnit.id );
    }

    public static bool IsUnitInRange( BJUnit whichUnit , BJUnit otherUnit , double distance )
    {
        // native code

        return W3UnitManager.instance.isUnitInRange( whichUnit.id , otherUnit.id , (float)distance );
    }

    public static bool IsUnitInRangeXY( BJUnit whichUnit , double x , double y , double distance )
    {
        // native code

        return W3UnitManager.instance.isUnitInRangeXY( whichUnit.id , (float)x , (float)y , (float)distance );
    }

    public static bool IsUnitInRangeLoc( BJUnit whichUnit , BJLocation whichLocation , double distance )
    {
        // native code

        return W3UnitManager.instance.isUnitInRangeXY( whichUnit.id , (float)whichLocation.x , (float)whichLocation.y , (float)distance );
    }

    public static bool IsUnitHidden( BJUnit whichUnit )
    {
        // native code

        return W3UnitManager.instance.isUnitHidden( whichUnit.id );
    }

    public static bool IsUnitIllusion( BJUnit whichUnit )
    {
        // native code

        return W3UnitManager.instance.isUnitIllusion( whichUnit.id );
    }

    public static bool IsUnitInTransport( BJUnit whichUnit , BJUnit whichTransport )
    {
        // native code

        return W3UnitManager.instance.isUnitInTransport( whichUnit.id , whichTransport.id );
    }

    public static bool IsUnitLoaded( BJUnit whichUnit )
    {
        // native code

        return W3UnitManager.instance.isUnitLoaded( whichUnit.id );
    }

    public static bool IsHeroUnitId( int unitId )
    {
        // native code

        W3UnitBalanceConfigData d = W3UnitBalanceConfig.instance.getData( unitId );
        return d.hero == 1;
    }

    public static bool IsUnitIdType( int unitId , BJUnitType whichUnitType )
    {
        // native code

        W3UnitDataConfigData d = W3UnitDataConfig.instance.getData( unitId );

        for ( int i = 0 ; i < d.type.Length ; i++ )
        {
            if ( (int)d.type[ i ] == whichUnitType.type )
            {
                return true;
            }
        }

        return false;
    }

    public static void UnitShareVision( BJUnit whichUnit , BJPlayer whichPlayer , bool share )
    {
        // native code

        W3UnitManager.instance.unitShareVision( whichUnit.id , whichPlayer.id , share );
    }

    public static void UnitSuspendDecay( BJUnit whichUnit , bool suspend )
    {
        // native code

        W3UnitManager.instance.unitSuspendDecay( whichUnit.id , suspend );
    }

    public static bool UnitAddAbility( BJUnit whichUnit , int abilityId )
    {
        // native code

        return W3UnitManager.instance.unitAddAbility( whichUnit.id , abilityId );
    }

    public static bool UnitRemoveAbility( BJUnit whichUnit , int abilityId )
    {
        // native code

        return W3UnitManager.instance.unitRemoveAbility( whichUnit.id , abilityId );
    }

    public static void UnitRemoveBuffs( BJUnit whichUnit , bool removePositive , bool removeNegative )
    {
        // native code

        W3UnitManager.instance.unitRemoveBuffs( whichUnit.id , removePositive , removeNegative );
    }

    public static void UnitRemoveBuffsEx( BJUnit whichUnit , bool removePositive , bool removeNegative , bool magic , bool physical , bool timedLife , bool aura , bool autoDispel )
    {
        // native code

        W3UnitManager.instance.unitRemoveBuffsEx( whichUnit.id , removePositive , removeNegative , magic , physical , timedLife , aura , autoDispel );
    }

    public static bool UnitHasBuffsEx( BJUnit whichUnit , bool removePositive , bool removeNegative , bool magic , bool physical , bool timedLife , bool aura , bool autoDispel )
    {
        // native code

        return W3UnitManager.instance.unitHasBuffsEx( whichUnit.id , removePositive , removeNegative , magic , physical , timedLife , aura , autoDispel );
    }

    public static int UnitCountBuffsEx( BJUnit whichUnit , bool removePositive , bool removeNegative , bool magic , bool physical , bool timedLife , bool aura , bool autoDispel )
    {
        // native code

        return W3UnitManager.instance.unitCountBuffsEx( whichUnit.id , removePositive , removeNegative , magic , physical , timedLife , aura , autoDispel );
    }

    public static void UnitAddSleep( BJUnit whichUnit , bool add )
    {
        // native code

        W3UnitManager.instance.unitAddSleep( whichUnit.id , add );
    }

    public static bool UnitCanSleep( BJUnit whichUnit )
    {
        // native code

        return W3UnitManager.instance.unitCanSleep( whichUnit.id );
    }

    public static void UnitAddSleepPerm( BJUnit whichUnit , bool add )
    {
        // native code

        W3UnitManager.instance.unitAddSleepPerm( whichUnit.id , add );
    }

    public static bool UnitCanSleepPerm( BJUnit whichUnit )
    {
        // native code

        return W3UnitManager.instance.unitCanSleepPerm( whichUnit.id );
    }

    public static bool UnitIsSleeping( BJUnit whichUnit )
    {
        // native code

        return W3UnitManager.instance.unitIsSleeping( whichUnit.id );
    }

    public static void UnitWakeUp( BJUnit whichUnit )
    {
        // native code

        W3UnitManager.instance.unitWakeUp();
    }

    public static void UnitApplyTimedLife( BJUnit whichUnit , int buffId , double duration )
    {
        // native code

        W3UnitManager.instance.unitApplyTimedLife( whichUnit.id , buffId , (float)duration );
    }

    public static bool UnitIgnoreAlarm( BJUnit whichUnit , bool flag )
    {
        // native code

        return W3UnitManager.instance.unitIgnoreAlarm( whichUnit.id , flag );
    }

    public static bool UnitIgnoreAlarmToggled( BJUnit whichUnit )
    {
        // native code

        return W3UnitManager.instance.unitIgnoreAlarmToggled( whichUnit.id );
    }

    public static void UnitResetCooldown( BJUnit whichUnit )
    {
        // native code

        W3UnitManager.instance.unitResetCooldown( whichUnit.id );
    }

    public static void UnitSetConstructionProgress( BJUnit whichUnit , int constructionPercentage )
    {
        // native code

        W3UnitManager.instance.unitSetConstructionProgress( whichUnit.id , constructionPercentage );
    }

    public static void UnitSetUpgradeProgress( BJUnit whichUnit , int upgradePercentage )
    {
        // native code

        W3UnitManager.instance.unitSetUpgradeProgress( whichUnit.id , upgradePercentage );
    }

    public static void UnitPauseTimedLife( BJUnit whichUnit , bool flag )
    {
        // native code

        W3UnitManager.instance.unitPauseTimedLife( whichUnit.id , flag );
    }

    public static void UnitSetUsesAltIcon( BJUnit whichUnit , bool flag )
    {
        // native code

        W3UnitManager.instance.unitSetUsesAltIcon( whichUnit.id , flag );
    }

    public static bool IssueImmediateOrder( BJUnit whichUnit , string order )
    {
        // native code

        return W3UnitManager.instance.issueImmediateOrder( whichUnit.id , OrderId( order ) );
    }

    public static bool IssueImmediateOrderById( BJUnit whichUnit , int order )
    {
        // native code

        return W3UnitManager.instance.issueImmediateOrder( whichUnit.id , order );
    }

    public static bool IssuePointOrder( BJUnit whichUnit , string order , double x , double y )
    {
        // native code

        return W3UnitManager.instance.issuePointOrder( whichUnit.id , OrderId( order ) , (float)x , (float)y );
    }

    public static bool IssuePointOrderLoc( BJUnit whichUnit , string order , BJLocation whichLocation )
    {
        // native code

        return W3UnitManager.instance.issuePointOrder( whichUnit.id , OrderId( order ) , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static bool IssuePointOrderById( BJUnit whichUnit , int order , double x , double y )
    {
        // native code

        return W3UnitManager.instance.issuePointOrder( whichUnit.id , order , (float)x , (float)y );
    }

    public static bool IssuePointOrderByIdLoc( BJUnit whichUnit , int order , BJLocation whichLocation )
    {
        // native code

        return W3UnitManager.instance.issuePointOrder( whichUnit.id , order , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static bool IssueTargetOrder( BJUnit whichUnit , string order , BJWidget targetWidget )
    {
        // native code

        return W3UnitManager.instance.issueTargetOrder( whichUnit.id , OrderId( order ) , targetWidget.id );
    }

    public static bool IssueTargetOrderById( BJUnit whichUnit , int order , BJWidget targetWidget )
    {
        // native code

        return W3UnitManager.instance.issueTargetOrder( whichUnit.id , order , targetWidget.id );
    }

    public static bool IssueInstantTargetOrder( BJUnit whichUnit , string order , BJWidget targetWidget , BJWidget instantTargetWidget )
    {
        // native code

        return W3UnitManager.instance.issueInstantTargetOrder( whichUnit.id , OrderId( order ) , targetWidget.id , instantTargetWidget.id );
    }

    public static bool IssueInstantTargetOrderById( BJUnit whichUnit , int order , BJWidget targetWidget , BJWidget instantTargetWidget )
    {
        // native code

        return W3UnitManager.instance.issueInstantTargetOrder( whichUnit.id , order , targetWidget.id , instantTargetWidget.id );
    }

    public static bool IssueBuildOrder( BJUnit whichPeon , string unitToBuild , double x , double y )
    {
        // native code

        return W3UnitManager.instance.issueBuildOrder( whichPeon.id , UnitId( unitToBuild ) , (float)x , (float)y );
    }

    public static bool IssueBuildOrderById( BJUnit whichPeon , int unitId , double x , double y )
    {
        // native code

        return W3UnitManager.instance.issueBuildOrder( whichPeon.id , unitId , (float)x , (float)y );
    }

    public static bool IssueNeutralImmediateOrder( BJPlayer forWhichPlayer , BJUnit neutralStructure , string unitToBuild )
    {
        // native code

        return W3UnitManager.instance.issueNeutralImmediateOrder( forWhichPlayer.id , neutralStructure.id , UnitId( unitToBuild ) );
    }

    public static bool IssueNeutralImmediateOrderById( BJPlayer forWhichPlayer , BJUnit neutralStructure , int unitId )
    {
        // native code

        return W3UnitManager.instance.issueNeutralImmediateOrder( forWhichPlayer.id , neutralStructure.id , unitId );
    }

    public static bool IssueNeutralPointOrder( BJPlayer forWhichPlayer , BJUnit neutralStructure , string unitToBuild , double x , double y )
    {
        // native code

        return W3UnitManager.instance.issueNeutralPointOrder( forWhichPlayer.id , neutralStructure.id , UnitId( unitToBuild ) , (float)x , (float)y );
    }

    public static bool IssueNeutralPointOrderById( BJPlayer forWhichPlayer , BJUnit neutralStructure , int unitId , double x , double y )
    {
        // native code

        return W3UnitManager.instance.issueNeutralPointOrder( forWhichPlayer.id , neutralStructure.id , unitId , (float)x , (float)y );
    }

    public static bool IssueNeutralTargetOrder( BJPlayer forWhichPlayer , BJUnit neutralStructure , string unitToBuild , BJWidget target )
    {
        // native code

        return W3UnitManager.instance.issueNeutralTargetOrder( forWhichPlayer.id , neutralStructure.id , UnitId( unitToBuild ) , target.id );
    }

    public static bool IssueNeutralTargetOrderById( BJPlayer forWhichPlayer , BJUnit neutralStructure , int unitId , BJWidget target )
    {
        // native code

        return W3UnitManager.instance.issueNeutralTargetOrder( forWhichPlayer.id , neutralStructure.id , unitId , target.id );
    }

    public static void SetResourceAmount( BJUnit whichUnit , int amount )
    {
        // native code

        W3UnitManager.instance.setResourceAmount( whichUnit.id , amount );
    }

    public static void AddResourceAmount( BJUnit whichUnit , int amount )
    {
        // native code

        W3UnitManager.instance.addResourceAmount( whichUnit.id , amount );
    }

    public static int GetResourceAmount( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.resourceAmount;
    }

    public static double WaygateGetDestinationX( BJUnit waygate )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( waygate.id );
        return unit.baseData.destinationX;
    }

    public static double WaygateGetDestinationY( BJUnit waygate )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( waygate.id );
        return unit.baseData.destinationZ;
    }

    public static void WaygateSetDestination( BJUnit waygate , double x , double y )
    {
        // native code

        W3UnitManager.instance.waygateSetDestination( waygate.id , (float)x , (float)y );
    }

    public static void WaygateActivate( BJUnit waygate , bool activate )
    {
        // native code

        W3UnitManager.instance.waygateActivate( waygate.id , activate );
    }

    public static bool WaygateIsActive( BJUnit waygate )
    {
        // native code
        return W3UnitManager.instance.waygateIsActive( waygate.id );
    }

    public static void AddItemToAllStock( int itemId , int currentStock , int stockMax )
    {
        // native code

        W3UnitManager.instance.addItemToAllStock( itemId , currentStock , stockMax );
    }

    public static void AddItemToStock( BJUnit whichUnit , int itemId , int currentStock , int stockMax )
    {
        // native code

        W3UnitManager.instance.addItemToStock( whichUnit.id , itemId , currentStock , stockMax );
    }

    public static void AddUnitToAllStock( int unitId , int currentStock , int stockMax )
    {
        // native code

        W3UnitManager.instance.addUnitToAllStock( unitId , currentStock , stockMax );
    }

    public static void AddUnitToStock( BJUnit whichUnit , int unitId , int currentStock , int stockMax )
    {
        // native code

        W3UnitManager.instance.addUnitToStock( whichUnit.id , unitId , currentStock , stockMax );
    }

    public static void RemoveItemFromAllStock( int itemId )
    {
        // native code

        W3UnitManager.instance.removeItemFromAllStock( itemId );
    }

    public static void RemoveItemFromStock( BJUnit whichUnit , int itemId )
    {
        // native code

        W3UnitManager.instance.removeItemFromStock( whichUnit.id , itemId );
    }

    public static void RemoveUnitFromAllStock( int unitId )
    {
        // native code

        W3UnitManager.instance.removeUnitFromAllStock( unitId );
    }

    public static void RemoveUnitFromStock( BJUnit whichUnit , int unitId )
    {
        // native code

        W3UnitManager.instance.removeUnitFromStock( whichUnit.id , unitId );
    }

    public static void SetAllItemTypeSlots( int slots )
    {
        // native code

        W3UnitManager.instance.setAllItemTypeSlots( slots );
    }

    public static void SetAllUnitTypeSlots( int slots )
    {
        // native code

        W3UnitManager.instance.setAllUnitTypeSlots( slots );
    }

    public static void SetItemTypeSlots( BJUnit whichUnit , int slots )
    {
        // native code

        W3UnitManager.instance.setItemTypeSlots( whichUnit.id , slots );
    }

    public static void SetUnitTypeSlots( BJUnit whichUnit , int slots )
    {
        // native code

        W3UnitManager.instance.setUnitTypeSlots( whichUnit.id , slots );
    }

    public static int GetUnitUserData( BJUnit whichUnit )
    {
        // native code

        W3Base unit = W3BaseManager.instance.getData( whichUnit.id );
        return unit.baseData.userData;
    }

    public static void SetUnitUserData( BJUnit whichUnit , int data )
    {
        // native code

        W3UnitManager.instance.setUnitUserData( whichUnit.id , data );
    }

    //============================================================================
    // Player API
    public static BJPlayer Player( int number )
    {
        // native code

        BJPlayer bj = new BJPlayer();
        bj.id = number;

        return bj;
    }

    public static BJPlayer GetLocalPlayer()
    {
        // native code

        BJPlayer bj = new BJPlayer();
        bj.id = W3PlayerManager.instance.localPlayer;

        return bj;
    }

    public static bool IsPlayerAlly( BJPlayer whichPlayer , BJPlayer otherPlayer )
    {
        // native code

        return W3PlayerManager.instance.isPlayerAlly( whichPlayer.id , otherPlayer.id );
    }

    public static bool IsPlayerEnemy( BJPlayer whichPlayer , BJPlayer otherPlayer )
    {
        // native code

        return W3PlayerManager.instance.isPlayerEnemy( whichPlayer.id , otherPlayer.id );
    }

    public static bool IsPlayerInForce( BJPlayer whichPlayer , BJForce whichForce )
    {
        // native code

        return W3PlayerManager.instance.isPlayerInForce( whichPlayer.id , whichForce.force );
    }

    public static bool IsPlayerObserver( BJPlayer whichPlayer )
    {
        // native code

        W3PlayerData player = W3PlayerManager.instance.getPlayer( whichPlayer.id );
        return player.observer;
    }

    public static bool IsVisibleToPlayer( double x , double y , BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.isVisibleToPlayer( whichPlayer.id , (float)x , (float)y );
    }

    public static bool IsLocationVisibleToPlayer( BJLocation whichLocation , BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.isVisibleToPlayer( whichPlayer.id , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static bool IsFoggedToPlayer( double x , double y , BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.isFoggedToPlayer( whichPlayer.id , (float)x , (float)y );
    }

    public static bool IsLocationFoggedToPlayer( BJLocation whichLocation , BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.isFoggedToPlayer( whichPlayer.id , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static bool IsMaskedToPlayer( double x , double y , BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.isMaskedToPlayer( whichPlayer.id , (float)x , (float)y );
    }

    public static bool IsLocationMaskedToPlayer( BJLocation whichLocation , BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.isMaskedToPlayer( whichPlayer.id , (float)whichLocation.x , (float)whichLocation.y );
    }

    public static BJRace GetPlayerRace( BJPlayer whichPlayer )
    {
        // native code

        W3PlayerData player = W3PlayerManager.instance.getPlayer( whichPlayer.id );
        BJRace race = new BJRace();
        race.race = player.race;
        return race;
    }

    public static int GetPlayerId( BJPlayer whichPlayer )
    {
        // native code

        return whichPlayer.id;
    }

    public static int GetPlayerUnitCount( BJPlayer whichPlayer , bool includeIncomplete )
    {
        // native code

        return W3PlayerManager.instance.getPlayerUnitCount( whichPlayer.id );
    }

    public static int GetPlayerTypedUnitCount( BJPlayer whichPlayer , string unitName , bool includeIncomplete , bool includeUpgrades )
    {
        // native code

        return W3PlayerManager.instance.getPlayerTypedUnitCount( whichPlayer.id , unitName , includeIncomplete , includeUpgrades );
    }

    public static int GetPlayerStructureCount( BJPlayer whichPlayer , bool includeIncomplete )
    {
        // native code

        return W3PlayerManager.instance.getPlayerStructureCount( whichPlayer.id , includeIncomplete );
    }

    public static int GetPlayerState( BJPlayer whichPlayer , BJPlayerState whichPlayerState )
    {
        // native code

        return W3PlayerManager.instance.getPlayerState( whichPlayer.id , whichPlayerState.state );
    }

    public static bool GetPlayerAlliance( BJPlayer sourcePlayer , BJPlayer otherPlayer , BJAllianceType whichAllianceSetting )
    {
        // native code

        return W3PlayerManager.instance.getPlayerAlliance( sourcePlayer.id , otherPlayer.id , whichAllianceSetting.type );
    }

    public static double GetPlayerHandicap( BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.getPlayerHandicap( whichPlayer.id );
    }

    public static double GetPlayerHandicapXP( BJPlayer whichPlayer )
    {
        // native code

        return W3PlayerManager.instance.getPlayerHandicapXP( whichPlayer.id );
    }

    public static void SetPlayerHandicap( BJPlayer whichPlayer , double handicap )
    {
        // native code

        W3PlayerManager.instance.setPlayerHandicap( whichPlayer.id , (float)handicap );
    }

    public static void SetPlayerHandicapXP( BJPlayer whichPlayer , double handicap )
    {
        // native code

        W3PlayerManager.instance.setPlayerHandicapXP( whichPlayer.id , (float)handicap );
    }

    public static void SetPlayerTechMaxAllowed( BJPlayer whichPlayer , int techid , int maximum )
    {
        // native code

        W3PlayerManager.instance.setPlayerTechMaxAllowed( whichPlayer.id , techid , maximum );
    }

    public static int GetPlayerTechMaxAllowed( BJPlayer whichPlayer , int techid )
    {
        // native code

        return W3PlayerManager.instance.getPlayerTechMaxAllowed( whichPlayer.id , techid );
    }

    public static void AddPlayerTechResearched( BJPlayer whichPlayer , int techid , int levels )
    {
        // native code

        W3PlayerManager.instance.addPlayerTechResearched( whichPlayer.id , techid , levels );
    }

    public static void SetPlayerTechResearched( BJPlayer whichPlayer , int techid , int setToLevel )
    {
        // native code

        W3PlayerManager.instance.setPlayerTechResearched( whichPlayer.id , techid , setToLevel );
    }

    public static bool GetPlayerTechResearched( BJPlayer whichPlayer , int techid , bool specificonly )
    {
        // native code

        return W3PlayerManager.instance.getPlayerTechResearched( whichPlayer.id , techid , specificonly );
    }

    public static int GetPlayerTechCount( BJPlayer whichPlayer , int techid , bool specificonly )
    {
        // native code

        return W3PlayerManager.instance.getPlayerTechCount( whichPlayer.id , techid , specificonly );
    }

    public static void SetPlayerUnitsOwner( BJPlayer whichPlayer , int newOwner )
    {
        // native code

        W3PlayerManager.instance.setPlayerUnitsOwner( whichPlayer.id , newOwner );
    }

    public static void CripplePlayer( BJPlayer whichPlayer , BJForce toWhichPlayers , bool flag )
    {
        // native code

        W3PlayerManager.instance.cripplePlayer( whichPlayer.id , toWhichPlayers.force , flag );
    }

    public static void SetPlayerAbilityAvailable( BJPlayer whichPlayer , int abilid , bool avail )
    {
        // native code

        W3PlayerManager.instance.setPlayerAbilityAvailable( whichPlayer.id , abilid , avail );
    }

    public static void SetPlayerState( BJPlayer whichPlayer , BJPlayerState whichPlayerState , int value )
    {
        // native code

        W3PlayerManager.instance.setPlayerState( whichPlayer.id , whichPlayerState.state , value );
    }

    public static void RemovePlayer( BJPlayer whichPlayer , BJPlayerGameResult gameResult )
    {
        // native code

        W3PlayerManager.instance.removePlayer( whichPlayer.id , gameResult.result );
    }

    // Used to store hero level data for the scorescreen
    // before units are moved to neutral passive in melee games
    //
    public static void CachePlayerHeroData( BJPlayer whichPlayer )
    {
        // native code

        W3PlayerManager.instance.cachePlayerHeroData( whichPlayer.id );
    }

    //============================================================================
    // Fog of War API
    public static void SetFogStateRect( BJPlayer forWhichPlayer , BJfogState whichState , BJRect where , bool useSharedVision )
    {
        // native code

        W3PlayerManager.instance.setFogStateRect( forWhichPlayer.id , whichState.state , where.minX , where.minY , where.maxX , where.maxY , useSharedVision );
    }

    public static void SetFogStateRadius( BJPlayer forWhichPlayer , BJfogState whichState , double centerx , double centerY , double radius , bool useSharedVision )
    {
        // native code

        W3PlayerManager.instance.setFogStateRadius( forWhichPlayer.id , whichState.state , (float)centerx , (float)centerY , (float)radius , useSharedVision );
    }

    public static void SetFogStateRadiusLoc( BJPlayer forWhichPlayer , BJfogState whichState , BJLocation center , double radius , bool useSharedVision )
    {
        // native code

        W3PlayerManager.instance.setFogStateRadius( forWhichPlayer.id , whichState.state , (float)center.x , (float)center.y , (float)radius , useSharedVision );
    }

    public static void FogMaskEnable( bool enable )
    {
        // native code

        W3PlayerManager.instance.fogMask = enable;
    }

    public static bool IsFogMaskEnabled()
    {
        // native code

        return W3PlayerManager.instance.fogMask;
    }

    public static void FogEnable( bool enable )
    {
        // native code

        W3PlayerManager.instance.fogEnable = enable;
    }

    public static bool IsFogEnabled()
    {
        // native code

        return W3PlayerManager.instance.fogEnable;
    }

    public static BJFogModifier CreateFogModifierRect( BJPlayer forWhichPlayer , BJfogState whichState , BJRect where , bool useSharedVision , bool afterUnits )
    {
        // native code

        BJFogModifier bj = new BJFogModifier();
        bj.id = W3PlayerManager.instance.createFogModifierRect( forWhichPlayer.id , whichState.state , where.minX , where.minY , where.maxX , where.maxY , useSharedVision , afterUnits );
        return bj;
    }

    public static BJFogModifier CreateFogModifierRadius( BJPlayer forWhichPlayer , BJfogState whichState , double centerx , double centerY , double radius , bool useSharedVision , bool afterUnits )
    {
        // native code

        BJFogModifier bj = new BJFogModifier();
        bj.id = W3PlayerManager.instance.createFogModifierRadius( forWhichPlayer.id , whichState.state , (float)centerx , (float)centerY , (float)radius , useSharedVision , afterUnits );
        return bj;
    }

    public static BJFogModifier CreateFogModifierRadiusLoc( BJPlayer forWhichPlayer , BJfogState whichState , BJLocation center , double radius , bool useSharedVision , bool afterUnits )
    {
        // native code

        BJFogModifier bj = new BJFogModifier();
        bj.id = W3PlayerManager.instance.createFogModifierRadius( forWhichPlayer.id , whichState.state , (float)center.x , (float)center.y , (float)radius , useSharedVision , afterUnits );
        return bj;
    }

    public static void DestroyFogModifier( BJFogModifier whichFogModifier )
    {
        // native code

        W3PlayerManager.instance.destroyFogModifier( whichFogModifier.id );
    }

    public static void FogModifierStart( BJFogModifier whichFogModifier )
    {
        // native code

        W3PlayerManager.instance.fogModifierStart( whichFogModifier.id );
    }

    public static void FogModifierStop( BJFogModifier whichFogModifier )
    {
        // native code

        W3PlayerManager.instance.fogModifierStop( whichFogModifier.id );
    }

    //============================================================================
    // Game API
    public static BJVersion VersionGet()
    {
        // native code

        BJVersion bj = new BJVersion();
        bj.version = W3GameManager.instance.version;
        return bj;
    }

    public static bool VersionCompatible( BJVersion whichVersion )
    {
        // native code

        return W3GameManager.instance.versionCompatible( whichVersion.version );
    }

    public static bool VersionSupported( BJVersion whichVersion )
    {
        // native code

        return W3GameManager.instance.versionSupported( whichVersion.version );
    }

    public static void EndGame( bool doScoreScreen )
    {
        // native code

        W3GameManager.instance.endGame( doScoreScreen );
    }

    // Async only!
    public static void ChangeLevel( string newLevel , bool doScoreScreen )
    {
        // native code

        W3GameManager.instance.changeLevel( newLevel , doScoreScreen );
    }

    public static void RestartGame( bool doScoreScreen )
    {
        // native code

        W3GameManager.instance.restartGame( doScoreScreen );
    }

    public static void ReloadGame()
    {
        // native code

        W3GameManager.instance.reloadGame();
    }

    // %%% SetCampaignMenuRace is deprecated.  It must remain to support
    // old maps which use it, but all new maps should use SetCampaignMenuRaceEx
    public static void SetCampaignMenuRace( BJRace r )
    {
        // native code

        W3GameManager.instance.setCampaignMenuRace( r.race );
    }

    public static void SetCampaignMenuRaceEx( int campaignIndex )
    {
        // native code

        W3GameManager.instance.setCampaignMenuRaceEx( campaignIndex );
    }

    public static void ForceCampaignSelectScreen()
    {
        // native code

        W3GameManager.instance.forceCampaignSelectScreen();
    }

    // NOTE: These funcs are reserved for Blizzard maps as they
    // could be used for nefarious scripting otherwise
    //
    public static void LoadGame( string saveFileName , bool doScoreScreen )
    {
        // native code

        W3GameManager.instance.loadGame( saveFileName , doScoreScreen );
    }

    public static void SaveGame( string saveFileName )
    {
        // native code

        W3GameManager.instance.saveGame( saveFileName );
    }

    public static bool RenameSaveDirectory( string sourceDirName , string destDirName )
    {
        // native code

        return W3GameManager.instance.renameSaveDirectory( sourceDirName , destDirName );
    }

    public static bool RemoveSaveDirectory( string sourceDirName )
    {
        // native code

        return W3GameManager.instance.removeSaveDirectory( sourceDirName );
    }

    public static bool CopySaveGame( string sourceSaveName , string destSaveName )
    {
        // native code

        return W3GameManager.instance.copySaveGame( sourceSaveName , destSaveName );
    }

    public static bool SaveGameExists( string saveName )
    {
        // native code

        return W3GameManager.instance.saveGameExists( saveName );
    }

    public static void SyncSelections()
    {
        // native code

        W3GameManager.instance.syncSelections();
    }

    public static void SetFloatGameState( BJFGameState whichFloatGameState , double value )
    {
        // native code

        W3GameManager.instance.setFloatGameState( whichFloatGameState.state , (float)value );
    }

    public static double GetFloatGameState( BJFGameState whichFloatGameState )
    {
        // native code

        return W3GameManager.instance.getFloatGameState( whichFloatGameState.state );
    }

    public static void SetIntegerGameState( BJIgameState whichIntegerGameState , int value )
    {
        // native code

        W3GameManager.instance.setIntegerGameState( whichIntegerGameState.state , value );
    }

    public static int GetIntegerGameState( BJIgameState whichIntegerGameState )
    {
        // native code

        return W3GameManager.instance.getIntegerGameState( whichIntegerGameState.state );
    }

    //============================================================================
    // Campaign API
    public static void SetTutorialCleared( bool cleared )
    {
        // native code

        W3CampaignManager.instance.setTutorialCleared( cleared );
    }

    public static void SetMissionAvailable( int campaignNumber , int missionNumber , bool available )
    {
        // native code

        W3CampaignManager.instance.setMissionAvailable( campaignNumber , missionNumber , available );
    }

    public static void SetCampaignAvailable( int campaignNumber , bool available )
    {
        // native code

        W3CampaignManager.instance.setCampaignAvailable( campaignNumber , available );
    }

    public static void SetOpCinematicAvailable( int campaignNumber , bool available )
    {
        // native code

        W3CampaignManager.instance.setOpCinematicAvailable( campaignNumber , available );
    }

    public static void SetEdCinematicAvailable( int campaignNumber , bool available )
    {
        // native code

        W3CampaignManager.instance.setEdCinematicAvailable( campaignNumber , available );
    }

    public static BJGameDifficulty GetDefaultDifficulty()
    {
        // native code

        BJGameDifficulty bj = new BJGameDifficulty();
        bj.difficulty = W3CampaignManager.instance.defaultDifficulty;
        return bj;
    }

    public static void SetDefaultDifficulty( BJGameDifficulty g )
    {
        // native code

        W3CampaignManager.instance.defaultDifficulty = g.difficulty;
    }

    public static void SetCustomCampaignButtonVisible( int whichButton , bool visible )
    {
        // native code

        W3CampaignManager.instance.setCustomCampaignButtonVisible( whichButton , visible );
    }

    public static bool GetCustomCampaignButtonVisible( int whichButton )
    {
        // native code

        return W3CampaignManager.instance.getCustomCampaignButtonVisible( whichButton );
    }

    public static void DoNotSaveReplay()
    {
        // native code

        W3CampaignManager.instance.doNotSaveReplay();
    }

    //============================================================================
    // Dialog API
    public static BJDialog DialogCreate()
    {
        // native code

        BJDialog bj = new BJDialog();
        bj.id = W3DialogManager.instance.dialogCreate();
        return bj;
    }

    public static void DialogDestroy( BJDialog whichDialog )
    {
        // native code

        W3DialogManager.instance.dialogDestroy( whichDialog.id );
    }

    public static void DialogClear( BJDialog whichDialog )
    {
        // native code

        W3DialogManager.instance.dialogClear( whichDialog.id );
    }

    public static void DialogSetMessage( BJDialog whichDialog , string messageText )
    {
        // native code

        W3DialogManager.instance.dialogSetMessage( whichDialog.id , messageText );
    }

    public static BJButton DialogAddButton( BJDialog whichDialog , string buttonText , int hotkey )
    {
        // native code

        BJButton bj = new BJButton();
        bj.id = W3DialogManager.instance.dialogAddButton( whichDialog.id , buttonText , hotkey );
        return bj;
    }

    public static BJButton DialogAddQuitButton( BJDialog whichDialog , bool doScoreScreen , string buttonText , int hotkey )
    {
        // native code

        BJButton bj = new BJButton();
        bj.id = W3DialogManager.instance.dialogAddQuitButton( whichDialog.id , doScoreScreen , buttonText , hotkey );
        return bj;
    }

    public static void DialogDisplay( BJPlayer whichPlayer , BJDialog whichDialog , bool flag )
    {
        // native code

        W3DialogManager.instance.dialogDisplay( whichPlayer.id , whichDialog.id , flag );
    }

    // Creates a new or reads in an existing game cache file stored
    // in the current campaign profile dir
    //
    public static bool ReloadGameCachesFromDisk()
    {
        // native code

        return W3CacheManager.instance.reloadGameCachesFromDisk();
    }

    public static BJGameCache InitGameCache( string campaignFile )
    {
        // native code

        BJGameCache bj = new BJGameCache();
        bj.cache = W3CacheManager.instance.initGameCache( campaignFile );
        return bj;
    }

    public static bool SaveGameCache( BJGameCache whichCache )
    {
        // native code

        return W3CacheManager.instance.saveGameCache( whichCache.cache );
    }

    public static void StoreInteger( BJGameCache cache , string missionKey , string key , int value )
    {
        // native code

        W3CacheManager.instance.storeInteger( cache.cache , missionKey , key , value );
    }

    public static void StoreReal( BJGameCache cache , string missionKey , string key , double value )
    {
        // native code

        W3CacheManager.instance.storeReal( cache.cache , missionKey , key , (float)value );
    }

    public static void StoreBoolean( BJGameCache cache , string missionKey , string key , bool value )
    {
        // native code

        W3CacheManager.instance.storeBoolean( cache.cache , missionKey , key , value );
    }

    public static bool StoreUnit( BJGameCache cache , string missionKey , string key , BJUnit whichUnit )
    {
        // native code

        return W3CacheManager.instance.storeUnit( cache.cache , missionKey , key , whichUnit.id );
    }

    public static bool StoreString( BJGameCache cache , string missionKey , string key , string value )
    {
        // native code

        return W3CacheManager.instance.storeString( cache.cache , missionKey , key , value );
    }

    public static void SyncStoredInteger( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.syncStoredInteger( cache.cache , missionKey , key );
    }

    public static void SyncStoredReal( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.SyncStoredReal( cache.cache , missionKey , key );
    }

    public static void SyncStoredBoolean( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.SyncStoredBoolean( cache.cache , missionKey , key );
    }

    public static void SyncStoredUnit( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.SyncStoredUnit( cache.cache , missionKey , key );
    }

    public static void SyncStoredString( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.SyncStoredString( cache.cache , missionKey , key );
    }

    // Will return 0 if the specified value's data is not found in the cache
    public static int GetStoredInteger( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.getStoredInteger( cache.cache , missionKey , key );
    }

    public static double GetStoredReal( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.getStoredReal( cache.cache , missionKey , key );
    }

    public static bool GetStoredBoolean( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.getStoredBoolean( cache.cache , missionKey , key );
    }

    public static string GetStoredString( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.getStoredString( cache.cache , missionKey , key );
    }

    public static BJUnit RestoreUnit( BJGameCache cache , string missionKey , string key , BJPlayer forWhichPlayer , double x , double y , double facing )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3CacheManager.instance.restoreUnit( cache.cache , missionKey , key , forWhichPlayer.id , (float)x , (float)y , (float)facing );
        return bj;
    }

    public static bool HaveStoredInteger( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.haveStoredInteger( cache.cache , missionKey , key );
    }

    public static bool HaveStoredReal( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.haveStoredReal( cache.cache , missionKey , key );
    }

    public static bool HaveStoredBoolean( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.haveStoredBoolean( cache.cache , missionKey , key );
    }

    public static bool HaveStoredUnit( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.haveStoredUnit( cache.cache , missionKey , key );
    }

    public static bool HaveStoredString( BJGameCache cache , string missionKey , string key )
    {
        // native code

        return W3CacheManager.instance.haveStoredString( cache.cache , missionKey , key );
    }

    public static void FlushGameCache( BJGameCache cache )
    {
        // native code

        W3CacheManager.instance.flushGameCache( cache.cache );
    }

    public static void FlushStoredMission( BJGameCache cache , string missionKey )
    {
        // native code

        W3CacheManager.instance.flushStoredMission( cache.cache , missionKey );
    }

    public static void FlushStoredInteger( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.flushStoredInteger( cache.cache , missionKey , key );
    }

    public static void FlushStoredReal( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.flushStoredReal( cache.cache , missionKey , key );
    }

    public static void FlushStoredBoolean( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.flushStoredBoolean( cache.cache , missionKey , key );
    }

    public static void FlushStoredUnit( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.flushStoredUnit( cache.cache , missionKey , key );
    }

    public static void FlushStoredString( BJGameCache cache , string missionKey , string key )
    {
        // native code

        W3CacheManager.instance.flushStoredString( cache.cache , missionKey , key );
    }

    //============================================================================
    // Randomization API
    public static int GetRandomInt( int lowBound , int highBound )
    {
        // native code

        return W3RandomManager.instance.getRandomInt( lowBound , highBound );
    }

    public static double GetRandomReal( double lowBound , double highBound )
    {
        // native code

        return W3RandomManager.instance.getRandomReal( (float)lowBound , (float)highBound );
    }

    public static BJUnitPool CreateUnitPool()
    {
        // native code

        BJUnitPool bj = new BJUnitPool();
        bj.pool = W3RandomManager.instance.createUnitPool();
        return bj;
    }

    public static void DestroyUnitPool( BJUnitPool whichPool )
    {
        // native code

        W3RandomManager.instance.destroyUnitPool( whichPool.pool );
    }

    public static void UnitPoolAddUnitType( BJUnitPool whichPool , int unitId , double weight )
    {
        // native code

        W3RandomManager.instance.unitPoolAddUnitType( whichPool.pool , unitId , (float)weight );
    }

    public static void UnitPoolRemoveUnitType( BJUnitPool whichPool , int unitId )
    {
        // native code

        W3RandomManager.instance.unitPoolRemoveUnitType( whichPool.pool , unitId );
    }

    public static BJUnit PlaceRandomUnit( BJUnitPool whichPool , BJPlayer forWhichPlayer , double x , double y , double facing )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3RandomManager.instance.placeRandomUnit( whichPool.pool , forWhichPlayer.id , (float)x , (float)y , (float)facing );
        return bj;
    }

    public static BJItemPool CreateItemPool()
    {
        // native code

        BJItemPool bj = new BJItemPool();
        bj.pool = W3RandomManager.instance.createItemPool();
        return bj;
    }

    public static void DestroyItemPool( BJItemPool whichItemPool )
    {
        // native code

        W3RandomManager.instance.destroyItemPool( whichItemPool.pool );
    }

    public static void ItemPoolAddItemType( BJItemPool whichItemPool , int itemId , double weight )
    {
        // native code

        W3RandomManager.instance.itemPoolAddItemType( whichItemPool.pool , itemId , (float)weight );
    }

    public static void ItemPoolRemoveItemType( BJItemPool whichItemPool , int itemId )
    {
        // native code

        W3RandomManager.instance.itemPoolRemoveItemType( whichItemPool.pool , itemId );
    }

    public static BJItem PlaceRandomItem( BJItemPool whichItemPool , double x , double y )
    {
        // native code

        BJItem bj = new BJItem();
        bj.id = W3RandomManager.instance.placeRandomItem( whichItemPool.pool , (float)x , (float)y );
        return bj;
    }

    // Choose any random unit/item. (NP means Neutral Passive)
    public static int ChooseRandomCreep( int level )
    {
        // native code

        return W3RandomManager.instance.chooseRandomCreep( level );
    }

    public static int ChooseRandomNPBuilding()
    {
        // native code

        return W3RandomManager.instance.chooseRandomNPBuilding();
    }

    public static int ChooseRandomItem( int level )
    {
        // native code

        return W3RandomManager.instance.chooseRandomItem( level );
    }

    public static int ChooseRandomItemEx( BJItemType whichType , int level )
    {
        // native code

        return W3RandomManager.instance.chooseRandomItemEx( whichType.type , level );
    }

    public static void SetRandomSeed( int seed )
    {
        // native code

        W3RandomManager.instance.setRandomSeed( seed );
    }

    //============================================================================
    // Visual API
    public static void SetTerrainFog( double a , double b , double c , double d , double e )
    {
        // native code

        W3VisualManager.instance.setTerrainFog( (float)a , (float)b , (float)c , (float)d , (float)e );
    }

    public static void ResetTerrainFog()
    {
        // native code

        W3VisualManager.instance.resetTerrainFog();
    }

    public static void SetUnitFog( double a , double b , double c , double d , double e )
    {
        // native code

        W3VisualManager.instance.setUnitFog( (float)a , (float)b , (float)c , (float)d , (float)e );
    }

    public static void SetTerrainFogEx( int style , double zstart , double zend , double density , double red , double green , double blue )
    {
        // native code

        W3VisualManager.instance.setTerrainFogEx( style , (float)zstart , (float)zend , (float)density , (float)red , (float)green , (float)blue );
    }

    public static void DisplayTextToPlayer( BJPlayer toPlayer , double x , double y , string message )
    {
        // native code

        W3VisualManager.instance.displayTextToPlayer( toPlayer.id , (float)x , (float)y , message );
    }

    public static void DisplayTimedTextToPlayer( BJPlayer toPlayer , double x , double y , double duration , string message )
    {
        // native code

        W3VisualManager.instance.displayTimedTextFromPlayer( toPlayer.id , (float)x , (float)y , (float)duration , message );
    }

    public static void DisplayTimedTextFromPlayer( BJPlayer toPlayer , double x , double y , double duration , string message )
    {
        // native code

        W3VisualManager.instance.displayTimedTextFromPlayer( toPlayer.id , (float)x , (float)y , (float)duration , message );
    }

    public static void ClearTextMessages()
    {
        // native code

        W3VisualManager.instance.clearTextMessages();
    }

    public static void SetDayNightModels( string terrainDNCFile , string unitDNCFile )
    {
        // native code

        W3VisualManager.instance.setDayNightModels( terrainDNCFile , unitDNCFile );
    }

    public static void SetSkyModel( string skyModelFile )
    {
        // native code

        W3VisualManager.instance.setSkyModel( skyModelFile );
    }

    public static void EnableUserControl( bool b )
    {
        // native code

        W3VisualManager.instance.enableUserControl( b );
    }

    public static void EnableUserUI( bool b )
    {
        // native code

        W3VisualManager.instance.enableUserUI( b );
    }

    public static void SuspendTimeOfDay( bool b )
    {
        // native code

        W3VisualManager.instance.suspendTimeOfDay( b );
    }

    public static void SetTimeOfDayScale( double r )
    {
        // native code

        W3VisualManager.instance.setTimeOfDayScale( (float)r );
    }

    public static double GetTimeOfDayScale()
    {
        // native code

        return W3VisualManager.instance.getTimeOfDayScale();
    }

    public static void ShowInterface( bool flag , double fadeDuration )
    {
        // native code

        W3VisualManager.instance.showInterface( flag , (float)fadeDuration );
    }

    public static void PauseGame( bool flag )
    {
        // native code

        W3VisualManager.instance.pauseGame( flag );
    }

    public static void UnitAddIndicator( BJUnit whichUnit , int red , int green , int blue , int alpha )
    {
        // native code

        W3VisualManager.instance.unitAddIndicator( whichUnit.id , red , green , blue , alpha );
    }

    public static void AddIndicator( BJWidget whichWidget , int red , int green , int blue , int alpha )
    {
        // native code

        W3VisualManager.instance.addIndicator( whichWidget.id , red , green , blue , alpha );
    }

    public static void PingMinimap( double x , double y , double duration )
    {
        // native code

        W3VisualManager.instance.pingMinimap( (float)x , (float)y , (float)duration );
    }

    public static void PingMinimapEx( double x , double y , double duration , int red , int green , int blue , bool extraEffects )
    {
        // native code

        W3VisualManager.instance.pingMinimapEx( (float)x , (float)y , (float)duration , red , green , blue , extraEffects );
    }

    public static void EnableOcclusion( bool flag )
    {
        // native code

        W3VisualManager.instance.enableOcclusion( flag );
    }

    public static void SetIntroShotText( string introText )
    {
        // native code

        W3VisualManager.instance.setIntroShotText( introText );
    }

    public static void SetIntroShotModel( string introModelPath )
    {
        // native code

        W3VisualManager.instance.setIntroShotModel( introModelPath );
    }

    public static void EnableWorldFogBoundary( bool b )
    {
        // native code

        W3VisualManager.instance.enableWorldFogBoundary( b );
    }

    public static void PlayModelCinematic( string modelName )
    {
        // native code

        W3VisualManager.instance.playModelCinematic( modelName );
    }

    public static void PlayCinematic( string movieName )
    {
        // native code

        W3VisualManager.instance.playCinematic( movieName );
    }

    public static void ForceUIKey( string key )
    {
        // native code

        W3VisualManager.instance.forceUIKey( key );
    }

    public static void ForceUICancel()
    {
        // native code

        W3VisualManager.instance.forceUICancel();
    }

    public static void DisplayLoadDialog()
    {
        // native code

        W3VisualManager.instance.displayLoadDialog();
    }

    public static void SetAltMinimapIcon( string iconPath )
    {
        // native code

        W3VisualManager.instance.setAltMinimapIcon( iconPath );
    }

    public static void DisableRestartMission( bool flag )
    {
        // native code

        W3VisualManager.instance.disableRestartMission( flag );
    }

    public static BJTextTag CreateTextTag()
    {
        // native code

        BJTextTag bj = new BJTextTag();
        bj.id = W3VisualManager.instance.createTextTag();
        return bj;
    }

    public static void DestroyTextTag( BJTextTag t )
    {
        // native code

        W3VisualManager.instance.destroyTextTag( t.id );
    }

    public static void SetTextTagText( BJTextTag t , string s , double height )
    {
        // native code

        W3VisualManager.instance.setTextTagText( t.id , s , (float)height );
    }

    public static void SetTextTagPos( BJTextTag t , double x , double y , double heightOffset )
    {
        // native code

        W3VisualManager.instance.setTextTagPos( t.id , (float)x , (float)y , (float)heightOffset );
    }

    public static void SetTextTagPosUnit( BJTextTag t , BJUnit whichUnit , double heightOffset )
    {
        // native code

        W3VisualManager.instance.setTextTagPosUnit( t.id , whichUnit.id , (float)heightOffset );
    }

    public static void SetTextTagColor( BJTextTag t , int red , int green , int blue , int alpha )
    {
        // native code

        W3VisualManager.instance.setTextTagColor( t.id , red , green , blue , alpha );
    }

    public static void SetTextTagVelocity( BJTextTag t , double xvel , double yvel )
    {
        // native code

        W3VisualManager.instance.setTextTagVelocity( t.id , (float)xvel , (float)yvel );
    }

    public static void SetTextTagVisibility( BJTextTag t , bool flag )
    {
        // native code

        W3VisualManager.instance.setTextTagVisibility( t.id , flag );
    }

    public static void SetReservedLocalHeroButtons( int reserved )
    {
        // native code

        W3VisualManager.instance.setReservedLocalHeroButtons( reserved );
    }

    public static int GetAllyColorFilterState()
    {
        // native code

        return W3VisualManager.instance.getAllyColorFilterState();
    }

    public static void SetAllyColorFilterState( int state )
    {
        // native code

        W3VisualManager.instance.setAllyColorFilterState( state );
    }

    //============================================================================
    // Trackable API
    public static BJTrackAble CreateTrackable( string trackableModelPath , double x , double y , double facing )
    {
        // native code

        BJTrackAble bj = new BJTrackAble();
        bj.id = W3VisualManager.instance.createTrackable( trackableModelPath , (float)x , (float)y , (float)facing );
        return bj;
    }

    //============================================================================
    // Quest API
    public static BJQuest CreateQuest()
    {
        // native code

        BJQuest bj = new BJQuest();
        bj.id = W3QuestManager.instance.createQuest();
        return bj;
    }

    public static void DestroyQuest( BJQuest whichQuest )
    {
        // native code

        W3QuestManager.instance.destroyQuest( whichQuest.id );
    }

    public static void QuestSetTitle( BJQuest whichQuest , string title )
    {
        // native code

        W3QuestManager.instance.questSetTitle( whichQuest.id , title );
    }

    public static void QuestSetDescription( BJQuest whichQuest , string description )
    {
        // native code

        W3QuestManager.instance.questSetDescription( whichQuest.id , description );
    }

    public static void QuestSetIconPath( BJQuest whichQuest , string iconPath )
    {
        // native code

        W3QuestManager.instance.questSetIconPath( whichQuest.id , iconPath );
    }

    public static void QuestSetRequired( BJQuest whichQuest , bool required )
    {
        // native code

        W3QuestManager.instance.questSetRequired( whichQuest.id , required );
    }

    public static void QuestSetCompleted( BJQuest whichQuest , bool completed )
    {
        // native code

        W3QuestManager.instance.questSetCompleted( whichQuest.id , completed );
    }

    public static void QuestSetDiscovered( BJQuest whichQuest , bool discovered )
    {
        // native code

        W3QuestManager.instance.questSetDiscovered( whichQuest.id , discovered );
    }

    public static void QuestSetFailed( BJQuest whichQuest , bool failed )
    {
        // native code

        W3QuestManager.instance.questSetFailed( whichQuest.id , failed );
    }

    public static void QuestSetEnabled( BJQuest whichQuest , bool enabled )
    {
        // native code

        W3QuestManager.instance.questSetEnabled( whichQuest.id , enabled );
    }

    public static bool IsQuestRequired( BJQuest whichQuest )
    {
        // native code

        return W3QuestManager.instance.isQuestRequired( whichQuest.id );
    }

    public static bool IsQuestCompleted( BJQuest whichQuest )
    {
        // native code

        return W3QuestManager.instance.isQuestCompleted( whichQuest.id );
    }

    public static bool IsQuestDiscovered( BJQuest whichQuest )
    {
        // native code

        return W3QuestManager.instance.isQuestDiscovered( whichQuest.id );
    }

    public static bool IsQuestFailed( BJQuest whichQuest )
    {
        // native code

        return W3QuestManager.instance.isQuestFailed( whichQuest.id );
    }

    public static bool IsQuestEnabled( BJQuest whichQuest )
    {
        // native code

        return W3QuestManager.instance.isQuestEnabled( whichQuest.id );
    }

    public static BJQuestItem QuestCreateItem( BJQuest whichQuest )
    {
        // native code

        BJQuestItem bj = new BJQuestItem();
        bj.id = W3QuestManager.instance.questCreateItem( whichQuest.id );
        return bj;
    }

    public static void QuestItemSetDescription( BJQuestItem whichQuestItem , string description )
    {
        // native code

        W3QuestManager.instance.questItemSetDescription( whichQuestItem.id , description );
    }

    public static void QuestItemSetCompleted( BJQuestItem whichQuestItem , bool completed )
    {
        // native code

        W3QuestManager.instance.questItemSetCompleted( whichQuestItem.id , completed );
    }

    public static bool IsQuestItemCompleted( BJQuestItem whichQuestItem )
    {
        // native code

        return W3QuestManager.instance.isQuestItemCompleted( whichQuestItem.id );
    }

    public static BJDefeatCondition CreateDefeatCondition()
    {
        // native code

        BJDefeatCondition bj = new BJDefeatCondition();
        bj.id = W3QuestManager.instance.createDefeatCondition();
        return bj;
    }

    public static void DestroyDefeatCondition( BJDefeatCondition whichCondition )
    {
        // native code

        W3QuestManager.instance.destroyDefeatCondition( whichCondition.id );
    }

    public static void DefeatConditionSetDescription( BJDefeatCondition whichCondition , string description )
    {
        // native code

        W3QuestManager.instance.DefeatConditionSetDescription( whichCondition.id , description );
    }

    public static void FlashQuestDialogButton()
    {
        // native code

        W3QuestManager.instance.flashQuestDialogButton();
    }

    public static void ForceQuestDialogUpdate()
    {
        // native code

        W3QuestManager.instance.forceQuestDialogUpdate();
    }

    //============================================================================
    // Timer Dialog API
    public static BJTimerDialog CreateTimerDialog( BJTimer t )
    {
        // native code

        BJTimerDialog bj = new BJTimerDialog();
        bj.id = W3TimerManager.instance.createTimerDialog( t.id );
        return bj;
    }

    public static void DestroyTimerDialog( BJTimerDialog whichDialog )
    {
        // native code

        W3TimerManager.instance.destroyTimerDialog( whichDialog.id );
    }

    public static void TimerDialogSetTitle( BJTimerDialog whichDialog , string title )
    {
        // native code

        W3TimerManager.instance.timerDialogSetTitle( whichDialog.id , title );
    }

    public static void TimerDialogSetTitleColor( BJTimerDialog whichDialog , int red , int green , int blue , int alpha )
    {
        // native code

        W3TimerManager.instance.timerDialogSetTitleColor( whichDialog.id , red , green , blue , alpha );
    }

    public static void TimerDialogSetTimeColor( BJTimerDialog whichDialog , int red , int green , int blue , int alpha )
    {
        // native code

        W3TimerManager.instance.timerDialogSetTimeColor( whichDialog.id , red , green , blue , alpha );
    }

    public static void TimerDialogSetSpeed( BJTimerDialog whichDialog , double speedMultFactor )
    {
        // native code

        W3TimerManager.instance.timerDialogSetSpeed( whichDialog.id , (float)speedMultFactor );
    }

    public static void TimerDialogDisplay( BJTimerDialog whichDialog , bool display )
    {
        // native code

        W3TimerManager.instance.timerDialogDisplay( whichDialog.id , display );
    }

    public static bool IsTimerDialogDisplayed( BJTimerDialog whichDialog )
    {
        // native code

        return W3TimerManager.instance.isTimerDialogDisplayed( whichDialog.id );
    }

    public static void TimerDialogSetRealTimeRemaining( BJTimerDialog whichDialog , double timeRemaining )
    {
        // native code

        W3TimerManager.instance.timerDialogSetRealTimeRemaining( whichDialog.id , (float)timeRemaining );
    }

    //============================================================================
    // Leaderboard API
    // Create a leaderboard object
    public static BJLeaderBoard CreateLeaderboard()
    {
        // native code

        BJLeaderBoard bj = new BJLeaderBoard();
        bj.id = W3LeaderboardManager.instance.createLeaderboard();
        return bj;
    }

    public static void DestroyLeaderboard( BJLeaderBoard lb )
    {
        // native code

        W3LeaderboardManager.instance.destroyLeaderboard( lb.id );
    }

    public static void LeaderboardDisplay( BJLeaderBoard lb , bool show )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardDisplay( lb.id , show );
    }

    public static bool IsLeaderboardDisplayed( BJLeaderBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.isLeaderboardDisplayed( lb.id );
    }

    public static int LeaderboardGetItemCount( BJLeaderBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.leaderboardGetItemCount( lb.id );
    }

    public static void LeaderboardSetSizeByItemCount( BJLeaderBoard lb , int count )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetSizeByItemCount( lb.id , count );
    }

    public static void LeaderboardAddItem( BJLeaderBoard lb , string label , int value , BJPlayer p )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardAddItem( lb.id , label , value , p.id );
    }

    public static void LeaderboardRemoveItem( BJLeaderBoard lb , int index )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardRemoveItem( lb.id , index );
    }

    public static void LeaderboardRemovePlayerItem( BJLeaderBoard lb , BJPlayer p )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardRemovePlayerItem( lb.id , p.id );
    }

    public static void LeaderboardClear( BJLeaderBoard lb )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardClear( lb.id );
    }

    public static void LeaderboardSortItemsByValue( BJLeaderBoard lb , bool ascending )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSortItemsByValue( lb.id , ascending );
    }

    public static void LeaderboardSortItemsByPlayer( BJLeaderBoard lb , bool ascending )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSortItemsByPlayer( lb.id , ascending );
    }

    public static void LeaderboardSortItemsByLabel( BJLeaderBoard lb , bool ascending )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSortItemsByLabel( lb.id , ascending );
    }

    public static bool LeaderboardHasPlayerItem( BJLeaderBoard lb , BJPlayer p )
    {
        // native code

        return W3LeaderboardManager.instance.leaderboardHasPlayerItem( lb.id , p.id );
    }

    public static int LeaderboardGetPlayerIndex( BJLeaderBoard lb , BJPlayer p )
    {
        // native code

        return W3LeaderboardManager.instance.leaderboardGetPlayerIndex( lb.id , p.id );
    }

    public static void LeaderboardSetLabel( BJLeaderBoard lb , string label )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetLabel( lb.id , label );
    }

    public static string LeaderboardGetLabelText( BJLeaderBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.leaderboardGetLabelText( lb.id );
    }

    public static void PlayerSetLeaderboard( BJPlayer toPlayer , BJLeaderBoard lb )
    {
        // native code

        W3LeaderboardManager.instance.playerSetLeaderboard( toPlayer.id , lb.id );
    }

    public static BJLeaderBoard PlayerGetLeaderboard( BJPlayer toPlayer )
    {
        // native code

        BJLeaderBoard bj = new BJLeaderBoard();
        bj.id = W3LeaderboardManager.instance.playerGetLeaderboard( toPlayer.id );
        return bj;
    }

    public static void LeaderboardSetLabelColor( BJLeaderBoard lb , int red , int green , int blue , int alpha )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetLabelColor( lb.id , red , green , blue , alpha );
    }

    public static void LeaderboardSetValueColor( BJLeaderBoard lb , int red , int green , int blue , int alpha )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetValueColor( lb.id , red , green , blue , alpha );
    }

    public static void LeaderboardSetStyle( BJLeaderBoard lb , bool showLabel , bool showNames , bool showValues , bool showIcons )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetStyle( lb.id , showLabel , showNames , showValues , showIcons );
    }

    public static void LeaderboardSetItemValue( BJLeaderBoard lb , int whichItem , int val )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetItemValue( lb.id , whichItem , val );
    }

    public static void LeaderboardSetItemLabel( BJLeaderBoard lb , int whichItem , string val )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetItemLabel( lb.id , whichItem , val );
    }

    public static void LeaderboardSetItemStyle( BJLeaderBoard lb , int whichItem , bool showLabel , bool showValue , bool showIcon )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetItemStyle( lb.id , whichItem , showLabel , showValue , showIcon );
    }

    public static void LeaderboardSetItemLabelColor( BJLeaderBoard lb , int whichItem , int red , int green , int blue , int alpha )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetItemLabelColor( lb.id , whichItem , red , green , blue , alpha );
    }

    public static void LeaderboardSetItemValueColor( BJLeaderBoard lb , int whichItem , int red , int green , int blue , int alpha )
    {
        // native code

        W3LeaderboardManager.instance.leaderboardSetItemValueColor( lb.id , whichItem , red , green , blue , alpha );
    }

    //============================================================================
    // Multiboard API
    //============================================================================
    // Create a multiboard object
    public static BJMultiBoard CreateMultiboard()
    {
        // native code

        BJMultiBoard bj = new BJMultiBoard();
        bj.id = W3LeaderboardManager.instance.createMultiboard();
        return bj;
    }

    public static void DestroyMultiboard( BJMultiBoard lb )
    {
        // native code

        W3LeaderboardManager.instance.destroyMultiboard( lb.id );
    }

    public static void MultiboardDisplay( BJMultiBoard lb , bool show )
    {
        // native code

        W3LeaderboardManager.instance.multiboardDisplay( lb.id , show );
    }

    public static bool IsMultiboardDisplayed( BJMultiBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.isMultiboardDisplayed( lb.id );
    }

    public static void MultiboardMinimize( BJMultiBoard lb , bool minimize )
    {
        // native code

        W3LeaderboardManager.instance.multiboardMinimize( lb.id , minimize );
    }

    public static bool IsMultiboardMinimized( BJMultiBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.isMultiboardMinimized( lb.id );
    }

    public static void MultiboardClear( BJMultiBoard lb )
    {
        // native code

        W3LeaderboardManager.instance.multiboardClear( lb.id );
    }

    public static void MultiboardSetTitleText( BJMultiBoard lb , string label )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetTitleText( lb.id , label );
    }

    public static string MultiboardGetTitleText( BJMultiBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.multiboardGetTitleText( lb.id );
    }

    public static void MultiboardSetTitleTextColor( BJMultiBoard lb , int red , int green , int blue , int alpha )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetTitleTextColor( lb.id , red , green , blue , alpha );
    }

    public static int MultiboardGetRowCount( BJMultiBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.multiboardGetRowCount( lb.id );
    }

    public static int MultiboardGetColumnCount( BJMultiBoard lb )
    {
        // native code

        return W3LeaderboardManager.instance.multiboardGetColumnCount( lb.id );
    }

    public static void MultiboardSetColumnCount( BJMultiBoard lb , int count )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetColumnCount( lb.id , count );
    }

    public static void MultiboardSetRowCount( BJMultiBoard lb , int count )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetRowCount( lb.id , count );
    }

    // broadcast settings to all items
    public static void MultiboardSetItemsStyle( BJMultiBoard lb , bool showValues , bool showIcons )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemsStyle( lb.id , showValues , showIcons );
    }

    public static void MultiboardSetItemsValue( BJMultiBoard lb , string value )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemsValue( lb.id , value );
    }

    public static void MultiboardSetItemsValueColor( BJMultiBoard lb , int red , int green , int blue , int alpha )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemsValueColor( lb.id , red , green , blue , alpha );
    }

    public static void MultiboardSetItemsWidth( BJMultiBoard lb , double width )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemsWidth( lb.id , (float)width );
    }

    public static void MultiboardSetItemsIcon( BJMultiBoard lb , string iconPath )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemsIcon( lb.id , iconPath );
    }

    // funcs for modifying individual items
    public static BJMultiBoardItem MultiboardGetItem( BJMultiBoard lb , int row , int column )
    {
        // native code

        BJMultiBoardItem bj = new BJMultiBoardItem();
        bj.id = W3LeaderboardManager.instance.multiboardGetItem( lb.id , row , column );
        return bj;
    }

    public static void MultiboardReleaseItem( BJMultiBoardItem mbi )
    {
        // native code

        W3LeaderboardManager.instance.multiboardReleaseItem( mbi.id );
    }

    public static void MultiboardSetItemStyle( BJMultiBoardItem mbi , bool showValue , bool showIcon )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemStyle( mbi.id , showValue , showIcon );
    }

    public static void MultiboardSetItemValue( BJMultiBoardItem mbi , string val )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemValue( mbi.id , val );
    }

    public static void MultiboardSetItemValueColor( BJMultiBoardItem mbi , int red , int green , int blue , int alpha )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemValueColor( mbi.id , red , green , blue , alpha );
    }

    public static void MultiboardSetItemWidth( BJMultiBoardItem mbi , double width )
    {
        // native code

        W3LeaderboardManager.instance.MultiboardSetItemWidth( mbi.id , (float)width );
    }

    public static void MultiboardSetItemIcon( BJMultiBoardItem mbi , string iconFileName )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSetItemIcon( mbi.id , iconFileName );
    }

    // meant to unequivocally suspend display of existing and
    // subsequently displayed multiboards
    //
    public static void MultiboardSuppressDisplay( bool flag )
    {
        // native code

        W3LeaderboardManager.instance.multiboardSuppressDisplay( flag );
    }

    //============================================================================
    // Camera API
    public static void SetCameraPosition( double x , double y )
    {
        // native code

        W3CameraManager.instance.setCameraPosition( (float)x , (float)y );
    }

    public static void SetCameraQuickPosition( double x , double y )
    {
        // native code

        W3CameraManager.instance.setCameraQuickPosition( (float)x , (float)y );
    }

    public static void SetCameraBounds( double x1 , double y1 , double x2 , double y2 , double x3 , double y3 , double x4 , double y4 )
    {
        // native code

        W3CameraManager.instance.setCameraBounds( (float)x1 , (float)y1 , (float)x2 , (float)y2 , (float)x3 , (float)y3 , (float)x4 , (float)y4 );
    }

    public static void StopCamera()
    {
        // native code

        W3CameraManager.instance.stopCamera();
    }

    public static void ResetToGameCamera( double duration )
    {
        // native code

        W3CameraManager.instance.resetToGameCamera( (float)duration );
    }

    public static void PanCameraTo( double x , double y )
    {
        // native code

        W3CameraManager.instance.panCameraTo( (float)x , (float)y );
    }

    public static void PanCameraToTimed( double x , double y , double duration )
    {
        // native code

        W3CameraManager.instance.panCameraToTimed( (float)x , (float)y , (float)duration );
    }

    public static void PanCameraToWithZ( double x , double y , double zOffsetDest )
    {
        // native code

        W3CameraManager.instance.panCameraToWithZ( (float)x , (float)y , (float)zOffsetDest );
    }

    public static void PanCameraToTimedWithZ( double x , double y , double zOffsetDest , double duration )
    {
        // native code

        W3CameraManager.instance.panCameraToTimedWithZ( (float)x , (float)y , (float)zOffsetDest , (float)duration );
    }

    public static void SetCinematicCamera( string cameraModelFile )
    {
        // native code

        W3CameraManager.instance.setCinematicCamera( cameraModelFile );
    }

    public static void SetCameraRotateMode( double x , double y , double radiansToSweep , double duration )
    {
        // native code

        W3CameraManager.instance.setCameraRotateMode( (float)x , (float)y , (float)radiansToSweep , (float)duration );
    }

    public static void SetCameraField( BJCameraField whichField , double value , double duration )
    {
        // native code

        W3CameraManager.instance.setCameraField( whichField.field , (float)value , (float)duration );
    }

    public static void AdjustCameraField( BJCameraField whichField , double offset , double duration )
    {
        // native code

        W3CameraManager.instance.adjustCameraField( whichField.field , (float)offset , (float)duration );
    }

    public static void SetCameraTargetController( BJUnit whichUnit , double xoffset , double yoffset , bool inheritOrientation )
    {
        // native code

        W3CameraManager.instance.setCameraTargetController( whichUnit.id , (float)xoffset , (float)yoffset , inheritOrientation );
    }

    public static void SetCameraOrientController( BJUnit whichUnit , double xoffset , double yoffset )
    {
        // native code

        W3CameraManager.instance.setCameraOrientController( whichUnit.id , (float)xoffset , (float)yoffset );
    }

    public static BJCameraSetup CreateCameraSetup()
    {
        // native code

        BJCameraSetup bj = new BJCameraSetup();
        bj.id = W3CameraManager.instance.createCameraSetup();
        return bj;
    }

    public static void CameraSetupSetField( BJCameraSetup whichSetup , BJCameraField whichField , double value , double duration )
    {
        // native code

        W3CameraManager.instance.cameraSetupSetField( whichSetup.id , whichField.field , (float)value , (float)duration );
    }

    public static double CameraSetupGetField( BJCameraSetup whichSetup , BJCameraField whichField )
    {
        // native code

        return W3CameraManager.instance.cameraSetupGetField( whichSetup.id , whichField.field );
    }

    public static void CameraSetupSetDestPosition( BJCameraSetup whichSetup , double x , double y , double duration )
    {
        // native code

        W3CameraManager.instance.cameraSetupSetDestPosition( whichSetup.id , (float)x , (float)y , (float)duration );
    }

    public static BJLocation CameraSetupGetDestPositionLoc( BJCameraSetup whichSetup )
    {
        // native code

        BJLocation bj = new BJLocation();
        bj.x = W3CameraManager.instance.cameraSetupGetDestPositionX( whichSetup.id );
        bj.y = W3CameraManager.instance.cameraSetupGetDestPositionY( whichSetup.id );
        return bj;
    }

    public static double CameraSetupGetDestPositionX( BJCameraSetup whichSetup )
    {
        // native code

        return W3CameraManager.instance.cameraSetupGetDestPositionX( whichSetup.id );
    }

    public static double CameraSetupGetDestPositionY( BJCameraSetup whichSetup )
    {
        // native code

        return W3CameraManager.instance.cameraSetupGetDestPositionY( whichSetup.id );
    }

    public static void CameraSetupApply( BJCameraSetup whichSetup , bool doPan , bool panTimed )
    {
        // native code

        W3CameraManager.instance.cameraSetupApply( whichSetup.id , doPan , panTimed );
    }

    public static void CameraSetupApplyWithZ( BJCameraSetup whichSetup , double zDestOffset )
    {
        // native code

        W3CameraManager.instance.cameraSetupApplyWithZ( whichSetup.id , (float)zDestOffset );
    }

    public static void CameraSetupApplyForceDuration( BJCameraSetup whichSetup , bool doPan , double forceDuration )
    {
        // native code

        W3CameraManager.instance.cameraSetupApplyForceDuration( whichSetup.id , doPan , (float)forceDuration );
    }

    public static void CameraSetupApplyForceDurationWithZ( BJCameraSetup whichSetup , double zDestOffset , double forceDuration )
    {
        // native code

        W3CameraManager.instance.cameraSetupApplyForceDurationWithZ( whichSetup.id , (float)zDestOffset , (float)forceDuration );
    }

    public static void CameraSetTargetNoise( double mag , double velocity )
    {
        // native code

        W3CameraManager.instance.cameraSetTargetNoise( (float)mag , (float)velocity );
    }

    public static void CameraSetSourceNoise( double mag , double velocity )
    {
        // native code

        W3CameraManager.instance.cameraSetSourceNoise( (float)mag , (float)velocity );
    }

    public static void CameraSetTargetNoiseEx( double mag , double velocity , bool vertOnly )
    {
        // native code

        W3CameraManager.instance.cameraSetTargetNoiseEx( (float)mag , (float)velocity , vertOnly );
    }

    public static void CameraSetSourceNoiseEx( double mag , double velocity , bool vertOnly )
    {
        // native code

        W3CameraManager.instance.cameraSetSourceNoiseEx( (float)mag , (float)velocity , vertOnly );
    }

    public static void CameraSetSmoothingFactor( double factor )
    {
        // native code

        W3CameraManager.instance.cameraSetSmoothingFactor( (float)factor );
    }

    public static void SetCineFilterTexture( string filename )
    {
        // native code

        W3CameraManager.instance.setCineFilterTexture( filename );
    }

    public static void SetCineFilterBlendMode( BJBlendMode whichMode )
    {
        // native code

        W3CameraManager.instance.setCineFilterBlendMode( whichMode.mode );
    }

    public static void SetCineFilterTexMapFlags( BJTexMapFlags whichFlags )
    {
        // native code

        W3CameraManager.instance.setCineFilterTexMapFlags( whichFlags.flags );
    }

    public static void SetCineFilterStartUV( double minu , double minv , double maxu , double maxv )
    {
        // native code

        W3CameraManager.instance.setCineFilterStartUV( (float)minu , (float)minv , (float)maxu , (float)maxv );
    }

    public static void SetCineFilterEndUV( double minu , double minv , double maxu , double maxv )
    {
        // native code

        W3CameraManager.instance.setCineFilterEndUV( (float)minu , (float)minv , (float)maxu , (float)maxv );
    }

    public static void SetCineFilterStartColor( int red , int green , int blue , int alpha )
    {
        // native code

        W3CameraManager.instance.setCineFilterStartColor( red , green , blue , alpha );
    }

    public static void SetCineFilterEndColor( int red , int green , int blue , int alpha )
    {
        // native code

        W3CameraManager.instance.setCineFilterEndColor( red , green , blue , alpha );
    }

    public static void SetCineFilterDuration( double duration )
    {
        // native code

        W3CameraManager.instance.setCineFilterDuration( (float)duration );
    }

    public static void DisplayCineFilter( bool flag )
    {
        // native code

        W3CameraManager.instance.displayCineFilter( flag );
    }

    public static bool IsCineFilterDisplayed()
    {
        // native code

        return W3CameraManager.instance.isCineFilterDisplayed();
    }

    public static void SetCinematicScene( int portraitUnitId , BJPlayerColor color , string speakerTitle , string text , double sceneDuration , double voiceoverDuration )
    {
        // native code

        W3CameraManager.instance.setCinematicScene( portraitUnitId , color.color , speakerTitle , text , (float)sceneDuration , (float)voiceoverDuration );
    }

    public static void EndCinematicScene()
    {
        // native code

        W3CameraManager.instance.endCinematicScene();
    }

    public static void ForceCinematicSubtitles( bool flag )
    {
        // native code

        W3CameraManager.instance.forceCinematicSubtitles( flag );
    }

    public static double GetCameraMargin( int whichMargin )
    {
        // native code

        return W3CameraManager.instance.getCameraMargin( whichMargin );
    }

    // These return values for the local players camera only...
    public static double GetCameraBoundMinX()
    {
        // native code

        return W3CameraManager.instance.getCameraBoundMinX();
    }

    public static double GetCameraBoundMinY()
    {
        // native code

        return W3CameraManager.instance.getCameraBoundMinY();
    }

    public static double GetCameraBoundMaxX()
    {
        // native code

        return W3CameraManager.instance.getCameraBoundMinX();
    }

    public static double GetCameraBoundMaxY()
    {
        // native code

        return W3CameraManager.instance.getCameraBoundMaxY();
    }

    public static double GetCameraField( BJCameraField whichField )
    {
        // native code

        return W3CameraManager.instance.getCameraField( whichField.field );
    }

    public static double GetCameraTargetPositionX()
    {
        // native code

        return W3CameraManager.instance.getCameraTargetPositionX();
    }

    public static double GetCameraTargetPositionY()
    {
        // native code

        return W3CameraManager.instance.getCameraTargetPositionY();
    }

    public static double GetCameraTargetPositionZ()
    {
        // native code

        return W3CameraManager.instance.getCameraTargetPositionZ();
    }

    public static BJLocation GetCameraTargetPositionLoc()
    {
        // native code

        BJLocation bj = new BJLocation();
        bj.x = W3CameraManager.instance.getCameraTargetPositionX();
        bj.y = W3CameraManager.instance.getCameraTargetPositionY();
        bj.z = W3CameraManager.instance.getCameraTargetPositionZ();
        return bj;
    }

    public static double GetCameraEyePositionX()
    {
        // native code

        return W3CameraManager.instance.getCameraEyePositionX();
    }

    public static double GetCameraEyePositionY()
    {
        // native code

        return W3CameraManager.instance.getCameraEyePositionY();
    }

    public static double GetCameraEyePositionZ()
    {
        // native code

        return W3CameraManager.instance.getCameraEyePositionZ();
    }

    public static BJLocation GetCameraEyePositionLoc()
    {
        // native code

        BJLocation bj = new BJLocation();
        bj.x = W3CameraManager.instance.getCameraEyePositionX();
        bj.y = W3CameraManager.instance.getCameraEyePositionY();
        bj.z = W3CameraManager.instance.getCameraEyePositionZ();
        return bj;
    }

    //============================================================================
    // Sound API
    //
    public static void NewSoundEnvironment( string environmentName )
    {
        // native code

        W3SoundManager.instance.newSoundEnvironment( environmentName );
    }

    public static BJSound CreateSound( string fileName , bool looping , bool is3D , bool stopwhenoutofrange , int fadeInRate , int fadeOutRate , string eaxSetting )
    {
        // native code

        BJSound bj = new BJSound();
        bj.id = W3SoundManager.instance.createSound( fileName , looping , is3D , stopwhenoutofrange , fadeInRate , fadeOutRate , eaxSetting );
        return bj;
    }

    public static BJSound CreateSoundFilenameWithLabel( string fileName , bool looping , bool is3D , bool stopwhenoutofrange , int fadeInRate , int fadeOutRate , string SLKEntryName )
    {
        // native code

        BJSound bj = new BJSound();
        bj.id = W3SoundManager.instance.createSoundFilenameWithLabel( fileName , looping , is3D , stopwhenoutofrange , fadeInRate , fadeOutRate , SLKEntryName );
        return bj;
    }

    public static BJSound CreateSoundFromLabel( string soundLabel , bool looping , bool is3D , bool stopwhenoutofrange , int fadeInRate , int fadeOutRate )
    {
        // native code

        BJSound bj = new BJSound();
        bj.id = W3SoundManager.instance.createSoundFromLabel( soundLabel , looping , is3D , stopwhenoutofrange , fadeInRate , fadeOutRate );
        return bj;
    }

    public static BJSound CreateMIDISound( string soundLabel , int fadeInRate , int fadeOutRate )
    {
        // native code

        BJSound bj = new BJSound();
        bj.id = W3SoundManager.instance.createMIDISound( soundLabel , fadeInRate , fadeOutRate );
        return bj;
    }

    public static void SetSoundParamsFromLabel( BJSound soundHandle , string soundLabel )
    {
        // native code

        W3SoundManager.instance.setSoundParamsFromLabel( soundHandle.id , soundLabel );
    }

    public static void SetSoundDistanceCutoff( BJSound soundHandle , double cutoff )
    {
        // native code

        W3SoundManager.instance.setSoundDistanceCutoff( soundHandle.id , (float)cutoff );
    }

    public static void SetSoundChannel( BJSound soundHandle , int channel )
    {
        // native code

        W3SoundManager.instance.setSoundChannel( soundHandle.id , channel );
    }

    public static void SetSoundVolume( BJSound soundHandle , int volume )
    {
        // native code

        W3SoundManager.instance.setSoundVolume( soundHandle.id , volume );
    }

    public static void SetSoundPitch( BJSound soundHandle , double pitch )
    {
        // native code

        W3SoundManager.instance.setSoundPitch( soundHandle.id , (float)pitch );
    }

    // the following method must be called immediately after calling "StartSound" 
    public static void SetSoundPlayPosition( BJSound soundHandle , int millisecs )
    {
        // native code

        W3SoundManager.instance.setSoundPlayPosition( soundHandle.id , millisecs );
    }

    // these calls are only valid if the sound was created with 3d enabled
    public static void SetSoundDistances( BJSound soundHandle , double minDist , double maxDist )
    {
        // native code

        W3SoundManager.instance.setSoundDistances( soundHandle.id , (float)minDist , (float)maxDist );
    }

    public static void SetSoundConeAngles( BJSound soundHandle , double inside , double outside , int outsideVolume )
    {
        // native code

        W3SoundManager.instance.setSoundConeAngles( soundHandle.id , (float)inside , (float)outside , outsideVolume );
    }

    public static void SetSoundConeOrientation( BJSound soundHandle , double x , double y , double z )
    {
        // native code

        W3SoundManager.instance.setSoundConeOrientation( soundHandle.id , (float)x , (float)y , (float)z );
    }

    public static void SetSoundPosition( BJSound soundHandle , double x , double y , double z )
    {
        // native code

        W3SoundManager.instance.setSoundPosition( soundHandle.id , (float)x , (float)y , (float)z );
    }

    public static void SetSoundVelocity( BJSound soundHandle , double x , double y , double z )
    {
        // native code

        W3SoundManager.instance.setSoundVelocity( soundHandle.id , (float)x , (float)y , (float)z );
    }

    public static void AttachSoundToUnit( BJSound soundHandle , BJUnit whichUnit )
    {
        // native code

        W3SoundManager.instance.attachSoundToUnit( soundHandle.id , whichUnit.id );
    }

    public static void StartSound( BJSound soundHandle )
    {
        // native code

        W3SoundManager.instance.startSound( soundHandle.id );
    }

    public static void StopSound( BJSound soundHandle , bool killWhenDone , bool fadeOut )
    {
        // native code

        W3SoundManager.instance.stopSound( soundHandle.id , killWhenDone , fadeOut );
    }

    public static void KillSoundWhenDone( BJSound soundHandle )
    {
        // native code

        W3SoundManager.instance.killSoundWhenDone( soundHandle.id );
    }

    // Music Interface. Note that if music is disabled, these calls do nothing
    public static void SetMapMusic( string musicName , bool random , int index )
    {
        // native code

        W3SoundManager.instance.setMapMusic( musicName , random , index );
    }

    public static void ClearMapMusic()
    {
        // native code

        W3SoundManager.instance.clearMapMusic();
    }

    public static void PlayMusic( string musicName )
    {
        // native code

        W3SoundManager.instance.playMusic( musicName );
    }

    public static void PlayMusicEx( string musicName , int frommsecs , int fadeinmsecs )
    {
        // native code

        W3SoundManager.instance.playMusicEx( musicName , frommsecs , fadeinmsecs );
    }

    public static void StopMusic( bool fadeOut )
    {
        // native code

        W3SoundManager.instance.stopMusic( fadeOut );
    }

    public static void ResumeMusic()
    {
        // native code

        W3SoundManager.instance.resumeMusic();
    }

    public static void PlayThematicMusic( string musicFileName )
    {
        // native code

        W3SoundManager.instance.playThematicMusic( musicFileName );
    }

    public static void PlayThematicMusicEx( string musicFileName , int frommsecs )
    {
        // native code

        W3SoundManager.instance.playThematicMusicEx( musicFileName , frommsecs );
    }

    public static void EndThematicMusic()
    {
        // native code

        W3SoundManager.instance.endThematicMusic();
    }

    public static void SetMusicVolume( int volume )
    {
        // native code

        W3SoundManager.instance.setMusicVolume( volume );
    }

    public static void SetMusicPlayPosition( int millisecs )
    {
        // native code

        W3SoundManager.instance.setMusicPlayPosition( millisecs );
    }

    public static void SetThematicMusicPlayPosition( int millisecs )
    {
        // native code

        W3SoundManager.instance.setThematicMusicPlayPosition( millisecs );
    }

    // other music and sound calls
    public static void SetSoundDuration( BJSound soundHandle , int duration )
    {
        // native code

        W3SoundManager.instance.setSoundDuration( soundHandle.id , duration );
    }

    public static int GetSoundDuration( BJSound soundHandle )
    {
        // native code

        return W3SoundManager.instance.getSoundDuration( soundHandle.id );
    }

    public static int GetSoundFileDuration( string musicFileName )
    {
        // native code

        return W3SoundManager.instance.getSoundFileDuration( musicFileName );
    }

    public static void VolumeGroupSetVolume( BJVolumeGroup vgroup , double scale )
    {
        // native code

        W3SoundManager.instance.volumeGroupSetVolume( vgroup.id , (float)scale );
    }

    public static void VolumeGroupReset()
    {
        // native code

        W3SoundManager.instance.volumeGroupReset();
    }

    public static bool GetSoundIsPlaying( BJSound soundHandle )
    {
        // native code

        return W3SoundManager.instance.getSoundIsPlaying( soundHandle.id );
    }

    public static bool GetSoundIsLoading( BJSound soundHandle )
    {
        // native code

        return W3SoundManager.instance.getSoundIsLoading( soundHandle.id );
    }

    public static void RegisterStackedSound( BJSound soundHandle , bool byPosition , double rectwidth , double rectheight )
    {
        // native code

        W3SoundManager.instance.registerStackedSound( soundHandle.id , byPosition , (float)rectwidth , (float)rectheight );
    }

    public static void UnregisterStackedSound( BJSound soundHandle , bool byPosition , double rectwidth , double rectheight )
    {
        // native code

        W3SoundManager.instance.unregisterStackedSound( soundHandle.id , byPosition , (float)rectwidth , (float)rectheight );
    }

    //============================================================================
    // Effects API
    //
    public static BJWeatherEffect AddWeatherEffect( BJRect where , int effectID )
    {
        // native code

        BJWeatherEffect bj = new BJWeatherEffect();
        bj.effect = W3EffectsManager.instance.addWeatherEffect( where.minX , where.minY , where.maxX , where.maxY , effectID );
        return bj;
    }

    public static void RemoveWeatherEffect( BJWeatherEffect whichEffect )
    {
        // native code

        W3EffectsManager.instance.removeWeatherEffect( whichEffect.effect );
    }

    public static void EnableWeatherEffect( BJWeatherEffect whichEffect , bool enable )
    {
        // native code

        W3EffectsManager.instance.enableWeatherEffect( whichEffect.effect , enable );
    }

    public static BJTerrainDeformation TerrainDeformCrater( double x , double y , double radius , double depth , int duration , bool permanent )
    {
        // native code

        BJTerrainDeformation bj = new BJTerrainDeformation();
        bj.id = W3EffectsManager.instance.terrainDeformCrater( (float)x , (float)y , (float)radius , (float)depth , duration , permanent );
        return bj;
    }

    public static BJTerrainDeformation TerrainDeformRipple( double x , double y , double radius , double depth , int duration , int count , double spaceWaves , double timeWaves , double radiusStartPct , bool limitNeg )
    {
        // native code

        BJTerrainDeformation bj = new BJTerrainDeformation();
        bj.id = W3EffectsManager.instance.terrainDeformRipple( (float)x , (float)y , (float)radius , (float)depth , duration , count , (float)spaceWaves , (float)timeWaves , (float)radiusStartPct , limitNeg );
        return bj;
    }

    public static BJTerrainDeformation TerrainDeformWave( double x , double y , double dirX , double dirY , double distance , double speed , double radius , double depth , int trailTime , int count )
    {
        // native code

        BJTerrainDeformation bj = new BJTerrainDeformation();
        bj.id = W3EffectsManager.instance.terrainDeformWave( (float)x , (float)y , (float)dirX , (float)dirY , (float)distance , (float)speed , (float)radius , (float)depth , trailTime , count );
        return bj;
    }

    public static BJTerrainDeformation TerrainDeformRandom( double x , double y , double radius , double minDelta , double maxDelta , int duration , int updateInterval )
    {
        // native code

        BJTerrainDeformation bj = new BJTerrainDeformation();
        bj.id = W3EffectsManager.instance.terrainDeformRandom( (float)x , (float)y , (float)radius , (float)minDelta , (float)maxDelta , duration , updateInterval );
        return bj;
    }

    public static void TerrainDeformStop( BJTerrainDeformation deformation , int duration )
    {
        // native code

        W3EffectsManager.instance.terrainDeformStop( deformation.id , duration );
    }

    public static void TerrainDeformStopAll()
    {
        // native code

        W3EffectsManager.instance.terrainDeformStopAll();
    }

    public static BJEffect AddSpecialEffect( string modelName , double x , double y )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpecialEffect( modelName , (float)x , (float)y );
        return bj;
    }

    public static BJEffect AddSpecialEffectLoc( string modelName , BJLocation where )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpecialEffect( modelName , (float)where.x , (float)where.y );
        return bj;
    }

    public static BJEffect AddSpecialEffectTarget( string modelName , BJWidget targetWidget , string attachPointName )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpecialEffectTarget( modelName , targetWidget.id , attachPointName );
        return bj;
    }

    public static void DestroyEffect( BJEffect whichEffect )
    {
        // native code

        W3EffectsManager.instance.destroyEffect( whichEffect.effect );
    }

    public static BJEffect AddSpellEffect( string abilityString , BJEffectType t , double x , double y )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpellEffect( abilityString , t.type , (float)x , (float)y );
        return bj;
    }

    public static BJEffect AddSpellEffectLoc( string abilityString , BJEffectType t , BJLocation where )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpellEffect( abilityString , t.type , (float)where.x , (float)where.y );
        return bj;
    }

    public static BJEffect AddSpellEffectById( int abilityId , BJEffectType t , double x , double y )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpellEffectById( abilityId , t.type , (float)x , (float)y );
        return bj;
    }

    public static BJEffect AddSpellEffectByIdLoc( int abilityId , BJEffectType t , BJLocation where )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpellEffectById( abilityId , t.type , (float)where.x , (float)where.y );
        return bj;
    }

    public static BJEffect AddSpellEffectTarget( string modelName , BJEffectType t , BJWidget targetWidget , string attachPoint )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpellEffectTarget( modelName , t.type , targetWidget.id , attachPoint );
        return bj;
    }

    public static BJEffect AddSpellEffectTargetById( int abilityId , BJEffectType t , BJWidget targetWidget , string attachPoint )
    {
        // native code

        BJEffect bj = new BJEffect();
        bj.effect = W3EffectsManager.instance.addSpellEffectTargetById( abilityId , t.type , targetWidget.id , attachPoint );
        return bj;
    }

    //============================================================================
    // Terrain API
    //
    public static int GetTerrainCliffLevel( double x , double y )
    {
        // native code

        return W3TerrainManager.instance.getTerrainCliffLevel( (float)x , (float)y );
    }

    public static void SetWaterBaseColor( int red , int green , int blue , int alpha )
    {
        // native code

        W3TerrainManager.instance.setWaterBaseColor( red , green , blue , alpha );
    }

    //============================================================================
    // Blight API
    //
    public static void SetBlight( BJPlayer whichPlayer , double x , double y , double radius , bool addBlight )
    {
        // native code

        W3TerrainManager.instance.setBlight( whichPlayer.id , (float)x , (float)y , (float)radius , addBlight );
    }

    public static void SetBlightRect( BJPlayer whichPlayer , BJRect r , bool addBlight )
    {
        // native code

        W3TerrainManager.instance.setBlightRect( whichPlayer.id , r.minX , r.minY , r.maxX , r.maxY , addBlight );
    }

    public static void SetBlightPoint( BJPlayer whichPlayer , double x , double y , bool addBlight )
    {
        // native code

        W3TerrainManager.instance.setBlightPoint( whichPlayer.id , (float)x , (float)y , addBlight );
    }

    public static void SetBlightLoc( BJPlayer whichPlayer , BJLocation whichLocation , double radius , bool addBlight )
    {
        // native code

        W3TerrainManager.instance.setBlight( whichPlayer.id , (float)whichLocation.x , (float)whichLocation.y , (float)radius , addBlight );
    }

    public static BJUnit CreateBlightedGoldmine( BJPlayer id , double x , double y , double face )
    {
        // native code

        BJUnit bj = new BJUnit();
        bj.id = W3TerrainManager.instance.createBlightedGoldmine( id.id , (float)x , (float)y , (float)face );
        return bj;
    }

    //============================================================================
    // Doodad API
    //
    public static void SetDoodadAnimation( double x , double y , double radius , int doodadID , bool nearestOnly , string animName , bool animRandom )
    {
        // native code

        W3TerrainManager.instance.setDoodadAnimation( (float)x , (float)y , (float)radius , doodadID , nearestOnly , animName , animRandom );
    }

    public static void SetDoodadAnimationRect( BJRect r , int doodadID , string animName , bool animRandom )
    {
        // native code

        W3TerrainManager.instance.setDoodadAnimationRect( r.minX , r.minY , r.maxX , r.maxY , doodadID , animName , animRandom );
    }

    //============================================================================
    // Computer AI interface
    //
    public static void StartMeleeAI( BJPlayer num , string script )
    {
        // native code

        W3TerrainManager.instance.startMeleeAI( num.id , script );
    }

    public static void StartCampaignAI( BJPlayer num , string script )
    {
        // native code

        W3TerrainManager.instance.startCampaignAI( num.id , script );
    }

    public static void CommandAI( BJPlayer num , int command , int data )
    {
        // native code

        W3TerrainManager.instance.commandAI( num.id , command , data );
    }

    public static void PauseCompAI( BJPlayer p , bool pause )
    {
        // native code

        W3TerrainManager.instance.pauseCompAI( p.id , pause );
    }

    public static BJAIdifficulty GetAIDifficulty( BJPlayer num )
    {
        // native code

        BJAIdifficulty bj = new BJAIdifficulty();
        bj.difficulty = W3TerrainManager.instance.getAIDifficulty( num.id );
        return bj;
    }

    public static void RemoveGuardPosition( BJUnit hUnit )
    {
        // native code

        W3TerrainManager.instance.removeGuardPosition( hUnit.id );
    }

    public static void RecycleGuardPosition( BJUnit hUnit )
    {
        // native code

        W3TerrainManager.instance.recycleGuardPosition( hUnit.id );
    }

    public static void RemoveAllGuardPositions( BJPlayer num )
    {
        // native code

        W3TerrainManager.instance.removeAllGuardPositions( num.id );
    }

    //============================================================================
    public static void Cheat( string cheatStr )
    {
        // native code

        W3TerrainManager.instance.cheat( cheatStr );
    }

    public static bool IsNoVictoryCheat()
    {
        // native code

        return W3TerrainManager.instance.isNoVictoryCheat();
    }

    public static bool IsNoDefeatCheat()
    {
        // native code

        return W3TerrainManager.instance.isNoDefeatCheat();
    }

    public static void Preload( string filename )
    {
        // native code

        W3TerrainManager.instance.Preload( filename );
    }

    public static void PreloadEnd( double timeout )
    {
        // native code

        W3TerrainManager.instance.PreloadEnd( (float)timeout );
    }

    public static void PreloadStart()
    {
        // native code

        W3TerrainManager.instance.PreloadStart();
    }

    public static void PreloadRefresh()
    {
        // native code

        W3TerrainManager.instance.PreloadRefresh();
    }

    public static void PreloadEndEx()
    {
        // native code

        W3TerrainManager.instance.PreloadEndEx();
    }

    public static void PreloadGenClear()
    {
        // native code

        W3TerrainManager.instance.PreloadGenClear();
    }

    public static void PreloadGenStart()
    {
        // native code

        W3TerrainManager.instance.PreloadGenStart();
    }

    public static void PreloadGenEnd( string filename )
    {
        // native code

        W3TerrainManager.instance.PreloadGenEnd( filename );
    }

    public static void Preloader( string filename )
    {
        // native code

        W3TerrainManager.instance.Preloader( filename );
    }

}

