// Generated by .

	public partial class GameDefine 
	{

		public class n07_rainbow_ai
		{
		//============================================================================
		//  Night Elf 07 -- any player -- AI Script
		//============================================================================
			// seconds
			public int NORMAL_WAVE_DUR = 75;
			public int HARD_WAVE_DUR = 75;
			public int NORM_ALLOW_TREES = 0;
			public int NORM_TREE_FACTOR = 5;
			public int NORM_BASE_BONUS = 0;
			public int NORM_BONUS_CAP = 10;
			public int HARD_ALLOW_TREES = 0;
			public int HARD_TREE_FACTOR = 4;
			public int HARD_BASE_BONUS = 1;
			public int HARD_BONUS_CAP = 10;
			public int PIT_STOP_WAVE = 0;
			public int BASIC_WAVE1 = 1;
			public int BASIC_WAVE2 = 2;
			public int AIR_WAVE = 3;
			public int ANTI_AIR_WAVE = 4;
			public int ANTIMAGIC_WAVE = 5;
			public int SIEGE_WAVE = 6;
			public int POSSESS_WAVE = 7;
			public int SKELETON_WAVE = 8;
			public int PLAGUE_WAVE = 9;
			public int BURNING_WAVE = 10;
			public int F_U1_WAVE = 11;
			public int F_U2_WAVE = 12;
			public int F_U3_WAVE = 13;
			public int CMD_SET_X1 = 1;
			public int CMD_SET_Y1 = 2;
			public int CMD_SET_SEQUENCE = 3;
			public int CMD_SET_TARGET = 4;
			public int CMD_STOP = 5;
			public int CMD_SET_X2 = 6;
			public int CMD_SET_Y2 = 7;
			public int BANSHEE_POSSESS = UnitId( "uC00" );
			public int BANSHEE_CURSE = UnitId( "uC01" );
			public int BANSHEE_ANTIMAGIC = UnitId( "uC02" );
			//constant integer NECRO_CRIPPLE      = 'uC03'
			//constant integer NECRO_RAISE        = 'uC04'
			//constant integer NECRO_UNHOLY       = 'uC05'
			//constant integer ?                  = 'uC06'
			//constant integer ?                  = 'uC07'
			public int BUILD_INFERNAL = UnitId( "nC08" );
			//constant integer ?                  = 'uC09'
			//constant integer ?                  = 'uC10'
			//constant integer ?                  = 'uC11'
			public int GHOULZ = UnitId( "uC12" );
			public BJPlayer  USER = Player(1);
			public int  stage_x1 = 0;
			public int  stage_y1 = 0;
			public int  stage_x2 = 0;
			public int  stage_y2 = 0;
			public bool  need_stage2 = true;
			public bool  at_stage1 = false;
			public bool  aborting = false;
			public bool  send_lich = false;
			public bool  send_lord = false;
			public bool  send_azga = false;
			public int  wave_count = 0;
			public int  wave_restart = 0;
			public int  strength = 0;
			public int  target = 0;
			public int  harvest_ghouls = 0;
			public int [] wave_type;
			public int [] wave_sleep;
			public int [] wave_hero;
		//============================================================================
		//  add_wave
		//============================================================================
			public void add_wave( int whero , int wtype )
			{
				// Original JassCode
				wave_hero [wave_count] = whero;
				wave_type [wave_count] = wtype;
				if(  difficulty == HARD  )
				{
					wave_sleep [wave_count] = HARD_WAVE_DUR;
				}
				else
				{
					wave_sleep [wave_count] = NORMAL_WAVE_DUR;
				}
				wave_count = wave_count + 1;
			}

		//============================================================================
		//  pit_stop
		//============================================================================
			public void pit_stop( int ensecs , int hsecs )
			{
				// Original JassCode
				wave_hero [wave_count] = 0;
				wave_type [wave_count] = PIT_STOP_WAVE;
				if(  difficulty==HARD  )
				{
					wave_sleep [wave_count] = hsecs;
				}
				else
				{
					wave_sleep [wave_count] = ensecs;
				}
				wave_count = wave_count + 1;
			}

		//============================================================================
		//  loop_waves
		//============================================================================
			public void loop_waves(  )
			{
				// Original JassCode
				wave_restart = wave_count;
			}

		//============================================================================
		//  setup_waves
		//============================================================================
			public void setup_waves( int sequence )
			{
				// Original JassCode
				TraceI("***** setup_waves (group {0}) *****\n",sequence);
				wave_count = 0;
				//------------------------------------------------------------------------
				// Jaina
				if(  sequence == 1  )
				{
					//------------------------------------------------------------------------
					add_wave( 0, BASIC_WAVE1 );
					add_wave( 0, BASIC_WAVE2 );
					// Jaina theme
					add_wave( 0, ANTIMAGIC_WAVE );
					add_wave( LICH, POSSESS_WAVE );
					pit_stop( 20, 20 );
					add_wave( 0, ANTI_AIR_WAVE );
					add_wave( 0, AIR_WAVE );
					pit_stop( 30, 30 );
					// Jaina theme
					add_wave( DREAD_LORD, ANTIMAGIC_WAVE );
					add_wave( LICH, POSSESS_WAVE );
					pit_stop( 30, 30 );
					loop_waves();
					add_wave( PIT_LORD, F_U1_WAVE );
					pit_stop( 40, 30 );
					add_wave( DREAD_LORD, F_U2_WAVE );
					pit_stop( 40, 30 );
					add_wave( PIT_LORD, F_U3_WAVE );
					//------------------------------------------------------------------------
					// Thrall
				}
				else if(  sequence == 2  )
				{
					//------------------------------------------------------------------------
					add_wave( 0, BASIC_WAVE1 );
					add_wave( 0, BASIC_WAVE2 );
					// Thrall theme
					add_wave( DREAD_LORD, SIEGE_WAVE );
					add_wave( LICH, SKELETON_WAVE );
					pit_stop( 30, 30 );
					add_wave( 0, ANTI_AIR_WAVE );
					add_wave( 0, AIR_WAVE );
					pit_stop( 30, 30 );
					// Thrall theme
					add_wave( LICH, SKELETON_WAVE );
					add_wave( DREAD_LORD, SIEGE_WAVE );
					pit_stop( 60, 30 );
					loop_waves();
					add_wave( PIT_LORD, F_U1_WAVE );
					pit_stop( 40, 30 );
					add_wave( DREAD_LORD, F_U2_WAVE );
					pit_stop( 40, 30 );
					add_wave( PIT_LORD, F_U3_WAVE );
					//------------------------------------------------------------------------
					// sequence == 3 then // USER
				}
				else
				{
					//------------------------------------------------------------------------
					add_wave( 0, BASIC_WAVE1 );
					add_wave( 0, BASIC_WAVE2 );
					pit_stop( 60, 40 );
					add_wave( 0, AIR_WAVE );
					add_wave( LICH, SKELETON_WAVE );
					pit_stop( 60, 40 );
					// User theme
					add_wave( 0, PLAGUE_WAVE );
					add_wave( DREAD_LORD, BURNING_WAVE );
					pit_stop( 60, 40 );
					// recap Jaina theme
					add_wave( 0, ANTIMAGIC_WAVE );
					add_wave( 0, POSSESS_WAVE );
					pit_stop( 60, 40 );
					// recap Thrall theme
					add_wave( DREAD_LORD, SIEGE_WAVE );
					add_wave( LICH, SKELETON_WAVE );
					pit_stop( 60, 40 );
					loop_waves();
					add_wave( PIT_LORD, F_U1_WAVE );
					add_wave( DREAD_LORD, F_U2_WAVE );
					add_wave( PIT_LORD, F_U3_WAVE );
				}
			}

		//============================================================================
		//  wave_units
		//============================================================================
			public void wave_units( int norm , int hard , int unitid )
			{
				// Original JassCode
				int adding;
				int index;
				if(  difficulty==HARD  )
				{
					adding = hard;
				}
				else
				{
					adding = norm;
				}
				if(  adding < 1  )
				{
					return;
				}
				// if unitid is already being built, add more to existing desires
				//
				index = 0;
				while( true )
				{
					if(  index == harass_length )
						break;
					if(  harass_units[index] == unitid  )
					{
						harass_qty[index] = harass_qty[index] + adding;
						harass_max[index] = harass_max[index] + adding;
						return;
					}
					index = index + 1;
				}
				// if unitid is not in harass list then add this new unitid
				//
				harass_qty [harass_length] = adding;
				harass_max [harass_length] = adding;
				harass_units [harass_length] = unitid;
				harass_length = harass_length + 1;
			}

		//============================================================================
		//  do_BONUS_LOVE
		//============================================================================
			public void do_BONUS_LOVE(  )
			{
				// Original JassCode
				wave_units( 1, 1, MEAT_WAGON );
			}

		//============================================================================
		//  do_EVERY_WAVE_FIRST
		//============================================================================
			public void do_EVERY_WAVE_FIRST(  )
			{
				// Original JassCode
			}

		//============================================================================
		//  do_EVERY_WAVE_LAST
		//============================================================================
			public void do_EVERY_WAVE_LAST( int heroid )
			{
				// Original JassCode
				if(  heroid != 0  )
				{
					// undead altar
					wave_units( 1, 1, heroid );
					// temple of the damned
					wave_units( 1, 1, BANSHEE );
				}
			}

		//============================================================================
		//  do_BASIC_WAVE1
		//============================================================================
			public void do_BASIC_WAVE1(  )
			{
				// Original JassCode
				// crypt
				wave_units( 6,10, GHOULZ );
				// crypt
				wave_units( 4, 6, CRYPT_FIEND );
			}

		//============================================================================
		//  do_BASIC_WAVE2
		//============================================================================
			public void do_BASIC_WAVE2(  )
			{
				// Original JassCode
				wave_units( 0, 1, MEAT_WAGON );
				// crypt
				wave_units( 8,12, GHOULZ );
				// crypt
				wave_units( 5, 7, CRYPT_FIEND );
			}

		//============================================================================
		//  do_POSSESS_WAVE
		//============================================================================
			public void do_POSSESS_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 2, 3, ABOMINATION );
				// temple of the damned
				wave_units( 8,10, BANSHEE_POSSESS );
			}

		//============================================================================
		//  do_ANTIMAGIC_WAVE
		//============================================================================
			public void do_ANTIMAGIC_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 0, 1, MEAT_WAGON );
				// crypt
				wave_units( 2, 3, DOOMGUARD );
				// crypt
				wave_units( 6, 8, FELLHOUND );
			}

		//============================================================================
		//  do_AIR_WAVE
		//============================================================================
			public void do_AIR_WAVE(  )
			{
				// Original JassCode
				// crypt
				wave_units( 6, 8, GARGOYLE );
				// boneyard
				wave_units( 4, 5, FROST_WYRM );
			}

		//============================================================================
		//  do_ANTI_AIR_WAVE
		//============================================================================
			public void do_ANTI_AIR_WAVE(  )
			{
				// Original JassCode
				// crypt
				wave_units( 1, 2, DOOMGUARD );
				// crypt
				wave_units( 5, 7, CRYPT_FIEND );
				// crypt
				wave_units( 7, 9, GARGOYLE );
			}

		//============================================================================
		//  do_SIEGE_WAVE
		//============================================================================
			public void do_SIEGE_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 5, 7, MEAT_WAGON );
				// slaughterhouse
				wave_units( 5, 7, ABOMINATION );
				// boneyard
				wave_units( 2, 3, FROST_WYRM );
			}

		//============================================================================
		//  do_BURNING_WAVE
		//============================================================================
			public void do_BURNING_WAVE(  )
			{
				// Original JassCode
				// crypt
				wave_units( 1, 2, DOOMGUARD );
				// crypt
				wave_units( 6, 8, BUILD_INFERNAL );
			}

		//============================================================================
		//  do_PLAGUE_WAVE
		//============================================================================
			public void do_PLAGUE_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 1, 2, MEAT_WAGON );
				// crypt
				wave_units( 4, 6, GHOULZ );
				// slaughterhouse
				wave_units( 5, 7, ABOMINATION );
				// temple of the damned
				wave_units( 3, 4, NECRO );
			}

		//============================================================================
		//  do_SKELETON_WAVE
		//============================================================================
			public void do_SKELETON_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 0, 1, MEAT_WAGON );
				// slaughterhouse
				wave_units( 4, 6, ABOMINATION );
				// temple of the damned
				wave_units( 8,10, NECRO );
			}

		//============================================================================
		//  do_F_U1_WAVE
		//============================================================================
			public void do_F_U1_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 1, 2, MEAT_WAGON );
				// crypt
				wave_units( 2, 3, DOOMGUARD );
				// crypt
				wave_units( 5, 7, FELLHOUND );
				// temple of the damned
				wave_units( 2, 3, BANSHEE_CURSE );
				// boneyard
				wave_units( 2, 3, FROST_WYRM );
				// temple of the damned
				wave_units( 2, 3, NECRO );
			}

		//============================================================================
		//  do_F_U2_WAVE
		//============================================================================
			public void do_F_U2_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 1, 2, MEAT_WAGON );
				// crypt
				wave_units( 2, 3, BUILD_INFERNAL );
				// slaughterhouse
				wave_units( 3, 5, ABOMINATION );
				// crypt
				wave_units( 4, 6, CRYPT_FIEND );
				// temple of the damned
				wave_units( 2, 3, BANSHEE_CURSE );
				// temple of the damned
				wave_units( 2, 3, NECRO );
			}

		//============================================================================
		//  do_F_U3_WAVE
		//============================================================================
			public void do_F_U3_WAVE(  )
			{
				// Original JassCode
				// slaughterhouse
				wave_units( 2, 3, MEAT_WAGON );
				// crypt
				wave_units( 2, 3, BUILD_INFERNAL );
				// temple of the damned
				wave_units( 3, 4, BANSHEE_POSSESS );
				// crypt
				wave_units( 3, 4, DOOMGUARD );
				// crypt
				wave_units( 4, 5, FELLHOUND );
				// boneyard
				wave_units( 2, 3, FROST_WYRM );
				// undead altar
				wave_units( 1, 1, LICH );
				// temple of the damned
				wave_units( 2, 3, NECRO );
			}

		//============================================================================
		//  bonus_waves
		//============================================================================
			public int bonus_waves( int allow , int factor , int base1 , int cap )
			{
				// Original JassCode
				int trees = GetPlayerUnitTypeCount( USER, ANCIENT_PROTECT );
				int result;
				if(  trees <= allow || factor <= 0  )
				{
					return base1;
				}
				result = base1 + (trees - allow) / factor + 1;
				if(  result > cap  )
				{
					return cap;
				}
				return result;
			}

		//============================================================================
		//  consider_bonus_love
		//============================================================================
			public void consider_bonus_love(  )
			{
				// Original JassCode
				int times;
				if(  difficulty==HARD  )
				{
					times = bonus_waves( HARD_ALLOW_TREES, HARD_TREE_FACTOR, HARD_BASE_BONUS, HARD_BONUS_CAP );
				}
				else
				{
					times = bonus_waves( NORM_ALLOW_TREES, NORM_TREE_FACTOR, NORM_BASE_BONUS, NORM_BONUS_CAP );
				}
				TraceI("Bonus love = {0}\n",times);
				while( true )
				{
					if(  times <= 0 )
						break;
					do_BONUS_LOVE();
					times = times - 1;
				}
			}

		//============================================================================
		//  check_abort
		//============================================================================
			public void check_abort(  )
			{
				// Original JassCode
				if(  CommandsWaiting() == 0  )
				{
					return;
				}
				if(  GetLastCommand()==CMD_STOP  )
				{
					Trace("***** ABORT *****\n");
					aborting = true;
					SleepForever();
				}
				else
				{
					Trace("***** UNEXPECTED COMMAND *****\n");
					PopLastCommand();
				}
			}

		//============================================================================
		//  form_wave
		//============================================================================
			public void form_wave(  )
			{
				// Original JassCode
				int index;
				index = 0;
				while( true )
				{
					if(  index == harass_length )
						break;
					AddAssault(harass_max[index],harass_units[index]);
					index = index + 1;
				}
			}

		//============================================================================
		//  suicide_wave
		//============================================================================
			public void suicide_wave(  )
			{
				// Original JassCode
				int index;
				int count;
				int desire;
				int unitid;
				int length = harass_length;
				harass_length = 0;
				index = 0;
				while( true )
				{
					if(  index == length )
						break;
					TraceI("wave cycle {0}\n",index+1);
					desire = harass_max[index];
					unitid = harass_units[index];
					if(  unitid==LICH  )
					{
						send_lich = true;
					}
					else if(  unitid==DREAD_LORD  )
					{
						send_lord = true;
					}
					else if(  unitid==PIT_LORD  )
					{
						send_azga = true;
					}
					// 20 cycles
					sleep_seconds = sleep_seconds-2;
					count = 0;
					while( true )
					{
						SuicideUnitEx(1,unitid,target);
						Sleep(0.1);
						count = count + 1;
						// 2 seconds
						if(  count==20 )
							break;
					}
					index = index + 1;
				}
				Trace("all waves sent\n");
			}

		//============================================================================
		// suicide_unit
		//============================================================================
			public void suicide_unit( int unitid )
			{
				// Original JassCode
				SuicideUnitEx(1,unitid,target);
				SuicideUnitEx(1,SKEL_WARRIOR,target);
				Sleep(0.1);
			}

		//============================================================================
		//  possessions
		//============================================================================
			public void possessions(  )
			{
				// Original JassCode
				sleep_seconds = sleep_seconds - 1;
				suicide_unit( INFERNAL );
				suicide_unit( FOOTMAN );
				suicide_unit( RIFLEMAN );
				suicide_unit( SORCERESS );
				suicide_unit( PRIEST );
				suicide_unit( MORTAR );
				suicide_unit( ELEMENTAL );
				suicide_unit( KNIGHT );
				suicide_unit( GRYPHON );
				suicide_unit( MILITIA );
				sleep_seconds = sleep_seconds - 1;
				suicide_unit( GRUNT );
				suicide_unit( HEAD_HUNTER );
				suicide_unit( TAUREN );
				suicide_unit( WITCH_DOCTOR );
				suicide_unit( KODO_BEAST );
				suicide_unit( RAIDER );
				suicide_unit( SHAMAN );
				suicide_unit( WYVERN );
				suicide_unit( SHANDRIS );
				suicide_unit( ENT );
				sleep_seconds = sleep_seconds - 1;
				suicide_unit( ARCHER );
				suicide_unit( DRUID_TALON );
				suicide_unit( DRUID_TALON_M );
				suicide_unit( DRUID_CLAW );
				suicide_unit( DRUID_CLAW_M );
				suicide_unit( DRYAD );
				suicide_unit( HIPPO );
				suicide_unit( HIPPO_RIDER );
				suicide_unit( HUNTRESS );
				suicide_unit( CHIMAERA );
			}

		//============================================================================
		//  send_hero
		//============================================================================
			public bool send_hero( bool send , int heroid )
			{
				// Original JassCode
				if(  ! send || GetUnitCountDone(heroid) < 1  )
				{
					return false;
				}
				SuicideUnitEx( 1, heroid, target );
				return true;
			}

		//============================================================================
		//  hero_failsafe
		//============================================================================
			public void hero_failsafe(  )
			{
				// Original JassCode
				while( true )
				{
					send_lich = send_hero( send_lich, LICH );
					Sleep(0.5);
					send_lord = send_hero( send_lord, DREAD_LORD );
					Sleep(0.5);
					send_azga = send_hero( send_azga, PIT_LORD );
					Sleep(0.5);
				}
			}

		//============================================================================
		//  send_waves
		//============================================================================
			public void send_waves(  )
			{
				// Original JassCode
				int index = 0;
				while( true )
				{
					if(  GetUnitCountDone(CRYPT)>0 )
						break;
					Sleep(1);
				}
				while( true )
				{
					check_abort();
					InitAssaultGroup();
					TraceI("next wave = {0}\n",wave_type[index]);
					TraceI("strength = {0}\n",strength);
					if(  wave_type[index]!=PIT_STOP_WAVE  )
					{
						do_EVERY_WAVE_FIRST();
						if(  index >= 2  )
						{
							consider_bonus_love();
						}
					}
					if(  wave_type[index]==BASIC_WAVE1  )
					{
						do_BASIC_WAVE1();
					}
					else if(  wave_type[index]==BASIC_WAVE2  )
					{
						do_BASIC_WAVE2();
					}
					else if(  wave_type[index]==AIR_WAVE  )
					{
						do_AIR_WAVE();
					}
					else if(  wave_type[index]==ANTI_AIR_WAVE  )
					{
						do_ANTI_AIR_WAVE();
					}
					else if(  wave_type[index]==ANTIMAGIC_WAVE  )
					{
						do_ANTIMAGIC_WAVE();
					}
					else if(  wave_type[index]==SIEGE_WAVE  )
					{
						do_SIEGE_WAVE();
					}
					else if(  wave_type[index]==POSSESS_WAVE  )
					{
						do_POSSESS_WAVE();
					}
					else if(  wave_type[index]==SKELETON_WAVE  )
					{
						do_SKELETON_WAVE();
					}
					else if(  wave_type[index]==PLAGUE_WAVE  )
					{
						do_PLAGUE_WAVE();
					}
					else if(  wave_type[index]==BURNING_WAVE  )
					{
						do_BURNING_WAVE();
					}
					else if(  wave_type[index]==F_U1_WAVE  )
					{
						do_F_U1_WAVE();
					}
					else if(  wave_type[index]==F_U2_WAVE  )
					{
						do_F_U2_WAVE();
					}
					else if(  wave_type[index]==F_U3_WAVE  )
					{
						do_F_U3_WAVE();
					}
					else if(  wave_type[index]==PIT_STOP_WAVE  )
					{
						// no units
						// error
					}
					else
					{
						Trace("**UNKNOWN WAVE CONTENTS**\n");
						do_BASIC_WAVE1();
					}
					if(  wave_type[index]!=PIT_STOP_WAVE  )
					{
						do_EVERY_WAVE_LAST(wave_hero[index]);
						if(  at_stage1  )
						{
							at_stage1 = false;
							SetCaptainHome(BOTH_CAPTAINS,stage_x2,stage_y2);
						}
						else
						{
							at_stage1 = true;
							SetCaptainHome(BOTH_CAPTAINS,stage_x1,stage_y1);
						}
					}
					AddSleepSeconds(wave_sleep[index]);
					while( true )
					{
						TraceI("forming wave (T{0} seconds)\n",-sleep_seconds);
						check_abort();
						possessions();
						form_wave();
						if(  sleep_seconds <= 0 )
							break;
					}
					suicide_wave();
					index = index + 1;
					if(  index==wave_count  )
					{
						index = wave_restart;
					}
				}
			}

		//============================================================================
		//  get_commands
		//============================================================================
			public void get_commands(  )
			{
				// Original JassCode
				int cmd;
				int data;
				while( true )
				{
					while( true )
					{
						if(  CommandsWaiting() != 0 )
							break;
						Sleep(1);
					}
					cmd = GetLastCommand();
					data = GetLastData();
					PopLastCommand();
					if(  cmd == CMD_SET_X1  )
					{
						TraceI("CMD_SET_X1 ({0})\n",data);
						stage_x1 = data;
					}
					else if(  cmd == CMD_SET_Y1  )
					{
						TraceI("CMD_SET_Y1 ({0})\n",data);
						stage_y1 = data;
					}
					else if(  cmd == CMD_SET_X2  )
					{
						TraceI("CMD_SET_X2 ({0})\n",data);
						stage_x2 = data;
						need_stage2 = false;
					}
					else if(  cmd == CMD_SET_Y2  )
					{
						TraceI("CMD_SET_Y2 ({0})\n",data);
						stage_y2 = data;
						need_stage2 = false;
					}
					else if(  cmd == CMD_SET_SEQUENCE  )
					{
						TraceI("CMD_SET_SEQUENCE ({0})\n",data);
						// Jaina's base
						if(  data==2  )
						{
							harvest_ghouls = 5;
							// original base and Thrall's base
						}
						else
						{
							harvest_ghouls = 13;
						}
						setup_waves(data);
					}
					else if(  cmd == CMD_SET_TARGET  )
					{
						TraceI("CMD_SET_TARGET ({0})\n",data);
						target = data;
						if(  need_stage2  )
						{
							stage_x2 = stage_x1;
							stage_y2 = stage_y1;
						}
						SetCaptainHome(BOTH_CAPTAINS,stage_x1,stage_y1);
						send_waves();
					}
					else
					{
						TraceI("unknown command ({0})\n",cmd);
						TraceI("unknown data ({0})\n",data);
					}
				}
			}

		//============================================================================
		//  start_unit
		//============================================================================
			public void start_unit( int qty , int unitid , bool wait )
			{
				// Original JassCode
				SetBuildUnit( qty, unitid );
				while( true )
				{
					if(  TownCount(unitid) >= qty )
						break;
					Sleep(2);
				}
				if(  ! wait  )
				{
					return;
				}
				while( true )
				{
					if(  TownCountDone(unitid) >= qty )
						break;
					Sleep(1);
				}
			}

		//============================================================================
		//  define_town
		//============================================================================
			public void define_town(  )
			{
				// Original JassCode
				do_campaign_farms = false;
				campaign_wood_peons = 15;
				campaign_basics_speed = 3;
				SetSlowChopping(false);
				start_unit( 1, ACOLYTE, true );
				start_unit( 1, NECROPOLIS_1, false );
				start_unit( 2, CRYPT, false );
				start_unit( 1, GRAVEYARD, false );
				start_unit( 1, UNDEAD_ALTAR, false );
				start_unit( 4, ZIGGURAT_1, false );
				SetBuildUnit( harvest_ghouls, GHOUL );
				start_unit( 1, NECROPOLIS_2, true );
				start_unit( 2, SLAUGHTERHOUSE, false );
				start_unit( 1, DAMNED_TEMPLE, false );
				start_unit( 1, SAC_PIT, false );
				start_unit( 1, NECROPOLIS_3, true );
				start_unit( 1, BONEYARD, false );
				start_unit( 4, ZIGGURAT_2, false );
				start_unit( 4, ACOLYTE, false );
				while( true )
				{
					if(  aborting && GetUnitCountDone(ACOLYTE)>0 )
						break;
					Sleep(5);
				}
				Trace("***** UNSUMMON TOWN *****\n");
				InitBuildArray();
				InitAssaultGroup();
				UnsummonAll();
				SleepForever();
			}

		//============================================================================
		//  main
		//============================================================================
			public void main(  )
			{
				// Original JassCode
				TraceI("***** rainbow main started for {0} *****\n",GetAiPlayer());
				if(  GetAiPlayer()==2  )
				{
					do_debug_cheats = true;
					Cheat("aitrace");
					//call Cheat("ss")
				}
				CampaignAI(ZIGGURAT_1,null);
				StartThread( define_town);
				StartThread( hero_failsafe);
				get_commands();
			}

		} // class n07_rainbow_ai 

	}

