// Generated by .


	public partial class GameDefine 
	{

		public class undead_ai
		{
		//==================================================================================================
		//  Undead Melee Strategic AI
		//==================================================================================================
			public bool  basic_opening = true;
			public bool  b_hero1_done = false;
			public bool  b_hero2_done = false;
			public bool  b_hero3_done = false;
			public bool  b_sphinx_ok = false;
			// attacking ghouls
			public int  AG = 0;
			// wood ghouls
			public int  WG = 0;
			public int  c_abom = 0;
			public int  c_abom_done = 0;
			public int  c_acolyte = 0;
			public int  c_altar_done = 0;
			public int  c_banshee = 0;
			public int  c_banshee_done = 0;
			public int  c_boneyard_done = 0;
			public int  c_citadel_done = 0;
			public int  c_fiend = 0;
			public int  c_fiend_done = 0;
			public int  c_food_made = 0;
			public int  c_food_used = 0;
			public int  c_garg = 0;
			public int  c_garg_done = 0;
			public int  c_ghoul_done = 0;
			public int  c_gold = 0;
			public int  c_gold_owned = 0;
			public int  c_grave_done = 0;
			public int  c_halls_done = 0;
			public int  c_hero1_done = 0;
			public int  c_hero2_done = 0;
			public int  c_hero3_done = 0;
			public int  c_mines = 0;
			public int  c_neclis = 0;
			public int  c_neclis_done = 0;
			public int  c_necro = 0;
			public int  c_necro_done = 0;
			public int  c_slaughter_done = 0;
			public int  c_sphinx_done = 0;
			public int  c_spirit_done = 0;
			public int  c_statue = 0;
			public int  c_statue_done = 0;
			public int  c_temple_done = 0;
			public int  c_tomb_done = 0;
			public int  c_undead_mines = 0;
			public int  c_wagon = 0;
			public int  c_wagon_done = 0;
			public int  c_web_fiend_done = 0;
			public int  c_wood = 0;
			public int  c_wyrm_done = 0;
			public int  c_zep = 0;
			public int  c_zig = 0;
			public int  c_zig_done = 0;
		//--------------------------------------------------------------------------------------------------
		//  set_skills
		//--------------------------------------------------------------------------------------------------
			public void set_skills(  )
			{
				// Original JassCode
				skill[ 1] = FROST_NOVA;
				skill[ 2] = FROST_ARMOR;
				skill[ 3] = FROST_NOVA;
				skill[ 4] = DARK_RITUAL;
				skill[ 5] = FROST_NOVA;
				skill[ 6] = DEATH_DECAY;
				skill[ 7] = FROST_ARMOR;
				skill[ 8] = DARK_RITUAL;
				skill[ 9] = FROST_ARMOR;
				skill[10] = DARK_RITUAL;
				SetSkillArray(1,LICH);
				SetSkillArray(2,LICH);
				SetSkillArray(3,LICH);
				skill[ 1] = SLEEP;
				skill[ 2] = VAMP_AURA;
				skill[ 3] = SLEEP;
				skill[ 4] = CARRION_SWARM;
				skill[ 5] = SLEEP;
				skill[ 6] = INFERNO;
				skill[ 7] = CARRION_SWARM;
				skill[ 8] = VAMP_AURA;
				skill[ 9] = CARRION_SWARM;
				skill[10] = VAMP_AURA;
				SetSkillArray(1,DREAD_LORD);
				skill[ 1] = CARRION_SWARM;
				skill[ 2] = SLEEP;
				skill[ 3] = CARRION_SWARM;
				skill[ 4] = VAMP_AURA;
				skill[ 5] = CARRION_SWARM;
				skill[ 6] = INFERNO;
				skill[ 7] = VAMP_AURA;
				skill[ 8] = VAMP_AURA;
				skill[ 9] = SLEEP;
				skill[10] = SLEEP;
				SetSkillArray(2,DREAD_LORD);
				SetSkillArray(3,DREAD_LORD);
				skill[ 1] = DEATH_COIL;
				skill[ 2] = UNHOLY_AURA;
				skill[ 3] = DEATH_COIL;
				skill[ 4] = UNHOLY_AURA;
				skill[ 5] = DEATH_COIL;
				skill[ 6] = ANIM_DEAD;
				skill[ 7] = UNHOLY_AURA;
				skill[ 8] = DEATH_PACT;
				skill[ 9] = DEATH_PACT;
				skill[10] = DEATH_PACT;
				SetSkillArray(1,DEATH_KNIGHT);
				SetSkillArray(2,DEATH_KNIGHT);
				SetSkillArray(3,DEATH_KNIGHT);
				skill[ 1] = CARRION_SCARAB;
				skill[ 2] = THORNY_SHIELD;
				skill[ 3] = CARRION_SCARAB;
				skill[ 4] = IMPALE;
				skill[ 5] = CARRION_SCARAB;
				skill[ 6] = LOCUST_SWARM;
				skill[ 7] = THORNY_SHIELD;
				skill[ 8] = IMPALE;
				skill[ 9] = THORNY_SHIELD;
				skill[10] = IMPALE;
				SetSkillArray(1,CRYPT_LORD);
				skill[ 1] = IMPALE;
				skill[ 2] = THORNY_SHIELD;
				skill[ 3] = IMPALE;
				skill[ 4] = THORNY_SHIELD;
				skill[ 5] = IMPALE;
				skill[ 6] = LOCUST_SWARM;
				skill[ 7] = THORNY_SHIELD;
				skill[ 8] = CARRION_SCARAB;
				skill[ 9] = CARRION_SCARAB;
				skill[10] = CARRION_SCARAB;
				SetSkillArray(2,CRYPT_LORD);
				SetSkillArray(3,CRYPT_LORD);
			}

		//--------------------------------------------------------------------------------------------------
		//  setup_force
		//--------------------------------------------------------------------------------------------------
			public void setup_force(  )
			{
				// Original JassCode
				AwaitMeleeHeroes();
				InitMeleeGroup();
				SetAssaultGroup( AG,AG, GHOUL );
				SetMeleeGroup( hero_id );
				SetMeleeGroup( hero_id2 );
				SetMeleeGroup( hero_id3 );
				SetMeleeGroup( CRYPT_FIEND );
				SetMeleeGroup( ABOMINATION );
				SetMeleeGroup( NECRO );
				SetMeleeGroup( BANSHEE );
				SetMeleeGroup( GARGOYLE );
				SetMeleeGroup( FROST_WYRM );
				SetMeleeGroup( OBS_STATUE );
				if(  c_sphinx_done >= 1  )
				{
					SetMeleeGroup( BLK_SPHINX );
				}
				SetInitialWave(10);
			}

		//--------------------------------------------------------------------------------------------------
		//  force_level
		//--------------------------------------------------------------------------------------------------
			public int force_level(  )
			{
				// Original JassCode
				// basic hero
				int level = 4;
				level = level + 2 * (AG + c_necro_done + c_banshee_done + c_statue_done);
				level = level + 3 * (c_fiend_done + c_garg_done + c_sphinx_done);
				level = level + 4 * c_abom_done;
				level = level + 5 * c_hero3_done;
				level = level + 6 * (c_hero2_done + c_wyrm_done);
				return level;
			}

		//--------------------------------------------------------------------------------------------------
		//  attack_sequence
		//--------------------------------------------------------------------------------------------------
			public void attack_sequence(  )
			{
				// Original JassCode
				bool needs_exp;
				bool has_siege;
				bool air_units;
				int level;
				while( true )
				{
					if(  c_hero1_done >= 1 )
						break;
					Sleep(2);
				}
				if(  MeleeDifficulty() == MELEE_NEWBIE  )
				{
					Sleep(240);
				}
				StaggerSleep(0,2);
				while( true )
				{
					while( true )
					{
						if(  ! CaptainRetreating() )
							break;
						Sleep(2);
					}
					if(  basic_opening  )
					{
						while( true )
						{
							if(  c_ghoul_done >= 6 )
								break;
							Sleep(1);
						}
						AG = 6;
						WG = c_ghoul_done - AG;
					}
					else
					{
						while( true )
						{
							WG = Max(0,Min(10 - c_wood / 120,c_ghoul_done));
							AG = c_ghoul_done - WG;
							if(  (AG + 2*c_abom_done) >= 4 )
								break;
							Sleep(1);
						}
					}
					setup_force();
					level = force_level();
					max_creeps = level * 4 / 5;
					min_creeps = max_creeps - 10;
					if(  min_creeps < 0  )
					{
						min_creeps = 0;
					}
					needs_exp = take_exp && (level >= 9 || c_gold_owned < 2000);
					has_siege = level >= 40 || c_wagon_done > 0 || c_wyrm_done > 0;
					air_units = c_garg_done > 0 || c_sphinx_done > 0 || c_wyrm_done > 0;
					allow_air_creeps = (3*c_garg_done + 6*c_wyrm_done + 2*c_web_fiend_done) >= 6;
					SingleMeleeAttack(needs_exp,has_siege,false,air_units);
					AG = 0;
					WG = c_ghoul_done;
					if(  MeleeDifficulty() == MELEE_NEWBIE  )
					{
						Sleep(60);
					}
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  init_vars
		//--------------------------------------------------------------------------------------------------
			public void init_vars(  )
			{
				// Original JassCode
				c_abom = GetUnitCount(ABOMINATION);
				c_abom_done = GetUnitCountDone(ABOMINATION);
				c_acolyte = GetUnitCount(ACOLYTE);
				c_altar_done = GetUnitCountDone(UNDEAD_ALTAR);
				c_banshee = GetUnitCount(BANSHEE);
				c_banshee_done = GetUnitCountDone(BANSHEE);
				c_boneyard_done = GetUnitCountDone(BONEYARD);
				c_citadel_done = GetUnitCountDone(NECROPOLIS_3);
				c_fiend = GetUnitCount(CRYPT_FIEND);
				c_fiend_done = GetUnitCountDone(CRYPT_FIEND);
				c_food_made = c_neclis * GetFoodMade(NECROPOLIS_1) + c_zig * GetFoodMade(ZIGGURAT_1);
				c_food_used = FoodUsed();
				c_garg = TownCount(GARGOYLE);
				c_garg_done = TownCountDone(GARGOYLE);
				c_ghoul_done = GetUnitCountDone(GHOUL);
				c_gold = GetGold();
				c_gold_owned = GetGoldOwned();
				c_grave_done = GetUnitCountDone(GRAVEYARD);
				c_halls_done = TownCountDone(NECROPOLIS_2);
				c_hero1_done = GetUnitCountDone(hero_id);
				c_hero2_done = GetUnitCountDone(hero_id2);
				c_hero3_done = GetUnitCountDone(hero_id3);
				c_mines = GetMinesOwned();
				c_neclis = TownCount(NECROPOLIS_1);
				c_neclis_done = TownCountDone(NECROPOLIS_1);
				c_necro = GetUnitCount(NECRO);
				c_necro_done = GetUnitCountDone(NECRO);
				c_slaughter_done = GetUnitCountDone(SLAUGHTERHOUSE);
				c_sphinx_done = GetUnitCountDone(BLK_SPHINX);
				c_spirit_done = GetUnitCountDone(ZIGGURAT_2);
				c_statue = GetUnitCount(OBS_STATUE);
				c_statue_done = GetUnitCountDone(OBS_STATUE);
				c_temple_done = GetUnitCountDone(DAMNED_TEMPLE);
				c_tomb_done = GetUnitCountDone(TOMB_OF_RELICS);
				c_undead_mines = GetUnitCount(UNDEAD_MINE);
				c_wagon = GetUnitCount(MEAT_WAGON);
				c_wagon_done = GetUnitCountDone(MEAT_WAGON);
				c_wood = GetWood();
				c_wyrm_done = GetUnitCountDone(FROST_WYRM);
				c_zep = GetUnitCount(ZEPPELIN);
				c_zig = TownCount(ZIGGURAT_1);
				c_zig_done = TownCountDone(ZIGGURAT_1);
				b_hero1_done = GetUnitCountDone(hero_id) >= 1;
				b_hero2_done = GetUnitCountDone(hero_id2) >= 1;
				b_hero3_done = GetUnitCountDone(hero_id3) >= 1;
				b_sphinx_ok = GetUpgradeLevel(UPG_BLK_SPHINX) > 0;
				WG = Max(0,c_ghoul_done - AG);
				if(  GetUpgradeLevel(UPG_FIEND_WEB) > 0  )
				{
					c_web_fiend_done = c_fiend_done;
				}
				else
				{
					c_web_fiend_done = 0;
				}
				if(  basic_opening && (b_hero2_done || (MeleeDifficulty() == MELEE_NEWBIE && c_tomb_done >= 1))  )
				{
					basic_opening = false;
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  set_vars
		//--------------------------------------------------------------------------------------------------
			public void set_vars(  )
			{
				// Original JassCode
				while( true )
				{
					init_vars();
					Sleep(1);
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  undead_mine
		//--------------------------------------------------------------------------------------------------
			public void undead_mine( int townid )
			{
				// Original JassCode
				if(  c_gold < 1000 && TownHasMine(townid)  )
				{
					SecondaryTown( townid, 1, UNDEAD_MINE );
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  do_upgrades
		//--------------------------------------------------------------------------------------------------
			public void do_upgrades(  )
			{
				// Original JassCode
				if(  c_halls_done >= 1 && c_fiend >= 1  )
				{
					SetBuildUpgr( 1, UPG_BURROWING );
				}
				if(  c_grave_done >= 1 && c_citadel_done >= 1  )
				{
					if(  c_garg >= 1  )
					{
						SetBuildUpgr( 1, UPG_STONE_FORM );
					}
					SetBuildUpgr( 1, UPG_GHOUL_FRENZY );
				}
				if(  c_boneyard_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_WYRM_BREATH );
				}
				if(  c_temple_done >= 1  )
				{
					if(  c_necro >= 1  )
					{
						SetBuildUpgr( 1, UPG_NECROS );
						if(  c_citadel_done >= 1  )
						{
							SetBuildUpgr( 2, UPG_NECROS );
							SetBuildUpgr( 2, UPG_SKEL_MASTERY );
						}
					}
					if(  c_banshee >= 1  )
					{
						SetBuildUpgr( 1, UPG_BANSHEE );
						if(  c_citadel_done >= 1  )
						{
							SetBuildUpgr( 2, UPG_BANSHEE );
						}
					}
					if(  c_necro >= 1  )
					{
						SetBuildUpgr( 1, UPG_SKEL_LIFE );
					}
				}
				if(  c_grave_done >= 1  )
				{
					SetBuildUpgr( 1, UPG_CR_ATTACK );
					SetBuildUpgr( 1, UPG_CR_ARMOR );
					SetBuildUpgr( 1, UPG_UNHOLY_STR );
					SetBuildUpgr( 1, UPG_UNHOLY_ARMOR );
					if(  c_halls_done >= 1  )
					{
						SetBuildUpgr( 2, UPG_CR_ATTACK );
						SetBuildUpgr( 2, UPG_CR_ARMOR );
						SetBuildUpgr( 2, UPG_UNHOLY_STR );
						SetBuildUpgr( 2, UPG_UNHOLY_ARMOR );
						if(  c_citadel_done >= 1  )
						{
							SetBuildUpgr( 3, UPG_CR_ATTACK );
							SetBuildUpgr( 3, UPG_CR_ARMOR );
							SetBuildUpgr( 3, UPG_UNHOLY_STR );
							SetBuildUpgr( 3, UPG_UNHOLY_ARMOR );
						}
					}
				}
				if(  c_slaughter_done >= 1 && c_citadel_done >= 1  )
				{
					if(  c_abom >= 1  )
					{
						SetBuildUpgr( 1, UPG_PLAGUE );
					}
					if(  c_statue >= 1 && c_tomb_done >= 1  )
					{
						SetBuildUpgr( 1, UPG_BLK_SPHINX );
					}
				}
				//    if c_slaughter_done >= 1 and c_citadel_done >= 1 and c_wagon >= 1 and c_necro >= 1 then
				//        call SetBuildUpgr( 1, UPG_EXHUME )
				//    endif
			}

		//--------------------------------------------------------------------------------------------------
		//  build_sequence
		//--------------------------------------------------------------------------------------------------
			public void build_sequence(  )
			{
				// Original JassCode
				int WG2;
				InitBuildArray();
				if(  basic_opening  )
				{
					MeleeTownHall( 0, NECROPOLIS_1 );
					SetBuildUnit( 1, ACOLYTE );
					SetBuildUnit( 1, UNDEAD_MINE );
					SetBuildNext( 5, ACOLYTE );
					SetBuildUnit( 1, CRYPT );
					SetBuildUnit( 1, GHOUL );
					SetBuildUnit( 1, ZIGGURAT_1 );
					SetBuildUnit( 1, UNDEAD_ALTAR );
					SetBuildUnit( 2, GHOUL );
					SetBuildUnit( 2, ZIGGURAT_1 );
					SetBuildUnit( 3, GHOUL );
					SetBuildUnit( 1, hero_id );
					SetBuildUnit( 6, GHOUL );
					SetBuildUpgr( 1, UPG_CANNIBALIZE );
					SetBuildUnit( 1, GRAVEYARD );
					SetBuildUnit( 7, GHOUL );
					SetBuildUnit( 1, NECROPOLIS_2 );
					SetBuildUnit( 3, ZIGGURAT_1 );
					SetBuildUnit( 8, GHOUL );
					SetBuildUnit( 2, CRYPT_FIEND );
					SetBuildUnit( 1, TOMB_OF_RELICS );
					SetBuildUnit( 3, CRYPT_FIEND );
					SetBuildUpgr( 1, UPG_FIEND_WEB );
					if(  MeleeDifficulty() != MELEE_NEWBIE  )
					{
						SetBuildUnit( 1, hero_id2 );
					}
					undead_mine(1);
					BasicExpansion( c_mines < 2, UNDEAD_MINE );
					return;
				}
				// need an acolyte or nothing will get built
				//
				if(  c_neclis_done >= 1  )
				{
					SetBuildUnit( 1, ACOLYTE );
				}
				// keep producing mines and acolytes to get gold
				//
				undead_mine(0);
				undead_mine(1);
				if(  c_undead_mines >= 2  )
				{
					SetBuildNext( 10, ACOLYTE );
				}
				else if(  c_undead_mines == 1  )
				{
					SetBuildNext( 5, ACOLYTE );
				}
				// ghouls collect lumber
				//
				WG2 = Max(0,10 - c_wood / 120);
				if(  WG2 > 0  )
				{
					SetBuildUnit( 1, CRYPT );
					SetBuildNext( WG2, GHOUL );
				}
				// if we have low gold in our mines then we need to expand
				//
				if(  c_gold_owned < 2000 || (c_mines < 2 && c_acolyte > 5)  )
				{
					BasicExpansion( c_mines < 2, UNDEAD_MINE );
					if(  MeleeDifficulty() != MELEE_NEWBIE  )
					{
						GuardSecondary( 1, 2, ZIGGURAT_1 );
						if(  c_grave_done >= 1  )
						{
							GuardSecondary( 1, 2, ZIGGURAT_2 );
						}
					}
				}
				// get enough burrows to handle current food demand
				//
				if(  c_food_used + 7 >= c_food_made  )
				{
					SetBuildUnit( c_zig_done + 1, ZIGGURAT_1 );
				}
				// always rebuild heroes for defense
				//
				if(  c_altar_done >= 1  )
				{
					if(  b_hero1_done && MeleeDifficulty() != MELEE_NEWBIE  )
					{
						if(  b_hero2_done  )
						{
							if(  b_hero3_done || c_citadel_done >= 1  )
							{
								SetBuildUnit( 1, hero_id3 );
							}
						}
						else
						{
							SetBuildUnit( 1, hero_id2 );
						}
					}
					else
					{
						SetBuildUnit( 1, hero_id );
					}
				}
				else
				{
					SetBuildUnit( 1, UNDEAD_ALTAR );
				}
				// minimum melee defense
				//
				if(  c_slaughter_done >= 1 && c_citadel_done >= 1  )
				{
					SetBuildNext( 2, ABOMINATION );
				}
				else
				{
					SetBuildUnit( 1, CRYPT );
					SetBuildNext( WG2+6, GHOUL );
				}
				// minimum ranged/air defense
				//
				SetBuildUnit( 1, GRAVEYARD );
				if(  c_citadel_done >= 1  )
				{
					SetBuildNext( 4, GARGOYLE );
				}
				else
				{
					SetBuildUnit( 1, CRYPT );
					SetBuildNext( 3, CRYPT_FIEND );
				}
				// siege attackers
				//
				if(  c_boneyard_done >= 1  )
				{
					SetBuildNext( 2, FROST_WYRM );
				}
				else if(  c_slaughter_done >= 1  )
				{
					SetBuildNext( 2, MEAT_WAGON );
				}
				else
				{
					MeleeTownHall( 0, NECROPOLIS_1 );
					SetBuildUnit ( 1, NECROPOLIS_1 );
					SetBuildUnit( 1, NECROPOLIS_2 );
					SetBuildUnit( 1, SLAUGHTERHOUSE );
					SetBuildNext( 2, MEAT_WAGON );
				}
				// if we have a lot of gold then advance the tech tree
				//
				if(  c_gold > 1000  )
				{
					MeleeTownHall( 0, NECROPOLIS_1 );
					SetBuildUnit( 1, NECROPOLIS_1 );
					SetBuildUnit( 1, CRYPT );
					SetBuildUnit( 1, GRAVEYARD );
					SetBuildUnit( 1, TOMB_OF_RELICS );
					SetBuildUnit( 1, NECROPOLIS_2 );
					SetBuildNext( Min(c_neclis_done,c_halls_done+1), NECROPOLIS_2 );
					SetBuildNext( Min(c_zig_done,c_spirit_done+1), ZIGGURAT_2 );
					SetBuildUnit( 1, SLAUGHTERHOUSE );
					SetBuildUnit( 1, DAMNED_TEMPLE );
					SetBuildUnit( 1, NECROPOLIS_3 );
					SetBuildUnit( 1, SAC_PIT );
					SetBuildUnit( 1, BONEYARD );
					do_upgrades();
					if(  c_gold > 2000  )
					{
						BuildFactory( CRYPT );
						BuildFactory( DAMNED_TEMPLE );
						BuildFactory( SLAUGHTERHOUSE );
						BuildFactory( BONEYARD );
					}
				}
				else if(  c_food_used >= UPKEEP_TIER1  )
				{
					do_upgrades();
				}
				undead_mine(1);
				BasicExpansion( c_mines < 2, UNDEAD_MINE );
				MeleeTownHall( 1, NECROPOLIS_1 );
				if(  c_food_used >= UPKEEP_TIER2-10 && c_gold < 2000  )
				{
					return;
				}
				// extra troops
				//
				if(  c_citadel_done >= 1 && c_tomb_done >= 1  )
				{
					SetBuildUnit( 1, OBS_STATUE );
					if(  b_sphinx_ok  )
					{
						SetBuildUnit( 1, BLK_SPHINX );
					}
				}
				if(  c_temple_done >= 1  )
				{
					SetBuildUnit( 4, NECRO );
					SetBuildUnit( 2, BANSHEE );
				}
				if(  c_citadel_done >= 1 && c_tomb_done >= 1 && b_sphinx_ok  )
				{
					SetBuildUnit( 2, BLK_SPHINX );
				}
				if(  c_gold_owned < 10000  )
				{
					undead_mine(2);
					BasicExpansion( c_mines < 3, UNDEAD_MINE );
					MeleeTownHall( 2, NECROPOLIS_1 );
					GuardSecondary( 2, 2, ZIGGURAT_1 );
				}
				if(  c_food_used >= 60 && c_zep < 3  )
				{
					GetZeppelin();
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  harvest_gold
		//--------------------------------------------------------------------------------------------------
			public void harvest_gold( int townid )
			{
				// Original JassCode
				if(  TownHasMine(townid)  )
				{
					HarvestGold(townid,5);
				}
			}

		//--------------------------------------------------------------------------------------------------
		//  peon_asignment
		//--------------------------------------------------------------------------------------------------
			public void peon_assignment(  )
			{
				// Original JassCode
				while( true )
				{
					ClearHarvestAI();
					harvest_gold(0);
					harvest_gold(1);
					harvest_gold(2);
					harvest_gold(3);
					HarvestWood(0,WG);
					build_sequence();
					Sleep(GetRandomInt(1,3));
				}
			}

		//--------------------------------------------------------------------------------------------------
		//    main
		//--------------------------------------------------------------------------------------------------
			public void main(  )
			{
				// Original JassCode
				//xxx
				trace_on = GetAiPlayer()==1;
				PickMeleeHero(RACE_UNDEAD);
				set_skills();
				StandardAI(SkillArrays,  peon_assignment,  attack_sequence);
				StartThread( set_vars);
				PlayGame();
			}

		} // class undead_ai 

	}

