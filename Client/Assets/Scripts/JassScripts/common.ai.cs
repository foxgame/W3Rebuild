// Generated by .


	public partial class GameDefine 
	{
		//==================================================================================================
		//  $Id: common.ai,v 1.66.2.1 2003/05/09 09:17:04 abond Exp $
		//==================================================================================================
		public static void DebugS( string str )
		{
            // native code

            W3AIManager.instance.debugS( str );
		}

		public static void DebugFI( string str , int val )
		{
            // native code

            W3AIManager.instance.debugFI( str , val );
		}

		public static void DebugUnitID( string str , int val )
		{
            // native code

            W3AIManager.instance.debugUnitID( str , val );
		}

		public static void DisplayText( int p , string str )
		{
            // native code

            W3AIManager.instance.displayText( p , str );
		}

		public static void DisplayTextI( int p , string str , int val )
		{
            // native code

            W3AIManager.instance.displayTextI( p , str , val );
		}

		public static void DisplayTextII( int p , string str , int v1 , int v2 )
		{
            // native code

            W3AIManager.instance.displayTextII( p , str , v1 , v2 );
		}

		public static void DisplayTextIII( int p , string str , int v1 , int v2 , int v3 )
		{
            // native code

            W3AIManager.instance.displayTextIII( p , str , v1 , v2 , v3 );
		}

		public static bool DoAiScriptDebug(  )
		{
			// native code

			return W3AIManager.instance.doAiScriptDebug();
		}

		public static int GetAiPlayer(  )
		{
			// native code

			return W3AIManager.instance.getAiPlayer();
		}

		public static int GetHeroId(  )
		{
			// native code

			return W3AIManager.instance.getHeroId();
		}

		public static int GetHeroLevelAI(  )
		{
			// native code

			return W3AIManager.instance.getHeroLevelAI();
		}

		public static int GetUnitCount( int unitid )
		{
			// native code

			return W3AIManager.instance.getUnitCount( unitid );
		}

		public static int GetPlayerUnitTypeCount( BJPlayer p , int unitid )
		{
			// native code

			return W3AIManager.instance.getPlayerUnitTypeCount( p.id , unitid );
		}

		public static int GetUnitCountDone( int unitid )
		{
			// native code

			return W3AIManager.instance.getUnitCountDone( unitid );
		}

		public static int GetTownUnitCount( int id , int tn , bool dn )
		{
			// native code

			return W3AIManager.instance.getTownUnitCount( id , tn , dn );
		}

		public static int GetUnitGoldCost( int unitid )
		{
			// native code

			return W3AIManager.instance.getUnitGoldCost( unitid );
		}

		public static int GetUnitWoodCost( int unitid )
		{
			// native code

			return W3AIManager.instance.getUnitWoodCost( unitid );
		}

		public static int GetUnitBuildTime( int unitid )
		{
			// native code

			return W3AIManager.instance.getUnitBuildTime( unitid );
		}

		public static int GetMinesOwned(  )
		{
			// native code

			return W3AIManager.instance.getMinesOwned();
		}

		public static int GetGoldOwned(  )
		{
			// native code

			return W3AIManager.instance.getGoldOwned();
		}

		public static int TownWithMine(  )
		{
			// native code

			return W3AIManager.instance.townWithMine();
		}

		public static bool TownHasMine( int townid )
		{
			// native code

			return W3AIManager.instance.townHasMine( townid );
		}

		public static bool TownHasHall( int townid )
		{
			// native code

			return W3AIManager.instance.townHasHall( townid );
		}

		public static int GetUpgradeLevel( int id )
		{
			// native code

			return W3AIManager.instance.getUpgradeLevel( id );
		}

		public static int GetUpgradeGoldCost( int id )
		{
			// native code

			return W3AIManager.instance.getUpgradeGoldCost( id );
		}

		public static int GetUpgradeWoodCost( int id )
		{
			// native code

			return W3AIManager.instance.getUpgradeWoodCost( id );
		}

		public static int GetNextExpansion(  )
		{
			// native code

			return W3AIManager.instance.getNextExpansion();
		}

		public static BJUnit GetMegaTarget(  )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getMegaTarget();
			return bj;
		}

		public static BJUnit GetBuilding( BJPlayer p )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getBuilding( p.id );
			return bj;
		}

		public static int GetEnemyPower(  )
		{
			// native code

			return W3AIManager.instance.getEnemyPower();
		}

		public static void SetAllianceTarget( BJUnit id )
		{
            // native code

            W3AIManager.instance.setAllianceTarget( id.id );
		}

		public static BJUnit GetAllianceTarget(  )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getAllianceTarget();
			return bj;
		}

		public static bool SetProduce( int qty , int id , int town )
		{
			// native code

			return W3AIManager.instance.setProduce( qty , id , town );
		}

		public static void Unsummon( BJUnit unitid )
		{
            // native code

            W3AIManager.instance.unsummon( unitid.id );
		}

		public static bool SetExpansion( BJUnit peon , int id )
		{
			// native code

			return W3AIManager.instance.setExpansion( peon.id , id );
		}

		public static bool SetUpgrade( int id )
		{
			// native code

			return W3AIManager.instance.setUpgrade( id );
		}

		public static void SetHeroLevels( BJCodeInt func )
		{
            // native code

            W3AIManager.instance.setHeroLevels( func );
		}

		public static void SetNewHeroes( bool state )
		{
            // native code

            W3AIManager.instance.setNewHeroes( state );
		}

		public static void PurchaseZeppelin(  )
		{
            // native code

            W3AIManager.instance.purchaseZeppelin();
		}

		public static bool MergeUnits( int qty , int a , int b , int make )
		{
			// native code

			return W3AIManager.instance.mergeUnits( qty , a , b , make );
		}

		public static bool ConvertUnits( int qty , int id )
		{
			// native code

			return W3AIManager.instance.convertUnits( qty , id );
		}

		public static void SetCampaignAI(  )
		{
            // native code

            W3AIManager.instance.setCampaignAI();
		}

		public static void SetMeleeAI(  )
		{
            // native code

            W3AIManager.instance.setMeleeAI();
		}

		public static void SetTargetHeroes( bool state )
		{
            // native code

            W3AIManager.instance.setTargetHeroes( state );
		}

		public static void SetPeonsRepair( bool state )
		{
            // native code

            W3AIManager.instance.setPeonsRepair( state );
		}

		public static void SetRandomPaths( bool state )
		{
            // native code

            W3AIManager.instance.setRandomPaths( state );
		}

		public static void SetDefendPlayer( bool state )
		{
            // native code

            W3AIManager.instance.setDefendPlayer( state );
		}

		public static void SetHeroesFlee( bool state )
		{
            // native code

            W3AIManager.instance.setHeroesFlee( state );
		}

		public static void SetHeroesBuyItems( bool state )
		{
            // native code

            W3AIManager.instance.setHeroesBuyItems( state );
		}

		public static void SetWatchMegaTargets( bool state )
		{
            // native code

            W3AIManager.instance.setWatchMegaTargets( state );
		}

		public static void SetIgnoreInjured( bool state )
		{
            // native code

            W3AIManager.instance.setIgnoreInjured( state );
		}

		public static void SetHeroesTakeItems( bool state )
		{
            // native code

            W3AIManager.instance.setHeroesTakeItems( state );
		}

		public static void SetUnitsFlee( bool state )
		{
            // native code

            W3AIManager.instance.setUnitsFlee( state );
		}

		public static void SetGroupsFlee( bool state )
		{
            // native code

            W3AIManager.instance.setGroupsFlee( state );
		}

		public static void SetSlowChopping( bool state )
		{
            // native code

            W3AIManager.instance.setSlowChopping( state );
		}

		public static void SetCaptainChanges( bool allow )
		{
            // native code

            W3AIManager.instance.setCaptainChanges( allow );
		}

		public static void SetSmartArtillery( bool state )
		{
            // native code

            W3AIManager.instance.setSmartArtillery( state );
		}

		public static void SetReplacementCount( int qty )
		{
            // native code

            W3AIManager.instance.setReplacementCount( qty );
		}

		public static void GroupTimedLife( bool allow )
		{
            // native code

            W3AIManager.instance.groupTimedLife( allow );
		}

		public static void RemoveInjuries(  )
		{
            // native code

            W3AIManager.instance.removeInjuries();
		}

		public static void RemoveSiege(  )
		{
            // native code

            W3AIManager.instance.removeSiege();
		}

		public static void InitAssault(  )
		{
            // native code

            W3AIManager.instance.initAssault();
		}

		public static bool AddAssault( int qty , int id )
		{
			// native code

			return W3AIManager.instance.addAssault( qty , id );
		}

		public static bool AddDefenders( int qty , int id )
		{
			// native code

			return W3AIManager.instance.addDefenders( qty , id );
		}

		public static BJUnit GetCreepCamp( int min , int max , bool flyers_ok )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getCreepCamp( min , max , flyers_ok );
			return bj;
		}

		public static void StartGetEnemyBase(  )
		{
            // native code

            W3AIManager.instance.startGetEnemyBase();
		}

		public static bool WaitGetEnemyBase(  )
		{
			// native code

			return W3AIManager.instance.waitGetEnemyBase();
		}

		public static BJUnit GetEnemyBase(  )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getEnemyBase();
			return bj;
		}

		public static BJUnit GetExpansionFoe(  )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getExpansionFoe();
			return bj;
		}

		public static BJUnit GetEnemyExpansion(  )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getEnemyExpansion();
			return bj;
		}

		public static int GetExpansionX(  )
		{
			// native code

			return W3AIManager.instance.getExpansionX();
		}

		public static int GetExpansionY(  )
		{
            // native code

            return W3AIManager.instance.getExpansionY();
		}

		public static void SetStagePoint( double x , double y )
		{
            // native code

            W3AIManager.instance.setStagePoint( (float)x , (float)y );
		}

		public static void AttackMoveKill( BJUnit target )
		{
            // native code

            W3AIManager.instance.attackMoveKill( target.id );
		}

		public static void AttackMoveXY( int x , int y )
		{
            // native code

            W3AIManager.instance.attackMoveXY( x , y );
		}

		public static void LoadZepWave( int x , int y )
		{
            // native code

            W3AIManager.instance.loadZepWave( x , y );
		}

		public static bool SuicidePlayer( BJPlayer id , bool check_full )
		{
			// native code

			return W3AIManager.instance.suicidePlayer( id.id , check_full );
		}

		public static bool SuicidePlayerUnits( BJPlayer id , bool check_full )
		{
			// native code

			return W3AIManager.instance.suicidePlayerUnits( id.id , check_full );
		}

		public static bool CaptainInCombat( bool attack_captain )
		{
			// native code

			return W3AIManager.instance.captainInCombat( attack_captain );
		}

		public static bool IsTowered( BJUnit target )
		{
			// native code

			return W3AIManager.instance.isTowered( target.id );
		}

		public static void ClearHarvestAI(  )
		{
            // native code

            W3AIManager.instance.clearHarvestAI();
		}

		public static void HarvestGold( int town , int peons )
		{
            // native code

            W3AIManager.instance.harvestGold( town , peons );
		}

		public static void HarvestWood( int town , int peons )
		{
            // native code

            W3AIManager.instance.harvestWood( town , peons );
		}

		public static BJUnit GetExpansionPeon(  )
		{
            // native code

            BJUnit bj = new BJUnit();
            bj.id = W3AIManager.instance.getExpansionPeon();
			return bj;
		}

		public static void StopGathering(  )
		{
            // native code

            W3AIManager.instance.stopGathering();
		}

		public static void AddGuardPost( int id , double x , double y )
		{
            // native code

            W3AIManager.instance.addGuardPost( id , (float)x , (float)y );
		}

		public static void FillGuardPosts(  )
		{
            // native code

            W3AIManager.instance.fillGuardPosts();
        }

		public static void ReturnGuardPosts(  )
		{
            // native code

            W3AIManager.instance.returnGuardPosts();
		}

		public static void CreateCaptains(  )
		{
            // native code

            W3AIManager.instance.createCaptains();
		}

		public static void SetCaptainHome( int which , double x , double y )
		{
            // native code

            W3AIManager.instance.setCaptainHome( which , (float)x , (float)y );
		}

		public static void ResetCaptainLocs(  )
		{
            // native code

            W3AIManager.instance.resetCaptainLocs();
		}

		public static void ShiftTownSpot( double x , double y )
		{
            // native code

            W3AIManager.instance.shiftTownSpot( (float)x , (float)y );
		}

		public static void TeleportCaptain( double x , double y )
		{
            // native code

            W3AIManager.instance.teleportCaptain( (float)x , (float)y );
		}

		public static void ClearCaptainTargets(  )
		{
            // native code

            W3AIManager.instance.clearCaptainTargets();
		}

		public static void CaptainAttack( double x , double y )
		{
            // native code

            W3AIManager.instance.captainAttack( (float)x , (float)y );
		}

		public static void CaptainVsUnits( BJPlayer id )
		{
            // native code

            W3AIManager.instance.captainVsUnits( id.id );
		}

		public static void CaptainVsPlayer( BJPlayer id )
		{
            // native code

            W3AIManager.instance.captainVsPlayer( id.id );
		}

		public static void CaptainGoHome(  )
		{
            // native code

            W3AIManager.instance.captainGoHome();
		}

		public static bool CaptainIsHome(  )
		{
			// native code

			return W3AIManager.instance.captainIsHome();
		}

		public static bool CaptainIsFull(  )
		{
			// native code

			return W3AIManager.instance.captainIsFull();
		}

		public static bool CaptainIsEmpty(  )
		{
			// native code

			return W3AIManager.instance.captainIsEmpty();
		}

		public static int CaptainGroupSize(  )
		{
            // native code

            return W3AIManager.instance.captainGroupSize();
		}

		public static int CaptainReadiness(  )
		{
			// native code

			return W3AIManager.instance.captainReadiness();
		}

		public static bool CaptainRetreating(  )
		{
			// native code

			return W3AIManager.instance.captainRetreating();
		}

		public static int CaptainReadinessHP(  )
		{
			// native code

			return W3AIManager.instance.captainReadinessHP();
		}

		public static int CaptainReadinessMa(  )
		{
			// native code

			return W3AIManager.instance.captainReadinessMa();
		}

		public static bool CaptainAtGoal(  )
		{
			// native code

			return W3AIManager.instance.captainAtGoal();
		}

		public static bool CreepsOnMap(  )
		{
			// native code

			return W3AIManager.instance.creepsOnMap();
		}

		public static void SuicideUnit( int count , int unitid )
		{
            // native code

            W3AIManager.instance.suicideUnit( count , unitid );
		}

		public static void SuicideUnitEx( int ct , int uid , int pid )
		{
            // native code

            W3AIManager.instance.suicideUnitEx( ct , uid , pid );
		}

		public static void StartThread( BJCode func )
		{
            // native code

            W3AIManager.instance.startThread( func );
		}

		public static void Sleep( double seconds )
		{
            // native code

            W3AIManager.instance.sleep( (float)seconds );
		}

		public static bool UnitAlive( BJUnit id )
		{
			// native code

			return W3AIManager.instance.unitAlive( id.id );
		}

		public static bool UnitInvis( BJUnit id )
		{
			// native code

			return W3AIManager.instance.unitInvis( id.id );
		}

		public static int IgnoredUnits( int unitid )
		{
			// native code

			return W3AIManager.instance.ignoredUnits( unitid );
		}

		public static bool TownThreatened(  )
		{
			// native code

			return W3AIManager.instance.townThreatened();
		}

		public static void DisablePathing(  )
		{
            // native code

            W3AIManager.instance.disablePathing();
		}

		public static void SetAmphibious(  )
		{
            // native code

            W3AIManager.instance.setAmphibious();
		}

		public static int CommandsWaiting(  )
		{
			// native code

			return W3AIManager.instance.commandsWaiting();
		}

		public static int GetLastCommand(  )
		{
			// native code

			return W3AIManager.instance.getLastCommand();
		}

		public static int GetLastData(  )
		{
            // native code

            return W3AIManager.instance.getLastData();
		}

		public static void PopLastCommand(  )
		{
            // native code

            W3AIManager.instance.popLastCommand();
		}

		public static int MeleeDifficulty(  )
		{
			// native code

			return W3AIManager.instance.meleeDifficulty();
		}

		//============================================================================
		//  Globals for all AI scripts
		//============================================================================
		//--------------------------------------------------------------------
		//  HUMANS
		//--------------------------------------------------------------------
		// human heroes
		public static int ARCHMAGE = UnitId( "Hamg" );
		public static int PALADIN = UnitId( "Hpal" );
		public static int MTN_KING = UnitId( "Hmkg" );
		public static int BLOOD_MAGE = UnitId( "Hblm" );
		// human hero abilities
		public static int AVATAR = UnitId( "AHav" );
		public static int BASH = UnitId( "AHbh" );
		public static int THUNDER_BOLT = UnitId( "AHtb" );
		public static int THUNDER_CLAP = UnitId( "AHtc" );
		public static int DEVOTION_AURA = UnitId( "AHad" );
		public static int DIVINE_SHIELD = UnitId( "AHds" );
		public static int HOLY_BOLT = UnitId( "AHhb" );
		public static int RESURRECTION = UnitId( "AHre" );
		public static int BLIZZARD = UnitId( "AHbz" );
		public static int BRILLIANCE_AURA = UnitId( "AHab" );
		public static int MASS_TELEPORT = UnitId( "AHmt" );
		public static int WATER_ELEMENTAL = UnitId( "AHwe" );
		public static int BANISH = UnitId( "AHbn" );
		public static int FLAME_STRIKE = UnitId( "AHfs" );
		public static int SUMMON_PHOENIX = UnitId( "AHpx" );
		public static int SIPHON_MANA = UnitId( "AHdr" );
		// special human heroes
		public static int JAINA = UnitId( "Hjai" );
		public static int MURADIN = UnitId( "Hmbr" );
		public static int GARITHOS = UnitId( "Hlgr" );
		public static int KAEL = UnitId( "Hkal" );
		// human units
		public static int COPTER = UnitId( "hgyr" );
		public static int GYRO = COPTER;
		public static int ELEMENTAL = UnitId( "hwat" );
		public static int FOOTMAN = UnitId( "hfoo" );
		public static int FOOTMEN = FOOTMAN;
		public static int GRYPHON = UnitId( "hgry" );
		public static int KNIGHT = UnitId( "hkni" );
		public static int MORTAR = UnitId( "hmtm" );
		public static int PEASANT = UnitId( "hpea" );
		public static int PRIEST = UnitId( "hmpr" );
		public static int RIFLEMAN = UnitId( "hrif" );
		public static int RIFLEMEN = RIFLEMAN;
		public static int SORCERESS = UnitId( "hsor" );
		public static int TANK = UnitId( "hmtt" );
		public static int STEAM_TANK = TANK;
		public static int ROCKET_TANK = UnitId( "hrtt" );
		public static int MILITIA = UnitId( "hmil" );
		public static int SPELL_BREAKER = UnitId( "hspt" );
		public static int HUMAN_DRAGON_HAWK = UnitId( "hdhw" );
		// special human units
		public static int BLOOD_PRIEST = UnitId( "hbep" );
		public static int BLOOD_SORCERESS = UnitId( "hbes" );
		public static int BLOOD_PEASANT = UnitId( "nhew" );
		// human buildings
		public static int AVIARY = UnitId( "hgra" );
		public static int BARRACKS = UnitId( "hbar" );
		public static int BLACKSMITH = UnitId( "hbla" );
		public static int CANNON_TOWER = UnitId( "hctw" );
		public static int CASTLE = UnitId( "hcas" );
		public static int CHURCH = UnitId( "htws" );
		public static int MAGE_TOWER = CHURCH;
		public static int GUARD_TOWER = UnitId( "hgtw" );
		public static int HOUSE = UnitId( "hhou" );
		public static int HUMAN_ALTAR = UnitId( "halt" );
		public static int KEEP = UnitId( "hkee" );
		public static int LUMBER_MILL = UnitId( "hlum" );
		public static int SANCTUM = UnitId( "hars" );
		public static int ARCANE_SANCTUM = SANCTUM;
		public static int TOWN_HALL = UnitId( "htow" );
		public static int WATCH_TOWER = UnitId( "hwtw" );
		public static int WORKSHOP = UnitId( "harm" );
		public static int ARCANE_VAULT = UnitId( "hvlt" );
		public static int ARCANE_TOWER = UnitId( "hatw" );
		// human upgrades
		public static int UPG_MELEE = UnitId( "Rhme" );
		public static int UPG_RANGED = UnitId( "Rhra" );
		public static int UPG_ARTILLERY = UnitId( "Rhaa" );
		public static int UPG_ARMOR = UnitId( "Rhar" );
		public static int UPG_GOLD = UnitId( "Rhmi" );
		public static int UPG_MASONRY = UnitId( "Rhac" );
		public static int UPG_SIGHT = UnitId( "Rhss" );
		public static int UPG_DEFEND = UnitId( "Rhde" );
		public static int UPG_BREEDING = UnitId( "Rhan" );
		public static int UPG_PRAYING = UnitId( "Rhpt" );
		public static int UPG_SORCERY = UnitId( "Rhst" );
		public static int UPG_LEATHER = UnitId( "Rhla" );
		public static int UPG_GUN_RANGE = UnitId( "Rhri" );
		public static int UPG_WOOD = UnitId( "Rhlh" );
		public static int UPG_SENTINEL = UnitId( "Rhse" );
		public static int UPG_SCATTER = UnitId( "Rhsr" );
		public static int UPG_BOMBS = UnitId( "Rhgb" );
		public static int UPG_HAMMERS = UnitId( "Rhhb" );
		public static int UPG_CONT_MAGIC = UnitId( "Rhss" );
		public static int UPG_FRAGS = UnitId( "Rhfs" );
		public static int UPG_TANK = UnitId( "Rhrt" );
		public static int UPG_FLAK = UnitId( "Rhfc" );
		public static int UPG_CLOUD = UnitId( "Rhcd" );
		//--------------------------------------------------------------------
		//  ORCS
		//--------------------------------------------------------------------
		// orc heroes
		public static int BLADE_MASTER = UnitId( "Obla" );
		public static int FAR_SEER = UnitId( "Ofar" );
		public static int TAUREN_CHIEF = UnitId( "Otch" );
		public static int SHADOW_HUNTER = UnitId( "Oshd" );
		// special orc heroes
		public static int GROM = UnitId( "Ogrh" );
		public static int THRALL = UnitId( "Othr" );
		// orc hero abilities
		public static int CRITICAL_STRIKE = UnitId( "AOcr" );
		public static int MIRROR_IMAGE = UnitId( "AOmi" );
		public static int BLADE_STORM = UnitId( "AOww" );
		public static int WIND_WALK = UnitId( "AOwk" );
		public static int CHAIN_LIGHTNING = UnitId( "AOcl" );
		public static int EARTHQUAKE = UnitId( "AOeq" );
		public static int FAR_SIGHT = UnitId( "AOfs" );
		public static int SPIRIT_WOLF = UnitId( "AOsf" );
		public static int ENDURANE_AURA = UnitId( "AOae" );
		public static int REINCARNATION = UnitId( "AOre" );
		public static int SHOCKWAVE = UnitId( "AOsh" );
		public static int WAR_STOMP = UnitId( "AOws" );
		public static int HEALING_WAVE = UnitId( "AOhw" );
		public static int HEX = UnitId( "AOhx" );
		public static int SERPENT_WARD = UnitId( "AOsw" );
		public static int VOODOO = UnitId( "AOvd" );
		// orc units
		public static int GUARDIAN = UnitId( "oang" );
		public static int CATAPULT = UnitId( "ocat" );
		public static int WITCH_DOCTOR = UnitId( "odoc" );
		public static int GRUNT = UnitId( "ogru" );
		public static int HEAD_HUNTER = UnitId( "ohun" );
		public static int BERSERKER = UnitId( "otbk" );
		public static int KODO_BEAST = UnitId( "okod" );
		public static int PEON = UnitId( "opeo" );
		public static int RAIDER = UnitId( "orai" );
		public static int SHAMAN = UnitId( "oshm" );
		public static int TAUREN = UnitId( "otau" );
		public static int WYVERN = UnitId( "owyv" );
		public static int BATRIDER = UnitId( "otbr" );
		public static int SPIRIT_WALKER = UnitId( "ospw" );
		public static int SPIRIT_WALKER_M = UnitId( "ospm" );
		// orc buildings
		public static int ORC_ALTAR = UnitId( "oalt" );
		public static int ORC_BARRACKS = UnitId( "obar" );
		public static int BESTIARY = UnitId( "obea" );
		public static int FORGE = UnitId( "ofor" );
		public static int FORTRESS = UnitId( "ofrt" );
		public static int GREAT_HALL = UnitId( "ogre" );
		public static int LODGE = UnitId( "osld" );
		public static int STRONGHOLD = UnitId( "ostr" );
		public static int BURROW = UnitId( "otrb" );
		public static int TOTEM = UnitId( "otto" );
		public static int ORC_WATCH_TOWER = UnitId( "owtw" );
		public static int VOODOO_LOUNGE = UnitId( "ovln" );
		// orc upgrades
		public static int UPG_ORC_MELEE = UnitId( "Rome" );
		public static int UPG_ORC_RANGED = UnitId( "Rora" );
		public static int UPG_ORC_ARTILLERY = UnitId( "Roaa" );
		public static int UPG_ORC_ARMOR = UnitId( "Roar" );
		public static int UPG_ORC_WAR_DRUMS = UnitId( "Rwdm" );
		public static int UPG_ORC_PILLAGE = UnitId( "Ropg" );
		public static int UPG_ORC_BERSERK = UnitId( "Robs" );
		public static int UPG_ORC_PULVERIZE = UnitId( "Rows" );
		public static int UPG_ORC_ENSNARE = UnitId( "Roen" );
		public static int UPG_ORC_VENOM = UnitId( "Rovs" );
		public static int UPG_ORC_DOCS = UnitId( "Rowd" );
		public static int UPG_ORC_SHAMAN = UnitId( "Rost" );
		public static int UPG_ORC_SPIKES = UnitId( "Rosp" );
		public static int UPG_ORC_BURROWS = UnitId( "Rorb" );
		public static int UPG_ORC_REGEN = UnitId( "Rotr" );
		public static int UPG_ORC_FIRE = UnitId( "Rolf" );
		public static int UPG_ORC_SWALKER = UnitId( "Rowt" );
		public static int UPG_ORC_BERSERKER = UnitId( "Robk" );
		public static int UPG_ORC_NAPTHA = UnitId( "Robf" );
		public static int UPG_ORC_CHAOS = UnitId( "Roch" );
		// Warcraft 2 orc units
		public static int OGRE_MAGI = UnitId( "nomg" );
		public static int ORC_DRAGON = UnitId( "nrwm" );
		public static int SAPPER = UnitId( "ngsp" );
		public static int ZEPPLIN = UnitId( "nzep" );
		public static int ZEPPELIN = ZEPPLIN;
		public static int W2_WARLOCK = UnitId( "nw2w" );
		public static int PIG_FARM = UnitId( "npgf" );
		// special orc units
		public static int CHAOS_GRUNT = UnitId( "nchg" );
		public static int CHAOS_WARLOCK = UnitId( "nchw" );
		public static int CHAOS_RAIDER = UnitId( "nchr" );
		public static int CHAOS_PEON = UnitId( "ncpn" );
		public static int CHAOS_KODO = UnitId( "nckb" );
		public static int CHAOS_GROM = UnitId( "Opgh" );
		public static int CHAOS_BLADEMASTER = UnitId( "Nbbc" );
		public static int CHAOS_BURROW = UnitId( "ocbw" );
		//--------------------------------------------------------------------
		//  UNDEAD
		//--------------------------------------------------------------------
		// undead heroes
		public static int DEATH_KNIGHT = UnitId( "Udea" );
		public static int DREAD_LORD = UnitId( "Udre" );
		public static int LICH = UnitId( "Ulic" );
		public static int CRYPT_LORD = UnitId( "Ucrl" );
		// special undead heroes
		public static int MALGANIS = UnitId( "Umal" );
		public static int TICHONDRIUS = UnitId( "Utic" );
		public static int PIT_LORD = UnitId( "Npld" );
		public static int DETHEROC = UnitId( "Udth" );
		// undead hero abilities
		public static int SLEEP = UnitId( "AUsl" );
		public static int VAMP_AURA = UnitId( "AUav" );
		public static int CARRION_SWARM = UnitId( "AUcs" );
		public static int INFERNO = UnitId( "AUin" );
		public static int DARK_RITUAL = UnitId( "AUdr" );
		public static int DEATH_DECAY = UnitId( "AUdd" );
		public static int FROST_ARMOR = UnitId( "AUfu" );
		public static int FROST_NOVA = UnitId( "AUfn" );
		public static int ANIM_DEAD = UnitId( "AUan" );
		public static int DEATH_COIL = UnitId( "AUdc" );
		public static int DEATH_PACT = UnitId( "AUdp" );
		public static int UNHOLY_AURA = UnitId( "AUau" );
		public static int CARRION_SCARAB = UnitId( "AUcb" );
		public static int IMPALE = UnitId( "AUim" );
		public static int LOCUST_SWARM = UnitId( "AUls" );
		public static int THORNY_SHIELD = UnitId( "AUts" );
		// undead units
		public static int ABOMINATION = UnitId( "uabo" );
		public static int ACOLYTE = UnitId( "uaco" );
		public static int BANSHEE = UnitId( "uban" );
		public static int PIT_FIEND = UnitId( "ucry" );
		public static int CRYPT_FIEND = PIT_FIEND;
		public static int FROST_WYRM = UnitId( "ufro" );
		public static int GARGOYLE = UnitId( "ugar" );
		public static int GARGOYLE_MORPH = UnitId( "ugrm" );
		public static int GHOUL = UnitId( "ugho" );
		public static int MEAT_WAGON = UnitId( "umtw" );
		public static int NECRO = UnitId( "unec" );
		public static int SKEL_WARRIOR = UnitId( "uske" );
		public static int SHADE = UnitId( "ushd" );
		public static int UNDEAD_BARGE = UnitId( "uarb" );
		public static int OBSIDIAN_STATUE = UnitId( "uobs" );
		public static int OBS_STATUE = OBSIDIAN_STATUE;
		public static int BLK_SPHINX = UnitId( "ubsp" );
		// undead buildings
		public static int UNDEAD_MINE = UnitId( "ugol" );
		public static int UNDEAD_ALTAR = UnitId( "uaod" );
		public static int BONEYARD = UnitId( "ubon" );
		public static int GARG_SPIRE = UnitId( "ugsp" );
		// normal
		public static int NECROPOLIS_1 = UnitId( "unpl" );
		// upgraded once
		public static int NECROPOLIS_2 = UnitId( "unp1" );
		// full upgrade
		public static int NECROPOLIS_3 = UnitId( "unp2" );
		public static int SAC_PIT = UnitId( "usap" );
		public static int CRYPT = UnitId( "usep" );
		public static int SLAUGHTERHOUSE = UnitId( "uslh" );
		public static int DAMNED_TEMPLE = UnitId( "utod" );
		// normal
		public static int ZIGGURAT_1 = UnitId( "uzig" );
		// upgraded
		public static int ZIGGURAT_2 = UnitId( "uzg1" );
		// frost tower
		public static int ZIGGURAT_FROST = UnitId( "uzg2" );
		public static int GRAVEYARD = UnitId( "ugrv" );
		public static int TOMB_OF_RELICS = UnitId( "utom" );
		// undead upgrades
		public static int UPG_UNHOLY_STR = UnitId( "Rume" );
		public static int UPG_CR_ATTACK = UnitId( "Rura" );
		public static int UPG_UNHOLY_ARMOR = UnitId( "Ruar" );
		public static int UPG_CANNIBALIZE = UnitId( "Ruac" );
		public static int UPG_GHOUL_FRENZY = UnitId( "Rugf" );
		public static int UPG_FIEND_WEB = UnitId( "Ruwb" );
		public static int UPG_ABOM = UnitId( "Ruab" );
		public static int UPG_STONE_FORM = UnitId( "Rusf" );
		public static int UPG_NECROS = UnitId( "Rune" );
		public static int UPG_BANSHEE = UnitId( "Ruba" );
		public static int UPG_MEAT_WAGON = UnitId( "Rump" );
		public static int UPG_WYRM_BREATH = UnitId( "Rufb" );
		public static int UPG_SKEL_LIFE = UnitId( "Rusl" );
		public static int UPG_SKEL_MASTERY = UnitId( "Rusm" );
		public static int UPG_EXHUME = UnitId( "Ruex" );
		public static int UPG_SACRIFICE = UnitId( "Rurs" );
		public static int UPG_ABOM_EXPL = UnitId( "Ruax" );
		public static int UPG_CR_ARMOR = UnitId( "Rucr" );
		public static int UPG_PLAGUE = UnitId( "Rupc" );
		public static int UPG_BLK_SPHINX = UnitId( "Rusp" );
		public static int UPG_BURROWING = UnitId( "Rubu" );
		//--------------------------------------------------------------------
		//  ELVES
		//--------------------------------------------------------------------
		// elf heroes
		public static int DEMON_HUNTER = UnitId( "Edem" );
		public static int DEMON_HUNTER_M = UnitId( "Edmm" );
		public static int KEEPER = UnitId( "Ekee" );
		public static int MOON_CHICK = UnitId( "Emoo" );
		public static int MOON_BABE = MOON_CHICK;
		public static int MOON_HONEY = MOON_CHICK;
		public static int WARDEN = UnitId( "Ewar" );
		// special elf heroes
		public static int SYLVANUS = UnitId( "Hvwd" );
		public static int CENARIUS = UnitId( "Ecen" );
		public static int ILLIDAN = UnitId( "Eevi" );
		public static int ILLIDAN_DEMON = UnitId( "Eevm" );
		public static int MAIEV = UnitId( "Ewrd" );
		// elf hero abilities
		public static int FORCE_NATURE = UnitId( "AEfn" );
		public static int ENT_ROOTS = UnitId( "AEer" );
		public static int THORNS_AURA = UnitId( "AEah" );
		public static int TRANQUILITY = UnitId( "AEtq" );
		public static int EVASION = UnitId( "AEev" );
		public static int IMMOLATION = UnitId( "AEim" );
		public static int MANA_BURN = UnitId( "AEmb" );
		public static int METAMORPHOSIS = UnitId( "AEme" );
		public static int SEARING_ARROWS = UnitId( "AHfa" );
		public static int SCOUT = UnitId( "AEst" );
		public static int STARFALL = UnitId( "AEsf" );
		public static int TRUESHOT = UnitId( "AEar" );
		public static int BLINK = UnitId( "AEbl" );
		public static int FAN_KNIVES = UnitId( "AEfk" );
		public static int SHADOW_TOUCH = UnitId( "AEsh" );
		public static int VENGEANCE = UnitId( "AEsv" );
		// elf units
		public static int WISP = UnitId( "ewsp" );
		public static int ARCHER = UnitId( "earc" );
		public static int DRUID_TALON = UnitId( "edot" );
		public static int DRUID_TALON_M = UnitId( "edtm" );
		public static int BALLISTA = UnitId( "ebal" );
		public static int DRUID_CLAW = UnitId( "edoc" );
		public static int DRUID_CLAW_M = UnitId( "edcm" );
		public static int DRYAD = UnitId( "edry" );
		public static int HIPPO = UnitId( "ehip" );
		public static int HIPPO_RIDER = UnitId( "ehpr" );
		public static int HUNTRESS = UnitId( "esen" );
		public static int CHIMAERA = UnitId( "echm" );
		public static int ENT = UnitId( "efon" );
		public static int MOUNTAIN_GIANT = UnitId( "emtg" );
		public static int FAERIE_DRAGON = UnitId( "efdr" );
		// special elf units
		public static int HIGH_ARCHER = UnitId( "nhea" );
		public static int HIGH_FOOTMAN = UnitId( "hcth" );
		public static int HIGH_FOOTMEN = HIGH_FOOTMAN;
		public static int HIGH_SWORDMAN = UnitId( "hhes" );
		public static int DRAGON_HAWK = UnitId( "nws1" );
		public static int CORRUPT_TREANT = UnitId( "nenc" );
		public static int POISON_TREANT = UnitId( "nenp" );
		public static int PLAGUE_TREANT = UnitId( "nepl" );
		public static int SHANDRIS = UnitId( "eshd" );
		// elf buildings
		public static int ANCIENT_LORE = UnitId( "eaoe" );
		public static int ANCIENT_WAR = UnitId( "eaom" );
		public static int ANCIENT_WIND = UnitId( "eaow" );
		public static int TREE_AGES = UnitId( "etoa" );
		public static int TREE_ETERNITY = UnitId( "etoe" );
		public static int TREE_LIFE = UnitId( "etol" );
		public static int ANCIENT_PROTECT = UnitId( "etrp" );
		public static int ELF_ALTAR = UnitId( "eate" );
		public static int BEAR_DEN = UnitId( "edol" );
		public static int CHIMAERA_ROOST = UnitId( "edos" );
		public static int HUNTERS_HALL = UnitId( "edob" );
		public static int MOON_WELL = UnitId( "emow" );
		public static int ELF_MINE = UnitId( "egol" );
		public static int DEN_OF_WONDERS = UnitId( "eden" );
		// special elf buildings
		public static int ELF_FARM = UnitId( "nefm" );
		public static int ELF_GUARD_TOWER = UnitId( "negt" );
		public static int HIGH_SKY = UnitId( "negm" );
		public static int HIGH_EARTH = UnitId( "negf" );
		public static int HIGH_TOWER = UnitId( "negt" );
		public static int ELF_HIGH_BARRACKS = UnitId( "nheb" );
		public static int CORRUPT_LIFE = UnitId( "nctl" );
		public static int CORRUPT_WELL = UnitId( "ncmw" );
		public static int CORRUPT_PROTECTOR = UnitId( "ncap" );
		public static int CORRUPT_WAR = UnitId( "ncaw" );
		// elf upgrades
		public static int UPG_STR_MOON = UnitId( "Resm" );
		public static int UPG_STR_WILD = UnitId( "Resw" );
		public static int UPG_MOON_ARMOR = UnitId( "Rema" );
		public static int UPG_HIDES = UnitId( "Rerh" );
		public static int UPG_ULTRAVISION = UnitId( "Reuv" );
		public static int UPG_BLESSING = UnitId( "Renb" );
		public static int UPG_SCOUT = UnitId( "Resc" );
		public static int UPG_GLAIVE = UnitId( "Remg" );
		public static int UPG_BOWS = UnitId( "Reib" );
		public static int UPG_MARKSMAN = UnitId( "Remk" );
		public static int UPG_DRUID_TALON = UnitId( "Redt" );
		public static int UPG_DRUID_CLAW = UnitId( "Redc" );
		public static int UPG_ABOLISH = UnitId( "Resi" );
		public static int UPG_CHIM_ACID = UnitId( "Recb" );
		public static int UPG_HIPPO_TAME = UnitId( "Reht" );
		public static int UPG_BOLT = UnitId( "Repd" );
		public static int UPG_MARK_CLAW = UnitId( "Reeb" );
		public static int UPG_MARK_TALON = UnitId( "Reec" );
		public static int UPG_HARD_SKIN = UnitId( "Rehs" );
		public static int UPG_RESIST_SKIN = UnitId( "Rers" );
		public static int UPG_WELL_SPRING = UnitId( "Rews" );
		//--------------------------------------------------------------------
		// Neutral
		//--------------------------------------------------------------------
		public static int DEMON_GATE = UnitId( "ndmg" );
		public static int FELLHOUND = UnitId( "nfel" );
		public static int INFERNAL = UnitId( "ninf" );
		public static int DOOMGUARD = UnitId( "nbal" );
		public static int SATYR = UnitId( "nsty" );
		public static int TRICKSTER = UnitId( "nsat" );
		public static int SHADOWDANCER = UnitId( "nsts" );
		public static int SOULSTEALER = UnitId( "nstl" );
		public static int HELLCALLER = UnitId( "nsth" );
		public static int SKEL_ARCHER = UnitId( "nska" );
		public static int SKEL_MARKSMAN = UnitId( "nskm" );
		public static int SKEL_BURNING = UnitId( "nskf" );
		public static int SKEL_GIANT = UnitId( "nskg" );
		public static int FURBOLG = UnitId( "nfrl" );
		public static int FURBOLG_TRACKER = UnitId( "nfrb" );
		public static int FURBOLG_SHAMAN = UnitId( "nfrs" );
		public static int FURBOLG_CHAMP = UnitId( "nfrg" );
		public static int FURBOLG_ELDER = UnitId( "nfre" );
		//--------------------------------------------------------------------
		// NAGA
		//--------------------------------------------------------------------
		// naga heroes
		public static int NAGA_SORCERESS = UnitId( "Nngs" );
		public static int NAGA_VASHJ = UnitId( "Hvsh" );
		// naga units
		// old names
		public static int NAGA_DRAGON = UnitId( "nsnp" );
		public static int NAGA_WITCH = UnitId( "nnsw" );
		public static int NAGA_SERPENT = UnitId( "nwgs" );
		public static int NAGA_HYDRA = UnitId( "nhyc" );
		// peon
		public static int NAGA_SLAVE = UnitId( "nmpe" );
		// weak ranged
		public static int NAGA_SNAP_DRAGON = NAGA_DRAGON;
		// weak air
		public static int NAGA_COUATL = NAGA_SERPENT;
		// caster
		public static int NAGA_SIREN = NAGA_WITCH;
		// knight
		public static int NAGA_MYRMIDON = UnitId( "nmyr" );
		// footman
		public static int NAGA_REAVER = UnitId( "nnmg" );
		// siege
		public static int NAGA_TURTLE = NAGA_HYDRA;
		// royal guard
		public static int NAGA_ROYAL = UnitId( "nnrg" );
		// naga buildings
		// town hall
		public static int NAGA_TEMPLE = UnitId( "nntt" );
		// farm
		public static int NAGA_CORAL = UnitId( "nnfm" );
		// sirens & couatls
		public static int NAGA_SHRINE = UnitId( "nnsa" );
		// myrm, snap dragon, hydra
		public static int NAGA_SPAWNING = UnitId( "nnsg" );
		// tower
		public static int NAGA_GUARDIAN = UnitId( "nntg" );
		// altar
		public static int NAGA_ALTAR = UnitId( "nnad" );
		// naga upgrades
		public static int UPG_NAGA_ARMOR = UnitId( "Rnam" );
		public static int UPG_NAGA_ATTACK = UnitId( "Rnat" );
		public static int UPG_NAGA_ABOLISH = UnitId( "Rnsi" );
		public static int UPG_SIREN = UnitId( "Rnsw" );
		public static int UPG_NAGA_ENSNARE = UnitId( "Rnen" );
		//--------------------------------------------------------------------
		public static int M1 = 60;
		public static int M2 = 2*60;
		public static int M3 = 3*60;
		public static int M4 = 4*60;
		public static int M5 = 5*60;
		public static int M6 = 6*60;
		public static int M7 = 7*60;
		public static int M8 = 8*60;
		public static int M9 = 9*60;
		public static int M10 = 10*60;
		public static int M11 = 11*60;
		public static int M12 = 12*60;
		public static int M13 = 13*60;
		public static int M14 = 14*60;
		public static int M15 = 15*60;
		public static int EASY = 1;
		public static int NORMAL = 2;
		public static int HARD = 3;
		// not used
		public static int INSANE = 4;
		public static int MELEE_NEWBIE = 1;
		public static int MELEE_NORMAL = 2;
		public static int MELEE_INSANE = 3;
		public static int ATTACK_CAPTAIN = 1;
		public static int DEFENSE_CAPTAIN = 2;
		public static int BOTH_CAPTAINS = 3;
		public static int BUILD_UNIT = 1;
		public static int BUILD_UPGRADE = 2;
		public static int BUILD_EXPAND = 3;
		public static int UPKEEP_TIER1 = 50;
		public static int UPKEEP_TIER2 = 80;
		//--------------------------------------------------------------------
		public static BJPlayer  ai_player;
		public static int  sleep_seconds;
		public static int  total_gold = 0;
		public static int  total_wood = 0;
		// usually for potion money
		public static int  gold_buffer = 0;
		public static int  difficulty = NORMAL;
		public static int  exp_seen = 0;
		public static int  racial_farm = UnitId( "hhou" );
		public static int  hero_id = UnitId( "Hamg" );
		public static int  hero_id2 = UnitId( "Hmkg" );
		public static int  hero_id3 = UnitId( "Hpal" );
		public static int [] skill;
		public static int [] skills1;
		public static int [] skills2;
		public static int [] skills3;
		public static int  max_hero_level = 0;
		public static int [] harass_qty;
		public static int [] harass_max;
		public static int [] harass_units;
		public static int  harass_length = 0;
		public static int [] defense_qty;
		public static int [] defense_units;
		public static int  defense_length = 0;
		public static int [] build_qty;
		public static int [] build_type;
		public static int [] build_item;
		public static int [] build_town;
		public static int  build_length = 0;
		public static int  campaign_gold_peons = 5;
		public static int  campaign_wood_peons = 3;
		public static int  campaign_basics_speed = 5;
		public static int  min_creeps = -1;
		public static int  max_creeps = -1;
		public static bool  harvest_town1 = true;
		public static bool  harvest_town2 = true;
		public static bool  harvest_town3 = true;
		public static bool  do_campaign_farms = true;
		public static bool  two_heroes = false;
		public static bool  allow_air_creeps = false;
		public static bool  take_exp = false;
		public static bool  allow_signal_abort = false;
		public static bool  ready_for_zeppelin = true;
		public static bool  get_zeppelin = false;
		public static bool  build_campaign_attackers = true;
		public static bool  do_debug_cheats = false;
		public static bool  trace_on = true;
		public static bool  zep_next_wave = false;
		public static bool  form_group_timeouts = true;
		//============================================================================
		public static BJPlayer PlayerEx( int slot )
		{
			// Original JassCode
			return Player(slot-1);
		}

		//============================================================================
		public static void Trace( string message )
		{
			// Original JassCode
			if(  trace_on  )
			{
				DisplayText(GetAiPlayer(),message);
			}
		}

		//============================================================================
		public static void TraceI( string message , int val )
		{
			// Original JassCode
			if(  trace_on  )
			{
				DisplayTextI(GetAiPlayer(),message,val);
			}
		}

		//============================================================================
		public static void TraceII( string message , int v1 , int v2 )
		{
			// Original JassCode
			if(  trace_on  )
			{
				DisplayTextII(GetAiPlayer(),message,v1,v2);
			}
		}

		//============================================================================
		public static void TraceIII( string message , int v1 , int v2 , int v3 )
		{
			// Original JassCode
			if(  trace_on  )
			{
				DisplayTextIII(GetAiPlayer(),message,v1,v2,v3);
			}
		}

		//============================================================================
		public static void InitAI(  )
		{
			// Original JassCode
			ai_player = Player(GetAiPlayer());
			sleep_seconds = 0;
			StopGathering();
		}

		//============================================================================
		public static void StandardAI( BJCodeInt heroes , BJCode peons , BJCode attacks )
		{
			// Original JassCode
			bool isNewbie = (MeleeDifficulty() == MELEE_NEWBIE);
			InitAI();
			SetMeleeAI();
			SetDefendPlayer(true);
			SetGroupsFlee(! isNewbie);
			SetHeroesBuyItems(! isNewbie);
			SetHeroesFlee(true);
			SetHeroesTakeItems(true);
			SetIgnoreInjured(true);
			SetPeonsRepair(true);
			SetSmartArtillery(! isNewbie);
			SetTargetHeroes(! isNewbie);
			SetUnitsFlee(! isNewbie);
			SetWatchMegaTargets(true);
			CreateCaptains();
			SetHeroLevels(heroes);
			Sleep(0.1);
			StartThread(peons);
			StartThread(attacks);
		}

		//============================================================================
		//  Utility Functions
		//============================================================================
		public static int Min( int A , int B )
		{
			// Original JassCode
			if(  A < B  )
			{
				return A;
			}
			else
			{
				return B;
			}
		}

		public static int Max( int A , int B )
		{
			// Original JassCode
			if(  A > B  )
			{
				return A;
			}
			else
			{
				return B;
			}
		}

		public static void SetZepNextWave(  )
		{
			// Original JassCode
			zep_next_wave = true;
		}

		public static void SuicideSleep( int seconds )
		{
			// Original JassCode
			sleep_seconds = sleep_seconds - seconds;
			while( true )
			{
				if(  seconds <= 0 )
					break;
				if(  allow_signal_abort && CommandsWaiting() != 0 )
					break;
				if(  seconds >= 5  )
				{
					Sleep(5);
					seconds = seconds - 5;
				}
				else
				{
					Sleep(seconds);
					seconds = 0;
				}
			}
		}

		//============================================================================
		public static int WaitForSignal(  )
		{
			// Original JassCode
			int cmd;
			//xxx
			bool display = false;
			while( true )
			{
				if(  CommandsWaiting() != 0 )
					break;
				//xxx
				Trace("waiting for a signal to begin AI script...\n");
				display = true;
				Sleep(2);
				if(  CommandsWaiting() != 0 )
					break;
				Sleep(2);
				if(  CommandsWaiting() != 0 )
					break;
				Sleep(2);
				if(  CommandsWaiting() != 0 )
					break;
				Sleep(2);
				if(  CommandsWaiting() != 0 )
					break;
				Sleep(2);
				//xxx
			}
			//xxx
			if(  display  )
			{
				Trace("signal received, beginning AI script\n");
			}
			//xxx
			cmd = GetLastCommand();
			PopLastCommand();
			return cmd;
		}

		//============================================================================
		public static void SetWoodPeons( int count )
		{
			// Original JassCode
			campaign_wood_peons = count;
		}

		//============================================================================
		public static void SetGoldPeons( int count )
		{
			// Original JassCode
			campaign_gold_peons = count;
		}

		//============================================================================
		public static void SetHarvestLumber( bool harvest )
		{
			// Original JassCode
			if(  harvest  )
			{
				campaign_wood_peons = 3;
			}
			else
			{
				campaign_wood_peons = 0;
			}
		}

		//============================================================================
		public static void SetFormGroupTimeouts( bool state )
		{
			// Original JassCode
			form_group_timeouts = state;
		}

		//============================================================================
		public static void DoCampaignFarms( bool state )
		{
			// Original JassCode
			do_campaign_farms = state;
		}

		//============================================================================
		public static BJUnit GetMinorCreep(  )
		{
			// Original JassCode
			return GetCreepCamp(0,9,false);
		}

		//============================================================================
		public static BJUnit GetMajorCreep(  )
		{
			// Original JassCode
			return GetCreepCamp(10,100,allow_air_creeps);
		}

		//============================================================================
		public static int GetGold(  )
		{
			// Original JassCode
			return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_GOLD);
		}

		//============================================================================
		public static int GetWood(  )
		{
			// Original JassCode
			return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_LUMBER);
		}

		//============================================================================
		public static void InitBuildArray(  )
		{
			// Original JassCode
			build_length = 0;
		}

		//============================================================================
		public static void InitAssaultGroup(  )
		{
			// Original JassCode
			harass_length = 0;
		}

		//============================================================================
		public static void InitDefenseGroup(  )
		{
			// Original JassCode
			defense_length = 0;
		}

		//============================================================================
		public static void InitMeleeGroup(  )
		{
			// Original JassCode
			InitAssaultGroup();
			RemoveInjuries();
			RemoveSiege();
		}

		//============================================================================
		public static void PrepFullSuicide(  )
		{
			// Original JassCode
			InitAssaultGroup();
			InitDefenseGroup();
			campaign_gold_peons = 0;
			campaign_wood_peons = 0;
		}

		//============================================================================
		public static void SetReplacements( int easy , int med , int hard )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				SetReplacementCount(easy);
			}
			else if(  difficulty == NORMAL  )
			{
				SetReplacementCount(med);
			}
			else
			{
				SetReplacementCount(hard);
			}
		}

		//============================================================================
		public static void StartTownBuilder( BJCode func )
		{
			// Original JassCode
			StartThread(func);
		}

		//============================================================================
		public static void SetBuildAll( int t , int qty , int unitid , int town )
		{
			// Original JassCode
			if(  qty > 0  )
			{
				build_qty[build_length] = qty;
				build_type[build_length] = t;
				build_item[build_length] = unitid;
				build_town[build_length] = town;
				build_length = build_length + 1;
			}
		}

		//============================================================================
		public static void SetBuildUnit( int qty , int unitid )
		{
			// Original JassCode
			SetBuildAll(BUILD_UNIT,qty,unitid,-1);
		}

		//============================================================================
		public static void SetBuildNext( int qty , int unitid )
		{
			// Original JassCode
			int has = GetUnitCount(unitid);
			if(  has >= qty  )
			{
				return;
			}
			SetBuildAll(BUILD_UNIT,GetUnitCountDone(unitid)+1,unitid,-1);
		}

		//============================================================================
		public static void SetBuildUnitEx( int easy , int med , int hard , int unitid )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				SetBuildAll(BUILD_UNIT,easy,unitid,-1);
			}
			else if(  difficulty == NORMAL  )
			{
				SetBuildAll(BUILD_UNIT,med,unitid,-1);
			}
			else
			{
				SetBuildAll(BUILD_UNIT,hard,unitid,-1);
			}
		}

		//============================================================================
		public static void SecondaryTown( int town , int qty , int unitid )
		{
			// Original JassCode
			SetBuildAll(BUILD_UNIT,qty,unitid,town);
		}

		//============================================================================
		public static void SecTown( int town , int qty , int unitid )
		{
			// Original JassCode
			SetBuildAll(BUILD_UNIT,qty,unitid,town);
		}

		//============================================================================
		public static void SetBuildUpgr( int qty , int unitid )
		{
			// Original JassCode
			if(  MeleeDifficulty() != MELEE_NEWBIE || qty == 1  )
			{
				SetBuildAll(BUILD_UPGRADE,qty,unitid,-1);
			}
		}

		//============================================================================
		public static void SetBuildUpgrEx( int easy , int med , int hard , int unitid )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				SetBuildAll(BUILD_UPGRADE,easy,unitid,-1);
			}
			else if(  difficulty == NORMAL  )
			{
				SetBuildAll(BUILD_UPGRADE,med,unitid,-1);
			}
			else
			{
				SetBuildAll(BUILD_UPGRADE,hard,unitid,-1);
			}
		}

		//============================================================================
		public static void SetBuildExpa( int qty , int unitid )
		{
			// Original JassCode
			SetBuildAll(BUILD_EXPAND,qty,unitid,-1);
		}

		//============================================================================
		public static bool StartUpgrade( int level , int upgid )
		{
			// Original JassCode
			int gold_cost;
			int wood_cost;
			if(  GetUpgradeLevel(upgid) >= level  )
			{
				return true;
			}
			gold_cost = GetUpgradeGoldCost(upgid);
			if(  total_gold < gold_cost  )
			{
				return false;
			}
			wood_cost = GetUpgradeWoodCost(upgid);
			if(  total_wood < wood_cost  )
			{
				return false;
			}
			return SetUpgrade(upgid);
		}

		//============================================================================
		public static void BuildFactory( int unitid )
		{
			// Original JassCode
			if(  GetGold() > 1000 && GetWood() > 500  )
			{
				SetBuildUnit( 2, unitid );
			}
			else
			{
				SetBuildUnit( 1, unitid );
			}
		}

		//============================================================================
		public static bool HallsCompleted( int unitid )
		{
			// Original JassCode
			return GetUnitCount(unitid) == GetUnitCountDone(unitid);
		}

		//============================================================================
		public static void GuardSecondary( int townid , int qty , int unitid )
		{
			// Original JassCode
			if(  TownHasHall(townid) && TownHasMine(townid)  )
			{
				SecondaryTown( townid, qty, unitid );
			}
		}

		//============================================================================
		public static int GetUnitCountEx( int unitid , bool only_done , int townid )
		{
			// Original JassCode
			if(  townid == -1  )
			{
				if(  only_done  )
				{
					return GetUnitCountDone(unitid);
				}
				else
				{
					return GetUnitCount(unitid);
				}
			}
			else
			{
				return GetTownUnitCount(unitid,townid,only_done);
			}
		}

		//============================================================================
		public static int TownCountEx( int unitid , bool only_done , int townid )
		{
			// Original JassCode
			int have_qty = GetUnitCountEx(unitid,only_done,townid);
			if(  unitid == TOWN_HALL  )
			{
				have_qty = have_qty + GetUnitCountEx(KEEP,false,townid) + GetUnitCountEx(CASTLE,false,townid);
			}
			else if(  unitid == KEEP  )
			{
				have_qty = have_qty + GetUnitCountEx(CASTLE,false,townid);
			}
			else if(  unitid == WATCH_TOWER  )
			{
				have_qty = have_qty + GetUnitCountEx(GUARD_TOWER,false,townid) + GetUnitCountEx(CANNON_TOWER,false,townid) + GetUnitCountEx(ARCANE_TOWER,false,townid);
			}
			else if(  unitid == PEASANT  )
			{
				have_qty = have_qty + GetUnitCountEx(MILITIA,false,townid);
			}
			else if(  unitid == GREAT_HALL  )
			{
				have_qty = have_qty + GetUnitCountEx(STRONGHOLD,false,townid) + GetUnitCountEx(FORTRESS,false,townid);
			}
			else if(  unitid == STRONGHOLD  )
			{
				have_qty = have_qty + GetUnitCountEx(FORTRESS,false,townid);
			}
			else if(  unitid == HEAD_HUNTER  )
			{
				have_qty = have_qty + GetUnitCountEx(BERSERKER,false,townid);
			}
			else if(  unitid == SPIRIT_WALKER  )
			{
				have_qty = have_qty + GetUnitCountEx(SPIRIT_WALKER_M,false,townid);
			}
			else if(  unitid == SPIRIT_WALKER_M  )
			{
				have_qty = have_qty + GetUnitCountEx(SPIRIT_WALKER,only_done,townid);
			}
			else if(  unitid == NECROPOLIS_1  )
			{
				have_qty = have_qty + GetUnitCountEx(NECROPOLIS_2,false,townid) + GetUnitCountEx(NECROPOLIS_3,false,townid);
			}
			else if(  unitid == NECROPOLIS_2  )
			{
				have_qty = have_qty + GetUnitCountEx(NECROPOLIS_3,false,townid);
			}
			else if(  unitid == ZIGGURAT_1  )
			{
				have_qty = have_qty + GetUnitCountEx(ZIGGURAT_2,false,townid) + GetUnitCountEx(ZIGGURAT_FROST,false,townid);
			}
			else if(  unitid == GARGOYLE  )
			{
				have_qty = have_qty + GetUnitCountEx(GARGOYLE_MORPH,false,townid);
			}
			else if(  unitid == TREE_LIFE  )
			{
				have_qty = have_qty + GetUnitCountEx(TREE_AGES,false,townid) + GetUnitCountEx(TREE_ETERNITY,false,townid);
			}
			else if(  unitid == TREE_AGES  )
			{
				have_qty = have_qty + GetUnitCountEx(TREE_ETERNITY,false,townid);
			}
			else if(  unitid == DRUID_TALON  )
			{
				have_qty = have_qty + GetUnitCountEx(DRUID_TALON_M,false,townid);
			}
			else if(  unitid == DRUID_TALON_M  )
			{
				have_qty = have_qty + GetUnitCountEx(DRUID_TALON,only_done,townid);
			}
			else if(  unitid == DRUID_CLAW  )
			{
				have_qty = have_qty + GetUnitCountEx(DRUID_CLAW_M,false,townid);
			}
			else if(  unitid == DRUID_CLAW_M  )
			{
				have_qty = have_qty + GetUnitCountEx(DRUID_CLAW,only_done,townid);
			}
			else if(  unitid == ILLIDAN  )
			{
				have_qty = have_qty + GetUnitCountEx(ILLIDAN_DEMON,false,townid);
			}
			return have_qty;
		}

		//============================================================================
		public static int TownCountDone( int base1 )
		{
			// Original JassCode
			return TownCountEx(base1,true,-1);
		}

		//============================================================================
		public static int TownCount( int base1 )
		{
			// Original JassCode
			return TownCountEx(base1,false,-1);
		}

		//============================================================================
		public static void BasicExpansion( bool build_it , int unitid )
		{
			// Original JassCode
			if(  build_it && HallsCompleted(unitid)  )
			{
				SetBuildExpa( TownCount(unitid)+1, unitid );
			}
		}

		//============================================================================
		public static void UpgradeAll( int baseid , int newid )
		{
			// Original JassCode
			SetBuildUnit( TownCountDone(baseid), newid );
		}

		//============================================================================
		public static int TownCountTown( int base1 , int townid )
		{
			// Original JassCode
			return TownCountEx(base1,false,townid);
		}

		//============================================================================
		//  FoodPool
		//============================================================================
		public static void FoodPool( int food , bool weak , int id1 , int use1 , bool strong , int id2 , int use2 )
		{
			// Original JassCode
			if(  strong  )
			{
				SetBuildUnit( (food - use1 * TownCount(id1)) / use2, id2 );
			}
			else if(  weak  )
			{
				SetBuildUnit( (food - use2 * TownCount(id2)) / use1, id1 );
			}
		}

		//============================================================================
		//  MeleeTownHall
		//============================================================================
		public static void MeleeTownHall( int townid , int unitid )
		{
			// Original JassCode
			if(  TownHasMine(townid) && ! TownHasHall(townid)  )
			{
				SecondaryTown ( townid, 1, unitid );
			}
		}

		//============================================================================
		public static void WaitForUnits( int unitid , int qty )
		{
			// Original JassCode
			while( true )
			{
				if(  TownCountDone(unitid) == qty )
					break;
				Sleep(2);
			}
		}

		//============================================================================
		public static bool StartUnit( int ask_qty , int unitid , int town )
		{
			// Original JassCode
			int have_qty;
			int need_qty;
			int afford_gold;
			int afford_wood;
			int afford_qty;
			int gold_cost;
			int wood_cost;
			//------------------------------------------------------------------------
			// if we have all we're asking for then make nothing
			//
			if(  town == -1  )
			{
				have_qty = TownCount(unitid);
			}
			else
			{
				have_qty = TownCountTown(unitid,town);
			}
			if(  have_qty >= ask_qty  )
			{
				return true;
			}
			need_qty = ask_qty - have_qty;
			//------------------------------------------------------------------------
			// limit the qty we're requesting to the amount of resources available
			//
			gold_cost = GetUnitGoldCost(unitid);
			wood_cost = GetUnitWoodCost(unitid);
			if(  gold_cost == 0  )
			{
				afford_gold = need_qty;
			}
			else
			{
				afford_gold = total_gold / gold_cost;
			}
			if(  afford_gold < need_qty  )
			{
				afford_qty = afford_gold;
			}
			else
			{
				afford_qty = need_qty;
			}
			if(  wood_cost == 0  )
			{
				afford_wood = need_qty;
			}
			else
			{
				afford_wood = total_wood / wood_cost;
			}
			if(  afford_wood < afford_qty  )
			{
				afford_qty = afford_wood;
			}
			// if we're waiting on gold/wood; pause build orders
			if(  afford_qty < 1  )
			{
				return false;
			}
			//------------------------------------------------------------------------
			// whether we make right now what we're requesting or not, assume we will
			// and deduct the cost of the units from our fake gold total right away
			//
			total_gold = total_gold - gold_cost * need_qty;
			total_wood = total_wood - wood_cost * need_qty;
			if(  total_gold < 0  )
			{
				total_gold = 0;
			}
			if(  total_wood < 0  )
			{
				total_wood = 0;
			}
			//------------------------------------------------------------------------
			// give the AI a chance to make the units (it may not be able to right now
			// but that doesn't stop us from trying other units after this as long
			// as we have enough money to make this AND the needed, unbuilt ones)
			//
			return SetProduce(afford_qty,unitid,town);
		}

		//============================================================================
		public static void WaitForTown( int towns , int townid )
		{
			// Original JassCode
			int i = 0;
			while( true )
			{
				Sleep(10);
				if(  TownCount(townid) >= towns )
					break;
				i = i + 1;
				if(  i == 12 )
					break;
			}
		}

		//============================================================================
		public static bool StartExpansion( int qty , int hall )
		{
			// Original JassCode
			int count;
			int town;
			BJUnit peon;
			int gold_cost;
			count = TownCount(hall);
			if(  count >= qty  )
			{
				return true;
			}
			town = GetNextExpansion();
			if(  town == -1  )
			{
				return true;
			}
			take_exp = true;
			gold_cost = GetUnitGoldCost(hall);
			if(  gold_cost > total_gold  )
			{
				return false;
			}
			total_gold = total_gold - gold_cost;
			if(  GetExpansionFoe() != null  )
			{
				return true;
			}
			peon = GetExpansionPeon();
			if(  peon != null  )
			{
				return SetExpansion(peon,hall);
			}
			return true;
		}

		//============================================================================
		public static void OneBuildLoop(  )
		{
			// Original JassCode
			int index = 0;
			int qty;
			int id;
			int tp;
			total_gold = GetGold() - gold_buffer;
			total_wood = GetWood();
			while( true )
			{
				if(  index == build_length )
					break;
				qty = build_qty [index];
				id = build_item[index];
				tp = build_type[index];
				//--------------------------------------------------------------------
				if(  tp == BUILD_UNIT  )
				{
					if(  ! StartUnit(qty,id,build_town[index])  )
					{
						return;
					}
					//--------------------------------------------------------------------
				}
				else if(  tp == BUILD_UPGRADE  )
				{
					StartUpgrade(qty,id);
					//--------------------------------------------------------------------
					// tp == BUILD_EXPAND
				}
				else
				{
					if(  ! StartExpansion(qty,id)  )
					{
						return;
					}
				}
				index = index + 1;
			}
		}

		//============================================================================
		public static void StaggerSleep( double base1 , double spread )
		{
			// Original JassCode
			Sleep(base1 + spread * I2R(GetAiPlayer()) / I2R(GetPlayers()));
		}

		//============================================================================
		public static void BuildLoop(  )
		{
			// Original JassCode
			OneBuildLoop();
			StaggerSleep(1,2);
			while( true )
			{
				OneBuildLoop();
				Sleep(2);
			}
		}

		//============================================================================
		public static void StartBuildLoop(  )
		{
			// Original JassCode
			StartThread( BuildLoop);
		}

		//============================================================================
		public static void SetInitialWave( int seconds )
		{
			// Original JassCode
			sleep_seconds = seconds;
		}

		//============================================================================
		public static void AddSleepSeconds( int seconds )
		{
			// Original JassCode
			sleep_seconds = sleep_seconds + seconds;
		}

		//============================================================================
		public static void SleepForever(  )
		{
			// Original JassCode
			//xxx
			Trace("going to sleep forever\n");
			while( true )
			{
				Sleep(100);
			}
		}

		//============================================================================
		public static void PlayGame(  )
		{
			// Original JassCode
			StartBuildLoop();
			SleepForever();
		}

		//============================================================================
		public static void ConvertNeeds( int unitid )
		{
			// Original JassCode
			if(  GetUnitCount(unitid) < 1  )
			{
				StartUnit(1,unitid,-1);
			}
		}

		//============================================================================
		public static void Conversions( int desire , int unitid )
		{
			// Original JassCode
			if(  GetUnitCount(unitid) >= desire  )
			{
				return;
			}
			if(  unitid == HIPPO_RIDER  )
			{
				ConvertNeeds(ARCHER);
				ConvertNeeds(HIPPO);
				MergeUnits(desire,ARCHER,HIPPO,HIPPO_RIDER);
			}
			else if(  unitid == BLK_SPHINX  )
			{
				ConvertNeeds(OBS_STATUE);
				ConvertUnits(desire,OBS_STATUE);
			}
		}

		//============================================================================
		public static void SetAssaultGroup( int qty , int max , int unitid )
		{
			// Original JassCode
			Conversions(max,unitid);
			if(  qty <= 0 && TownCountDone(unitid) == 0  )
			{
				return;
			}
			harass_qty[harass_length] = qty;
			harass_max[harass_length] = max;
			harass_units[harass_length] = unitid;
			harass_length = harass_length + 1;
		}

		//============================================================================
		public static void Interleave3( int e1 , int m1 , int h1 , int u1 , int e2 , int m2 , int h2 , int u2 , int e3 , int m3 , int h3 , int u3 )
		{
			// Original JassCode
			int i1 = 1;
			int i2 = 1;
			int i3 = 1;
			int q1;
			int q2;
			int q3;
			if(  difficulty == EASY  )
			{
				q1 = e1;
				q2 = e2;
				q3 = e3;
			}
			else if(  difficulty == NORMAL  )
			{
				q1 = m1;
				q2 = m2;
				q3 = m3;
				// difficulty == HARD
			}
			else
			{
				q1 = h1;
				q2 = h2;
				q3 = h3;
			}
			while( true )
			{
				if(  q1<=0 && q2<=0 && q3<=0 )
					break;
				if(  q1 > 0  )
				{
					SetAssaultGroup(i1,i1,u1);
					q1 = q1 - 1;
					i1 = i1 + 1;
				}
				if(  q2 > 0  )
				{
					SetAssaultGroup(i2,i2,u2);
					q2 = q2 - 1;
					i2 = i2 + 1;
				}
				if(  q3 > 0  )
				{
					SetAssaultGroup(i3,i3,u3);
					q3 = q3 - 1;
					i3 = i3 + 1;
				}
			}
		}

		//============================================================================
		public static void SetMeleeGroup( int unitid )
		{
			// Original JassCode
			if(  unitid == hero_id  )
			{
				SetAssaultGroup(1,9,unitid);
			}
			else
			{
				SetAssaultGroup((TownCountDone(unitid)*3)/4,20,unitid);
			}
		}

		//============================================================================
		public static void CampaignDefender( int level , int qty , int unitid )
		{
			// Original JassCode
			if(  qty > 0 && difficulty >= level  )
			{
				defense_qty[defense_length] = qty;
				defense_units[defense_length] = unitid;
				defense_length = defense_length + 1;
				Conversions(qty,unitid);
				SetBuildUnit(qty,unitid);
			}
		}

		//============================================================================
		public static void CampaignDefenderEx( int easy , int med , int hard , int unitid )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				CampaignDefender(EASY,easy,unitid);
			}
			else if(  difficulty == NORMAL  )
			{
				CampaignDefender(NORMAL,med,unitid);
			}
			else
			{
				CampaignDefender(HARD,hard,unitid);
			}
		}

		//============================================================================
		public static void CampaignAttacker( int level , int qty , int unitid )
		{
			// Original JassCode
			if(  qty > 0 && difficulty >= level  )
			{
				SetAssaultGroup(qty,qty,unitid);
			}
		}

		//============================================================================
		public static void CampaignAttackerEx( int easy , int med , int hard , int unitid )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				CampaignAttacker(EASY,easy,unitid);
			}
			else if(  difficulty == NORMAL  )
			{
				CampaignAttacker(NORMAL,med,unitid);
			}
			else
			{
				CampaignAttacker(HARD,hard,unitid);
			}
		}

		//============================================================================
		public static void FormGroup( int seconds , bool testReady )
		{
			// Original JassCode
			int index;
			int count;
			int unitid;
			int desire;
			int readyPercent;
			// normally test for CaptainReadiness() of 50%
			if(  testReady == true  )
			{
				readyPercent = 50;
				//xxx
				Trace("forming group, requiring healthy guys\n");
			}
			else
			{
				readyPercent = 0;
				//xxx
				Trace("forming group, unit health ! important\n");
			}
			//xxx
			Trace("trying to gather forces\n");
			while( true )
			{
				SuicideSleep(seconds);
				InitAssault();
				index = 0;
				while( true )
				{
					if(  index == harass_length )
						break;
					unitid = harass_units[index];
					desire = harass_max[index];
					count = TownCountDone(unitid);
					Conversions(desire,unitid);
					if(  count >= desire  )
					{
						AddAssault(desire,unitid);
					}
					else
					{
						desire = harass_qty[index];
						if(  count < desire  )
						{
							AddAssault(desire,unitid);
						}
						else
						{
							AddAssault(count,unitid);
						}
					}
					index = index + 1;
				}
				//xxx
				if(  form_group_timeouts && (sleep_seconds < -60)  )
				{
					Trace("exit form group -- timeout\n");
				}
				else if(  CaptainInCombat(true)  )
				{
					Trace("exit form group -- can't form while already in combat\n");
				}
				else if(  CaptainIsFull() && CaptainReadiness() >= readyPercent  )
				{
					Trace("exit form group -- ready\n");
				}
				//xxx
				// time out and send group anyway if time has already expired
				if(  form_group_timeouts && (sleep_seconds < -60) )
					break;
				if(  CaptainInCombat(true) )
					break;
				if(  CaptainIsFull() && CaptainReadiness() >= readyPercent )
					break;
			}
		}

		//============================================================================
		public static int WavePrepare( int unitid )
		{
			// Original JassCode
			return GetUnitBuildTime(unitid);
		}

		//============================================================================
		public static int PrepTime(  )
		{
			// Original JassCode
			int unitid;
			int missing;
			int prep;
			int count;
			int largest = 30;
			int index = 0;
			while( true )
			{
				if(  index == harass_length )
					break;
				unitid = harass_units[index];
				missing = harass_qty[index] + IgnoredUnits(unitid) - TownCount(unitid);
				prep = WavePrepare(unitid) * missing;
				if(  prep > largest  )
				{
					largest = prep;
				}
				index = index + 1;
			}
			//xxx
			TraceI("next wave will require around {0} seconds to build && gather\n",largest);
			return largest;
		}

		//============================================================================
		public static bool PrepSuicideOnPlayer( int seconds )
		{
			// Original JassCode
			int wave_prep = PrepTime();
			int save_length;
			save_length = harass_length;
			harass_length = 0;
			AddSleepSeconds(seconds);
			if(  sleep_seconds-wave_prep > 0  )
			{
				//xxx
				TraceI("going to sleep for {0} seconds before gathering next attack wave\n",sleep_seconds-wave_prep);
				SuicideSleep(sleep_seconds-wave_prep);
			}
			//xxx
			Trace("preparing suicide attack wave\n");
			harass_length = save_length;
			if(  harass_length < 1  )
			{
				//xxx
				Trace("ERROR - no units specificed, exiting early\n");
				return false;
			}
			return true;
		}

		//============================================================================
		public static void SleepUntilAtGoal(  )
		{
			// Original JassCode
			while( true )
			{
				if(  CaptainRetreating() )
					break;
				// reached goal
				if(  CaptainAtGoal() )
					break;
				// failed to path and returned home
				if(  CaptainIsHome() )
					break;
				// all units died
				if(  CaptainIsEmpty() )
					break;
				SuicideSleep(3);
			}
		}

		//============================================================================
		public static void SleepInCombat(  )
		{
			// Original JassCode
			int count = 0;
			Trace("SleepInCombat\n");
			while( true )
			{
				while( true )
				{
					// goal is cleared
					if(  ! CaptainInCombat(true) )
						break;
					// duh
					if(  CaptainIsEmpty() )
						break;
					SuicideSleep(1);
				}
				count = count + 1;
				if(  count >= 8 )
					break;
			}
			Trace("exit SleepInCombat\n");
		}

		//============================================================================
		public static void AttackMoveXYA( int x , int y )
		{
			// Original JassCode
			if(  zep_next_wave  )
			{
				LoadZepWave(x,y);
				zep_next_wave = false;
			}
			AttackMoveXY(x,y);
			SleepUntilAtGoal();
			SleepInCombat();
		}

		//============================================================================
		public static void SuicideOnPlayerWave(  )
		{
			// Original JassCode
			//xxx
			Trace("waiting for attack wave to enter combat\n");
			while( true )
			{
				//xxx
				if(  allow_signal_abort && CommandsWaiting() != 0  )
				{
					Trace("ABORT -- attack wave override\n");
				}
				if(  CaptainInCombat(true)  )
				{
					Trace("done - captain has entered combat\n");
				}
				if(  CaptainIsEmpty()  )
				{
					Trace("done - all units are dead\n");
				}
				if(  sleep_seconds < -300  )
				{
					Trace("done - timeout, took too long to reach engage the enemy\n");
				}
				//xxx
				if(  allow_signal_abort && CommandsWaiting() != 0 )
					break;
				if(  CaptainInCombat(true) )
					break;
				if(  CaptainIsEmpty() )
					break;
				SuicideSleep(10);
				if(  sleep_seconds < -300 )
					break;
			}
			//xxx
			Trace("waiting for attack wave to die\n");
			while( true )
			{
				//xxx
				if(  allow_signal_abort && CommandsWaiting() != 0  )
				{
					Trace("ABORT - attack wave override\n");
				}
				if(  CaptainIsEmpty()  )
				{
					Trace("done - all units are dead\n");
				}
				if(  sleep_seconds < -300  )
				{
					Trace("done - timeout, took too long to reach engage the enemy\n");
				}
				//xxx
				if(  allow_signal_abort && CommandsWaiting() != 0 )
					break;
				if(  CaptainIsEmpty() )
					break;
				SuicideSleep(10);
				if(  sleep_seconds < -300 )
					break;
			}
		}

		//--------------------------------------------------------------------------------------------------
		public static void CommonSuicideOnPlayer( bool standard , bool bldgs , int seconds , BJPlayer p , int x , int y )
		{
			// Original JassCode
			int save_peons;
			if(  ! PrepSuicideOnPlayer(seconds)  )
			{
				return;
			}
			save_peons = campaign_wood_peons;
			campaign_wood_peons = 0;
			while( true )
			{
				//xxx
				if(  allow_signal_abort && CommandsWaiting() != 0  )
				{
					Trace("ABORT -- attack wave override\n");
				}
				//xxx
				if(  allow_signal_abort && CommandsWaiting() != 0 )
					break;
				while( true )
				{
					if(  allow_signal_abort && CommandsWaiting() != 0 )
						break;
					FormGroup(5,true);
					if(  sleep_seconds <= 0 )
						break;
					//xxx
					TraceI("waiting {0} seconds before suicide\n",sleep_seconds);
				}
				if(  standard  )
				{
					if(  bldgs  )
					{
						if(  SuicidePlayer(p,sleep_seconds >= -60) )
							break;
					}
					else
					{
						if(  SuicidePlayerUnits(p,sleep_seconds >= -60) )
							break;
					}
				}
				else
				{
					AttackMoveXYA(x,y);
				}
				//xxx
				TraceI("waiting {0} seconds before timeout\n",60+sleep_seconds);
				SuicideSleep(5);
			}
			campaign_wood_peons = save_peons;
			harass_length = 0;
			SuicideOnPlayerWave();
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideOnPlayer( int seconds , BJPlayer p )
		{
			// Original JassCode
			CommonSuicideOnPlayer(true,true,seconds,p,0,0);
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideOnUnits( int seconds , BJPlayer p )
		{
			// Original JassCode
			CommonSuicideOnPlayer(true,false,seconds,p,0,0);
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideOnPoint( int seconds , BJPlayer p , int x , int y )
		{
			// Original JassCode
			CommonSuicideOnPlayer(false,false,seconds,p,x,y);
		}

		//============================================================================
		public static void SuicideUntilSignal( int seconds , BJPlayer p )
		{
			// Original JassCode
			int save;
			int wave_prep = PrepTime();
			while( true )
			{
				AddSleepSeconds(seconds);
				if(  sleep_seconds-wave_prep > 0  )
				{
					SuicideSleep(sleep_seconds-wave_prep);
				}
				save = campaign_wood_peons;
				campaign_wood_peons = 0;
				while( true )
				{
					while( true )
					{
						FormGroup(5, true);
						if(  sleep_seconds <= 0 )
							break;
						if(  CommandsWaiting() != 0 )
							break;
					}
					if(  SuicidePlayer(p,sleep_seconds >= -60) )
						break;
					if(  CommandsWaiting() != 0 )
						break;
					SuicideSleep(3);
				}
				campaign_wood_peons = save;
				while( true )
				{
					if(  CaptainIsEmpty() )
						break;
					if(  CommandsWaiting() != 0 )
						break;
					SuicideSleep(5);
				}
				if(  CommandsWaiting() != 0 )
					break;
			}
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideOnce( int easy , int med , int hard , int unitid )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				SuicideUnit(easy,unitid);
			}
			else if(  difficulty == NORMAL  )
			{
				SuicideUnit(med,unitid);
			}
			else
			{
				SuicideUnit(hard,unitid);
			}
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideUnitA( int unitid )
		{
			// Original JassCode
			if(  unitid != 0  )
			{
				SuicideUnit(1,unitid);
			}
			Sleep(0.1);
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideUnitB( int unitid , int playerid )
		{
			// Original JassCode
			if(  unitid != 0  )
			{
				SuicideUnitEx(1,unitid,playerid);
			}
			Sleep(0.1);
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideUnits( int u1 , int u2 , int u3 , int u4 , int u5 , int u6 , int u7 , int u8 , int u9 , int uA )
		{
			// Original JassCode
			//xxx
			Trace("MASS SUICIDE - this script is now technically done\n");
			PrepFullSuicide();
			while( true )
			{
				SuicideUnitA(u1);
				SuicideUnitA(u2);
				SuicideUnitA(u3);
				SuicideUnitA(u4);
				SuicideUnitA(u5);
				SuicideUnitA(u6);
				SuicideUnitA(u7);
				SuicideUnitA(u8);
				SuicideUnitA(u9);
				SuicideUnitA(uA);
			}
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideUnitsEx( int playerid , int u1 , int u2 , int u3 , int u4 , int u5 , int u6 , int u7 , int u8 , int u9 , int uA )
		{
			// Original JassCode
			//xxx
			Trace("MASS SUICIDE - this script is now technically done\n");
			PrepFullSuicide();
			while( true )
			{
				SuicideUnitB(u1,playerid);
				SuicideUnitB(u2,playerid);
				SuicideUnitB(u3,playerid);
				SuicideUnitB(u4,playerid);
				SuicideUnitB(u5,playerid);
				SuicideUnitB(u6,playerid);
				SuicideUnitB(u7,playerid);
				SuicideUnitB(u8,playerid);
				SuicideUnitB(u9,playerid);
				SuicideUnitB(uA,playerid);
			}
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideOnPlayerEx( int easy , int med , int hard , BJPlayer p )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				SuicideOnPlayer(easy,p);
			}
			else if(  difficulty == NORMAL  )
			{
				SuicideOnPlayer(med,p);
			}
			else
			{
				SuicideOnPlayer(hard,p);
			}
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideOnUnitsEx( int easy , int med , int hard , BJPlayer p )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				SuicideOnUnits(easy,p);
			}
			else if(  difficulty == NORMAL  )
			{
				SuicideOnUnits(med,p);
			}
			else
			{
				SuicideOnUnits(hard,p);
			}
		}

		//--------------------------------------------------------------------------------------------------
		public static void SuicideOnPointEx( int easy , int med , int hard , BJPlayer p , int x , int y )
		{
			// Original JassCode
			if(  difficulty == EASY  )
			{
				SuicideOnPoint(easy,p,x,y);
			}
			else if(  difficulty == NORMAL  )
			{
				SuicideOnPoint(med,p,x,y);
			}
			else
			{
				SuicideOnPoint(hard,p,x,y);
			}
		}

		//============================================================================
		public static void ForeverSuicideOnPlayer( int seconds , BJPlayer p )
		{
			// Original JassCode
			int length = harass_length;
			while( true )
			{
				if(  allow_signal_abort && CommandsWaiting() != 0 )
					break;
				SuicideOnPlayer(seconds,p);
				harass_length = length;
			}
		}

		//============================================================================
		public static void CommonSleepUntilTargetDead( BJUnit target , bool reform )
		{
			// Original JassCode
			while( true )
			{
				if(  CaptainRetreating() )
					break;
				if(  CaptainReadinessHP() <= 40 )
					break;
				if(  ! UnitAlive(target) )
					break;
				if(  UnitInvis(target) && ! IsUnitDetected(target,ai_player) )
					break;
				if(  ! TownThreatened()  )
				{
					AttackMoveKill(target);
				}
				SuicideSleep(3);
				if(  reform && sleep_seconds < -40  )
				{
					if(  CaptainInCombat(true)  )
					{
						sleep_seconds = sleep_seconds + 5;
					}
					else
					{
						sleep_seconds = 0;
						FormGroup(1,false);
					}
				}
			}
		}

		//============================================================================
		public static void SleepUntilTargetDead( BJUnit target )
		{
			// Original JassCode
			CommonSleepUntilTargetDead(target,false);
		}

		//============================================================================
		public static void ReformUntilTargetDead( BJUnit target )
		{
			// Original JassCode
			Trace("ReformUntilTargetDead\n");
			CommonSleepUntilTargetDead(target,true);
		}

		//============================================================================
		public static void AttackMoveKillA( BJUnit target )
		{
			// Original JassCode
			if(  target == null  )
			{
				SuicideSleep(3);
				return;
			}
			Trace("AttackMoveKillA\n");
			AttackMoveKill(target);
			ReformUntilTargetDead(target);
			SleepInCombat();
		}

		//============================================================================
		public static void MinorCreepAttack(  )
		{
			// Original JassCode
			BJUnit target = GetMinorCreep();
			SetAllianceTarget(target);
			FormGroup(3, true);
			AttackMoveKillA(target);
		}

		//============================================================================
		public static void MajorCreepAttack(  )
		{
			// Original JassCode
			BJUnit target = GetMajorCreep();
			SetAllianceTarget(target);
			FormGroup(3,true);
			AttackMoveKillA(target);
		}

		//============================================================================
		public static void CreepAttackEx(  )
		{
			// Original JassCode
			BJUnit target = GetCreepCamp(min_creeps,max_creeps,allow_air_creeps);
			SetAllianceTarget(target);
			FormGroup(3,true);
			AttackMoveKillA(target);
		}

		//============================================================================
		public static void AnyPlayerAttack(  )
		{
			// Original JassCode
			BJUnit hall;
			hall = GetEnemyExpansion();
			if(  hall == null  )
			{
				StartGetEnemyBase();
				while( true )
				{
					if(  ! WaitGetEnemyBase() )
						break;
					SuicideSleep(1);
				}
				hall = GetEnemyBase();
			}
			SetAllianceTarget(hall);
			FormGroup(3,true);
			AttackMoveKillA(hall);
		}

		//============================================================================
		public static void ExpansionAttack(  )
		{
			// Original JassCode
			BJUnit creep = GetExpansionFoe();
			int x;
			FormGroup(3, true);
			if(  creep == null  )
			{
				x = GetExpansionX();
				if(  x != -1  )
				{
					AttackMoveXYA(x,GetExpansionY());
				}
			}
			else
			{
				AttackMoveKillA(creep);
			}
		}

		//============================================================================
		//  AddSiege
		//============================================================================
		public static void AddSiege(  )
		{
			// Original JassCode
			SetAssaultGroup( 0, 9, SHADE );
			SetAssaultGroup( 0, 9, MEAT_WAGON );
			SetAssaultGroup( 0, 9, MORTAR );
			SetAssaultGroup( 0, 9, TANK );
			SetAssaultGroup( 0, 9, BALLISTA );
			SetAssaultGroup( 0, 9, CATAPULT );
		}

		//===========================================================================
		//  GetAllyCount
		//============================================================================
		public static int GetAllyCount( BJPlayer whichPlayer )
		{
			// Original JassCode
			int playerIndex = 0;
			int count = 0;
			BJPlayer indexPlayer;
			while( true )
			{
				indexPlayer = Player(playerIndex);
				if(  whichPlayer != indexPlayer  )
				{
					if(  GetPlayerAlliance(whichPlayer,indexPlayer,ALLIANCE_PASSIVE)  )
					{
						if(  GetPlayerAlliance(indexPlayer,whichPlayer,ALLIANCE_PASSIVE)  )
						{
							if(  GetPlayerStructureCount(indexPlayer,true) > 0  )
							{
								count = count + 1;
							}
						}
					}
				}
				playerIndex = playerIndex + 1;
				if(  playerIndex == 12 )
					break;
			}
			return count;
		}

		//============================================================================
		//  SingleMeleeAttack
		//============================================================================
		public static void SingleMeleeAttack( bool needs_exp , bool has_siege , bool major_ok , bool air_units )
		{
			// Original JassCode
			bool can_siege;
			double daytime;
			BJUnit hall;
			BJUnit mega;
			BJUnit creep;
			BJUnit common;
			int minimum;
			bool allies;
			//xxx
			Trace("===SingleMeleeAttack===\n");
			if(  TownThreatened()  )
			{
				//xxx
				Trace("sleep 2, town threatened\n");
				Sleep(2);
				return;
			}
			// purchase zeppelins
			//
			if(  get_zeppelin && GetGold() > 300 && GetWood() > 100  )
			{
				//xxx
				Trace("purchase zep\n");
				PurchaseZeppelin();
				get_zeppelin = false;
				ready_for_zeppelin = false;
				return;
			}
			ready_for_zeppelin = true;
			// coordinate with allies
			//
			allies = GetAllyCount(ai_player) > 0;
			if(  allies && MeleeDifficulty() != MELEE_NEWBIE  )
			{
				common = GetAllianceTarget();
				if(  common != null  )
				{
					//xxx
					Trace("join ally force\n");
					if(  GetMegaTarget() != null  )
					{
						AddSiege();
					}
					FormGroup(3,true);
					AttackMoveKillA(common);
					SetAllianceTarget(null);
					return;
				}
			}
			// take expansions as needed
			//
			if(  needs_exp  )
			{
				//xxx
				Trace("needs exp\n");
				creep = GetExpansionFoe();
				if(  creep != null  )
				{
					//xxx
					Trace("attack exp\n");
					SetAllianceTarget(creep);
					FormGroup(3,true);
					AttackMoveKillA(creep);
					Sleep(20);
					take_exp = false;
					return;
				}
			}
			// all-out attack if the player is weak
			//
			if(  MeleeDifficulty() != MELEE_NEWBIE  )
			{
				mega = GetMegaTarget();
				if(  mega != null  )
				{
					//xxx
					Trace("MEGA TARGET!!!\n");
					AddSiege();
					FormGroup(3,true);
					AttackMoveKillA(mega);
					return;
				}
			}
			// deny player an expansion
			//
			hall = GetEnemyExpansion();
			daytime = GetFloatGameState(GAME_STATE_TIME_OF_DAY);
			can_siege = has_siege && (air_units || (daytime>=4 && daytime<=12));
			if(  hall!=null && (can_siege || ! IsTowered(hall))  )
			{
				//xxx
				Trace("test player town attack\n");
				if(  MeleeDifficulty() == MELEE_NEWBIE  )
				{
					minimum = 3;
				}
				else if(  allies && MeleeDifficulty() == MELEE_NORMAL  )
				{
					minimum = 1;
				}
				else
				{
					// HARD, INSANE, and NORMAL with no allies
					minimum = 0;
				}
				if(  exp_seen >= minimum  )
				{
					//xxx
					Trace("do player town attack\n");
					exp_seen = 0;
					AddSiege();
					SetAllianceTarget(hall);
					FormGroup(3,true);
					AttackMoveKillA(hall);
					return;
				}
				exp_seen = exp_seen + 1;
			}
			// attack player's main base when siege is available
			//
			if(  can_siege  )
			{
				//xxx
				Trace("attack player's town\n");
				AddSiege();
				AnyPlayerAttack();
				return;
			}
			// extended, more specific method of determining creep levels
			//
			if(  min_creeps != -1  )
			{
				//xxx
				TraceI("custom creep attack {0}\n",max_creeps);
				CreepAttackEx();
				return;
			}
			// nothing better to do, so kill a creep camp
			//
			if(  major_ok  )
			{
				//xxx
				Trace("major creep attack\n");
				MajorCreepAttack();
				return;
			}
			//xxx
			Trace("minor creep attack\n");
			MinorCreepAttack();
		}

		//============================================================================
		public static void GetZeppelin(  )
		{
			// Original JassCode
			if(  ready_for_zeppelin  )
			{
				get_zeppelin = true;
			}
		}

		//============================================================================
		public static int FoodUsed(  )
		{
			// Original JassCode
			return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_USED);
		}

		//============================================================================
		public static int FoodCap(  )
		{
			// Original JassCode
			return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_CAP);
		}

		//============================================================================
		public static int FoodSpace(  )
		{
			// Original JassCode
			return FoodCap() - FoodUsed();
		}

		//============================================================================
		public static int FoodAvail( int base1 )
		{
			// Original JassCode
			return GetFoodMade(racial_farm) * TownCount(racial_farm) + GetFoodMade(base1) * TownCount(base1);
		}

		//============================================================================
		public static void BuildAttackers(  )
		{
			// Original JassCode
			int index = 0;
			int unitid;
			int desire;
			int count;
			while( true )
			{
				if(  index == harass_length )
					break;
				unitid = harass_units[index];
				desire = harass_qty[index] + IgnoredUnits(unitid);
				count = TownCount(unitid);
				if(  count != desire  )
				{
					if(  ! StartUnit(desire,unitid,-1)  )
					{
						return;
					}
				}
				index = index + 1;
			}
		}

		//============================================================================
		public static void BuildDefenders(  )
		{
			// Original JassCode
			int index = 0;
			int unitid;
			int qty;
			while( true )
			{
				if(  index == defense_length )
					break;
				unitid = defense_units[index];
				qty = defense_qty[index];
				Conversions(qty,unitid);
				AddDefenders(qty,unitid);
				index = index + 1;
			}
		}

		//============================================================================
		public static void CampaignBasicsA(  )
		{
			// Original JassCode
			int food_each = GetFoodMade(racial_farm);
			int on_wood;
			ClearHarvestAI();
			if(  CaptainInCombat(false)  )
			{
				on_wood = 0;
			}
			else
			{
				on_wood = campaign_wood_peons;
			}
			HarvestGold(0,campaign_gold_peons);
			HarvestWood(0,on_wood);
			if(  harvest_town1  )
			{
				HarvestGold(1,campaign_gold_peons);
				HarvestWood(1,on_wood);
			}
			if(  harvest_town2  )
			{
				HarvestGold(2,campaign_gold_peons);
				HarvestWood(2,on_wood);
			}
			if(  harvest_town3  )
			{
				HarvestGold(3,campaign_gold_peons);
				HarvestWood(3,on_wood);
			}
			if(  do_campaign_farms && FoodUsed()+food_each-1 > food_each*(TownCount(racial_farm)+1)  )
			{
				StartUnit(TownCount(racial_farm)+1,racial_farm,-1);
			}
			if(  build_campaign_attackers  )
			{
				BuildAttackers();
			}
			if(  ! CaptainInCombat(false)  )
			{
				BuildDefenders();
			}
			FillGuardPosts();
			ReturnGuardPosts();
		}

		//============================================================================
		public static void CampaignBasics(  )
		{
			// Original JassCode
			Sleep(1);
			CampaignBasicsA();
			StaggerSleep(1,5);
			while( true )
			{
				CampaignBasicsA();
				Sleep(campaign_basics_speed);
			}
		}

		//============================================================================
		public static void CampaignAI( int farms , BJCodeInt heroes )
		{
			// Original JassCode
			if(  GetGameDifficulty() == MAP_DIFFICULTY_EASY  )
			{
				difficulty = EASY;
				SetTargetHeroes(false);
				SetUnitsFlee(false);
			}
			else if(  GetGameDifficulty() == MAP_DIFFICULTY_NORMAL  )
			{
				difficulty = NORMAL;
				SetTargetHeroes(false);
				SetUnitsFlee(false);
			}
			else if(  GetGameDifficulty() == MAP_DIFFICULTY_HARD  )
			{
				difficulty = HARD;
				SetPeonsRepair(true);
			}
			else
			{
				difficulty = INSANE;
			}
			InitAI();
			InitBuildArray();
			InitAssaultGroup();
			CreateCaptains();
			SetNewHeroes(false);
			if(  heroes != null  )
			{
				SetHeroLevels(heroes);
			}
			SetHeroesFlee(false);
			SetGroupsFlee(false);
			SetSlowChopping(true);
			GroupTimedLife(false);
			SetCampaignAI();
			Sleep(0.1);
			racial_farm = farms;
			StartThread( CampaignBasics);
			StartBuildLoop();
		}

		//============================================================================
		public static void UnsummonAll(  )
		{
			// Original JassCode
			BJUnit bldg;
			while( true )
			{
				bldg = GetBuilding(ai_player);
				if(  bldg==null )
					break;
				Unsummon(bldg);
				Sleep(2);
			}
		}

		//============================================================================
		//  SkillArrays
		//============================================================================
		public static int SkillArrays(  )
		{
			// Original JassCode
			int level = GetHeroLevelAI();
			if(  level > max_hero_level  )
			{
				max_hero_level = level;
			}
			if(  GetHeroId() == hero_id  )
			{
				return skills1[level];
			}
			else if(  GetHeroId() == hero_id2  )
			{
				return skills2[level];
			}
			else
			{
				return skills3[level];
			}
		}

		//--------------------------------------------------------------------------------------------------
		//  SetSkillArray
		//--------------------------------------------------------------------------------------------------
		public static void SetSkillArray( int index , int id )
		{
			// Original JassCode
			int i = 1;
			if(  index == 1  )
			{
				if(  hero_id != id  )
				{
					return;
				}
				while( true )
				{
					skills1[i] = skill[i];
					if(  i == 10 )
						break;
					i = i + 1;
				}
			}
			else if(  index == 2  )
			{
				if(  hero_id2 != id  )
				{
					return;
				}
				while( true )
				{
					skills2[i] = skill[i];
					if(  i == 10 )
						break;
					i = i + 1;
				}
			}
			else
			{
				if(  hero_id3 != id  )
				{
					return;
				}
				while( true )
				{
					skills3[i] = skill[i];
					if(  i == 10 )
						break;
					i = i + 1;
				}
			}
		}

		//============================================================================
		//  AwaitMeleeHeroes
		//============================================================================
		public static void AwaitMeleeHeroes(  )
		{
			// Original JassCode
			if(  GetUnitCountDone(hero_id2) > 0  )
			{
				two_heroes = true;
			}
			while( true )
			{
				if(  GetUnitCountDone(hero_id)>0 && (take_exp || (! two_heroes || GetUnitCountDone(hero_id2)>0)) )
					break;
				Sleep(1);
			}
		}

		//============================================================================
		//  PickMeleeHero 
		//============================================================================
		public static int PickMeleeHero( BJRace raceid )
		{
			// Original JassCode
			int first;
			int second;
			int third;
			int last;
			int[] heroes = new int[5];
			//------------------------------------------------------------------------
			if(  raceid == RACE_HUMAN  )
			{
				//------------------------------------------------------------------------
				heroes[1] = ARCHMAGE;
				heroes[2] = MTN_KING;
				heroes[3] = PALADIN;
				heroes[4] = BLOOD_MAGE;
				//------------------------------------------------------------------------
			}
			else if(  raceid == RACE_ORC  )
			{
				//------------------------------------------------------------------------
				heroes[1] = BLADE_MASTER;
				heroes[2] = FAR_SEER;
				heroes[3] = TAUREN_CHIEF;
				heroes[4] = SHADOW_HUNTER;
				//------------------------------------------------------------------------
			}
			else if(  raceid == RACE_NIGHTELF  )
			{
				//------------------------------------------------------------------------
				heroes[1] = DEMON_HUNTER;
				heroes[2] = KEEPER;
				heroes[3] = MOON_BABE;
				heroes[4] = WARDEN;
				//------------------------------------------------------------------------
			}
			else if(  raceid == RACE_UNDEAD  )
			{
				//------------------------------------------------------------------------
				heroes[1] = DEATH_KNIGHT;
				heroes[2] = DREAD_LORD;
				heroes[3] = LICH;
				heroes[4] = CRYPT_LORD;
			}
			else
			{
				hero_id = 0;
			}
			if(  VersionCompatible(VERSION_FROZEN_THRONE)  )
			{
				last = 4;
			}
			else
			{
				last = 3;
			}
			first = GetRandomInt(1,last);
			second = GetRandomInt(1,last-1);
			third = GetRandomInt(1,last-2);
			hero_id = heroes[first];
			heroes[first] = heroes[last];
			hero_id2 = heroes[second];
			heroes[second] = heroes[last-1];
			hero_id3 = heroes[third];
			return hero_id;
		}

	}

